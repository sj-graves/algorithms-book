<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Pandoc using pretext.lua -->
<pretext>
<article>



	<section xml:id="class-project-01">
		<title>Class Project 01</title>

		<p>
			It is <em>very important</em> that you actually type the given code in by hand <em>exactly as it is written</em>. There are two reasons for this:
		</p>

		<p><ol>
			<li>
			Attention to detail is a very important difference between people who are good at their job and people who are merely mediocre.
			</li>

			<li>
			Sometimes the point of an exercise will be to fix something which has intentionally been written as broken.
			</li>

		</ol></p>


		<subsection xml:id="organization">
			<title>Organization</title>

			<p>
				These projects will be broken into <term>Exercises</term>, which will individually be broken into <term>Tasks</term> and those into <term>Subtasks</term>, if that level of structure is necessary. Code blocks and commands to be typed on the computer <c>will look like this</c>.
			</p>

			<blockquote>
							<p>
				Anything in a box like this is a side remark. Consider it like a footnote.
			</p>

			<blockquote>
							<p>
				They can be nested.
			</p>

			<blockquote>
							<p>
				I won’t use this too often, but it’s nice for quotations.
			</p>
			</blockquote>
			</blockquote>
			</blockquote>

		</subsection>

		<subsection xml:id="exercise-1-setup">
			<title>Exercise 1: Setup</title>

			<p>
				These aren’t really related to learning to code, they’re just getting your <q>software stack</q> ready.
			</p>


			<subsubsection xml:id="task-1.1-text-editor">
				<title>Task 1.1: Text Editor</title>

				<p>
					Any text editor will do. There are a number of good cross-platform editors. Unfortunately, most of them are IDEs: <em>integrated development environments</em>. The <url href="https://survey.stackoverflow.co/2023/#section-most-popular-technologies-integrated-development-environment">most popular among programmers</url> is <url href="https://github.com/microsoft/vscode">Visual Studio Code</url>; for those of us who don’t like operating with Microsoft breathing down our necks, there is an alternative version of VS Code which avoids all the yucky Microsoft branding and telemetry: <url href="https://vscodium.com/">VSCodium</url>. The upside is that these are beautiful text editors. The downside is that it’s all too easy to add plugins which oversimplify the process of writing code. We will avoid the use of any plugins which complete code, debug our problems for us, or generally make things too easy.
				</p>

				<table>
					<caption></caption>
					<tabular>
					<row header="yes">
						<cell halign="left">Operating System</cell>
						<cell halign="left">Options</cell>
					</row>
					<row class="odd">
						<cell halign="left">Windows</cell>
						<cell halign="left">VS Code, Notepad++</cell>
					</row>
					<row class="even">
						<cell halign="left">MacOS</cell>
						<cell halign="left">VS Code, TextEdit</cell>
					</row>
					<row class="odd">
						<cell halign="left">Linux</cell>
						<cell halign="left">VS Code, gedit</cell>
					</row>
					</tabular>
				</table>

				<blockquote>
									<p>
					<em>Advanced</em>: On the off chance that you’re using Linux via the command line, you probably don’t need any help with this. I suggest using <c>screen</c> and your favorite choice of <c>vim</c>, <c>emacs</c>, or <c>nano</c>.
				</p>
				</blockquote>

				<p>
					Henceforth this program will be called your <em>editor</em>.
				</p>

			</subsubsection>

			<subsubsection xml:id="task-1.2-find-the-terminal-on-your-computer">
				<title>Task 1.2: Find the <em>Terminal</em> on your computer</title>

				<p><ul>
					<li>
					Windows: the Terminal in Windows is called <em>PowerShell</em>
					</li>

					<li>
					MacOS: It’s called <em>Terminal</em>, and it’s in <em>Applications/Utilities</em> or something similar.
					</li>

					<li>
					Linux: If you are using Linux and can’t find the terminal, you probably ought not be using Linux. There are many different terminal programs, and every Linux distribution comes with at least one — it’s the basic multi-user login console.
					</li>

				</ul></p>

				<p>
					Whichever one of these options you’re using, I will refer to all of them as your <em>terminal</em> and the interface that it provides you access to I will call the <em>command line</em>. Commands that will be typed at the command line will look like this:
				</p>

				<pre>$ touch myface</pre>

				<p>
					The <c>$</c> is called the <em>prompt</em>. It might look different, often including the path to the current working directory (or at least the name of the current working directory).
				</p>


				<paragraphs xml:id="subtask-1.2.1">
					<title>Subtask 1.2.1</title>

					<p>
						Test to see if <c>python3</c> works in your terminal.
					</p>

					<pre>$ python3</pre>

					<p>
						The response, when Python is correctly installed, should look something like this:
					</p>

					<pre>Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;</pre>

					<p>
						If that shows up, type <c>quit()</c> and press Enter/Return/↵.
					</p>

				</paragraphs>
			</subsubsection>

			<subsubsection xml:id="task-1.3-get-python">
				<title>Task 1.3: Get Python</title>

				<p>
					To get Python for the system you are using, head to <url href="https://python.org">https://python.org</url> and download <em>Python 3</em>, in the latest version number; as of this writing, it is Python 3.11. For most purposes, the version number after 3 won’t matter.
				</p>

			</subsubsection>

			<subsubsection xml:id="task-1.4-working-environment">
				<title>Task 1.4: Working Environment</title>

				<p>
					You’re going to want to know how to navigate in the terminal. You should look up on the internet (using DuckDuckGo, Brave Search, or some other privacy-focused search engine) the commands used in your particular operating system for navigating the command line. At the minimum, you’ll need to know how to create a new directory (also called a folder) and how to change directories.
				</p>

				<p>
					Wherever you keep your files (usually a directory called <c>Documents</c> or something) create a new directory called <c>aam-python</c>. Inside that you’re going to create another directory for every daily activity.
				</p>

			</subsubsection>
		</subsection>

		<subsection xml:id="problem-2-your-first-program-strings-and-comments">
			<title>Problem 2: Your First Program — Strings and Comments</title>


			<subsubsection xml:id="task-2.1-make-a-new-file">
				<title>Task 2.1: Make a new file</title>

				<p>
					Create a directory in your <c>aam-python</c> directory called <c>project-01</c>. Open your editor and <term><em>type</em></term> the following code:
				</p>

				<pre># Name: Frodo Baggins
print("Hello world!")
print("Hello yourself")
print('Type this exactly the way that I have typed it')
print("Don't change anything, even if you feel 'smart.'")
print("""\tSometimes things don't do what you would expect, and\n
         that's\t\tokay""")</pre>

				<p>
					Change the line which includes <c>Frodo Baggins</c> so that it says your name instead.
				</p>

				<p>
					Save that as a file named <c>prj01_02.py</c> in your <c>aam-python/project-01</c> directory.
				</p>

			</subsubsection>

			<subsubsection xml:id="task-2.2-run-your-new-file-as-a-python-script">
				<title>Task 2.2: Run your new file as a Python script</title>

				<p>
					Open your terminal and change directories to your <c>aam-python/project-01</c> directory. At the command line, type
				</p>

				<pre>$ python3 prj01_02.py</pre>


				<paragraphs xml:id="expected-output-what-should-i-see">
					<title>Expected Output (What Should I See?)</title>

					<p>
						After running this code through the Python interpreter (that’s what happens when you call <c>python3</c> with a filename argument), you should see the following output:
					</p>

					<pre>Hello world!
Hello yourself
Type this exactly the way that I have typed it
Don't change anything, even if you feel 'smart.'
Sometimes things don't do what you would expect, and

    that's okay</pre>

				</paragraphs>
			</subsubsection>

			<subsubsection xml:id="task-2.3-progress-check">
				<title>Task 2.3: Progress Check!</title>

				<p>
					Answer the following questions:
				</p>

				<p><ol>
					<li>
					When the <em>octothorpe</em> character <c>#</c> occurs in a line, it signifies to Python that everything else on the line is a comment and should be ignored. What happens if something is written to the left of <c>#</c> on a line? &gt; Some people have different names for <c>#</c>, including <em>hash</em>, <em>pound</em>, <em>mesh</em>, or <em>number sign</em>. Relax. It’s not important.
					</li>

					<li>
					A sequence of typable characters enclosed in double quotes <c>"like this"</c> is a <c>str</c>, which is short for <em>string</em>. Are there any other ways to enclose a <c>str</c>?
					</li>

					<li>
					Even though they take two keystrokes to type, both <c>\n</c> and <c>\t</c> act as single character. The <em>backslash</em> <c>\</c> is called the <em>escape character</em> and indicates that the character following it should be treated in a special way.

				<p><ul>
					<li>
					How is <c>"\n"</c> treated?
					</li>

					<li>
					How is <c>"\t"</c> treated?
					</li>

					<li>
					How should <c>"\\"</c> be treated?
					</li>

				</ul></p>
					</li>

					<li>
					What does the <c>print(...)</c> function do?
					</li>

					<li>
					What will happen if you add <c>print("Lots of people have phone #s")</c> as the last line of the file?
					</li>

					<li>
					What is wrong with <c>print('The bird's the word!')</c>?
					</li>

				</ol></p>

			</subsubsection>

			<subsubsection xml:id="common-problems">
				<title>Common Problems</title>

				<p><ol>
					<li>
					I got a <c>SyntaxError: invalid syntax</c> when I tried <c>python3 prj01_02.py</c>.

				<p><ul>
					<li>
					Yes, that’s possible. A <c>SyntaxError</c> occurs when you type something that doesn’t match the rules of Python. Look at what you typed and look at what was specified. Do they match? A good way to check is word-by-word <term>in reverse order</term>.
					</li>

				</ul></p>
					</li>

					<li>
					I get <c>can't open file 'prj01_02.py': [Errno 2] No such file or directory</c>.

				<p><ul>
					<li>
					You need to make sure the current working directory of the terminal is the directory in which you saved your <c>prj01_02.py</c> file.
					</li>

				</ul></p>
					</li>

					<li>
					Nothing happens when I run <c>python3 prj01_02.py</c>.

				<p><ul>
					<li>
					You need to use the <c>print</c> function or you won’t see output.
					</li>

				</ul></p>
					</li>

				</ol></p>

			</subsubsection>
		</subsection>

		<subsection xml:id="problem-3-arithmetic">
			<title>Problem 3: Arithmetic</title>

			<p>
				Here are some symbols. Let’s give them names, and then during the exercise, you can identify the mathematical operation which goes with each.
			</p>

			<table>
				<caption></caption>
				<tabular>
				<row header="yes">
					<cell halign="center">Symbol</cell>
					<cell halign="left">Name</cell>
					<cell halign="center">Symbol</cell>
					<cell halign="left">Name</cell>
				</row>
				<row class="odd">
					<cell halign="center"><c>+</c></cell>
					<cell halign="left">plus</cell>
					<cell halign="center"><c>&lt;</c></cell>
					<cell halign="left">less than</cell>
				</row>
				<row class="even">
					<cell halign="center"><c>-</c></cell>
					<cell halign="left">minus</cell>
					<cell halign="center"><c>&gt;</c></cell>
					<cell halign="left">greater than</cell>
				</row>
				<row class="odd">
					<cell halign="center"><c>*</c></cell>
					<cell halign="left">asterisk</cell>
					<cell halign="center"><c>&lt;=</c></cell>
					<cell halign="left">less than or equal to</cell>
				</row>
				<row class="even">
					<cell halign="center"><c>/</c></cell>
					<cell halign="left">slash</cell>
					<cell halign="center"><c>&gt;=</c></cell>
					<cell halign="left">greater than or equal to</cell>
				</row>
				<row class="odd">
					<cell halign="center"><c>%</c></cell>
					<cell halign="left">percent</cell>
					<cell halign="center"></cell>
					<cell halign="left"></cell>
				</row>
				</tabular>
			</table>

			<p>
				It’s good practice to call the symbol by its name when you’re programming, even when what you’re programming is math, to get used to the symbols being just that — symbols.
			</p>

			<blockquote>
							<p>
				The name of the symbol <c>*</c> is <em>asterisk</em>, not <em>Asterix</em>. Asterix is a cartoon Gaul who has a popular series of comic books in Europe, along with his friend Obelix and a cast of ragtag companions.
			</p>
			</blockquote>


			<subsubsection xml:id="task-3.1-make-another-new-file">
				<title>Task 3.1 Make another new file</title>

				<p>
					Open a new file in your editor and type the following:
				</p>

				<pre># Name: Frodo Baggins
print("Let's count some things.")

print("Bobs", 23 + 40 / 5)
print("Larrys", 3 + 10 * 7 % 6)

print("Here is a strange one:", 4 - 5 + 2 - 6 % 3 + 8 / 10 - 1)

print("Is 5 + 3 &lt; 2 - 5?", 5 + 3 &lt; 2 - 5)
print("Let's check.")
print("5 + 3 =", 5 + 3)
print("2 - 5 =", 2 - 5)

print("Is it greater?",  8 &gt; -3)
print("Is it greater or equal?", 8 &gt;= -3)
print("Is it less or equal?", 8 &lt;= -3)</pre>

				<p>
					Replace <c>Frodo Baggins</c> with your name. Save it as <c>prj01_03.py</c> and then in your terminal run the command
				</p>

				<pre>$ python3 prj01_03.py</pre>

			</subsubsection>

			<subsubsection xml:id="task-3.2-progress-check">
				<title>Task 3.2 Progress Check</title>

				<p>
					Answer the following questions:
				</p>

				<p><ol>
					<li>
									<p>
					What arithmetic operators are performed by each of the symbols we described in the table?
				</p>
					</li>

					<li>
									<p>
					Explain the order of operations utilized by Python.
				</p>
					</li>

					<li>
									<p>
					Is <c>2 / 3 / 4</c> the same as <c>(2 / 3) / 4</c> or <c>2 / (3 / 4)</c> according to Python? Predict it then test your prediction.
				</p>
					</li>

					<li>
									<p>
					You can work with Python in <em>interactive mode</em> by running
				</p>

				<pre>$ python3</pre>

				<p>
					Use interactive mode to discover what the operators <c>//</c> and <c>**</c> do when applied to integers.
				</p>
					</li>

				</ol></p>

			</subsubsection>

			<subsubsection xml:id="common-problem-something-weird-happened">
				<title>Common Problem: Something weird happened!</title>

				<p>
					This usually comes from miscopying the code. Here are some <q>tricks</q> which help you focus on details and notice differences:
				</p>

				<p><ol>
					<li>
					Write a comment above each line of code explaining to yourself in plain English what the code does.
					</li>

					<li>
					Read your <c>.py</c> file… backward. Compare it to the given code.
					</li>

					<li>
					Read your <c>.py</c> file out loud, even the symbolic characters, using their names instead of the operator names.
					</li>

				</ol></p>

			</subsubsection>
		</subsection>

		<subsection xml:id="problem-4-variables-and-names">
			<title>Problem 4: Variables and Names</title>

			<p>
				Programmers like to give memorable names to the values used in computation; in mathematics, there are generally only a few variables floating around in a given problem, but a long enough computer program could utilize hundreds of different variables. In mathematics, a variable is a letter used to represent an unknown quantity; in programming, a <em>variable</em> is a name bound to a particular value.
			</p>

			<blockquote>
							<p>
				Some languages allow or require variables to be declared with a particular <em>type</em> before the value is assigned. Also, some languages are <em>strictly typed</em>, meaning that once a variable has been bound to a particular type of value, it cannot be changed to a different type. My <term>new favorite language</term>, <url href="https://rust-lang.org">Rust</url>, goes even further: the value of a variable cannot even be changed unless the type is specified as <em>mutable</em>.
			</p>
			</blockquote>

			<p>
				The standard <em>naming convention</em> in Python is to use all lower case letters in variable names, and when multiple words are convenient to aid in remembering the purpose of the variable, they should be separated using the underscore character <c>_</c>.
			</p>


			<subsubsection xml:id="task-4.1-make-another-new-file">
				<title>Task 4.1: Make another new file!</title>

				<p>
					Open a new file in your editor and type the following:
				</p>

				<pre>planes = 100
seats_per_plane = 12.0
pilots = 30
passengers = 110
planes_not_flown = planes - pilots
planes_flown = pilots

airpool_capacity = planes_flown * seats_per_plane
average_passengers_per_plane = passengers / planes_flown

print("There are", planes, " small planes in the fleet.")
print("We have", pilots, "pilots today.")
print("There will be", planes_not_flown, "grounded planes today.")
print("We can transport", airpool_capacity - pilots, "passengers today.")
print("We have", passengers, "today.")
print("We will need to put about", average_passengers_per_plane, 
      "passengers on each plane.")</pre>

				<p>
					Save that as <c>prj01_04.py</c> and run
				</p>

				<pre>$ python3 prj01_04.py</pre>


				<paragraphs xml:id="warning">
					<title>Warning!</title>

					<p>
						Why might I see the following error?
					</p>
				</paragraphs>

			</subsubsection>

		</subsection>

	</section>



</article>
</pretext>
