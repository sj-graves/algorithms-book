<?xml version='1.0' encoding='utf-8'?>

<section xml:id="sec-python-setup" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Getting started with Python</title>
    <introduction>
        <p> We began with a neat practical algorithm. Unfortunately, even with a very good
            understanding of the problem and its solution a beginner is not ready to turn the
            complete algorithm into a working computer code, or <term>program</term>. To get started
            with Python, you need three tools: a <term>terminal
            </term>, an <term>editor</term>, and the <term>Python interprer</term>
            itself. </p>
    </introduction>

    <subsection xml:id="sub-python-setup-terminal">
        <title>Working in a terminal</title>
        <p> Every modern computer operating system comes with a <term>terminal</term>, also called
            the <term>command line</term>. Whether or not you have used it previously depends upon
            how you generally use your computer. </p>
        <p> In Windows, the best terminal to use is <term>PowerShell</term>; in MacOS and most
            graphical Linux desktops, it is called <term>Terminal</term>. If you happen to use Linux
            from the command line, you're already where you need to be. </p>
        <p>
            While your actual terminal might look different, this is what we will use to demonstrate
            running commands at the command line:
        </p>
        <console prompt="$ ">
            <prompt>$ </prompt>
            <input>
                touch myface
            </input>
        </console>
    </subsection>
    <subsection xml:id="sub-python-setup-editor">
        <title>Text editors</title>
        <p>
            There are so many text editors that it is pointless to try to list them all. Ideally you
            want to work with a plain text editor that does not have any additional bells and
            whistles.
        </p>
        <list>
            <title>Text editors by OS</title>
            <dl>
                <li>
                    <title>Windows</title>
                    <p>
                        <alert>Notepad++</alert>, from <url href="https://notepad-plus-plus.org/" />
                    </p>
                </li>
                <li>
                    <title>MacOS</title>
                    <p>
                        <alert>TextEdit</alert> (ships with MacOS); <alert>gedit</alert> from <url
                            href="https://wiki.gnome.org/Apps/Gedit" />
                    </p>
                </li>
                <li>
                    <title>Linux (GUI)</title>
                    <p> Depends on desktop, but they all come with one. I like <alert>gedit</alert>
                        if using Gnome, from <url
                            href="https://wiki.gnome.org/Apps/Gedit" />. </p>
                </li>
                <li>
                    <title>Linux (CLI)</title>
                    <p>
                        <c>vim</c>, <c>emacs</c>, <c>nano</c>
                    </p>
                </li>
            </dl>
        </list>
        <p> I highly recommend using free and open-source software (FOSS), especially for something
            a simple as a text editor. If you want something more sophisticated but not
            over-powered, you can use <c>geany</c>; this is technically an <term>integrated
            development environment</term> rather than a text editor. </p>
    </subsection>
    <subsection xml:id="sub-python-setup-python">
        <title>Obtain Python</title>
        <p>
            Getting Python installed is pretty easy, but you might already have it. Open your
            terminal and try the following:
        </p>
        <console>
            <prompt>$ </prompt>
            <input>
                python3
            </input>
        </console>
        <p> You should get one of two responses: the terminal will either tell you that no such
            command is known (and possibly suggest where to get such a command) or you'll enter the <term>Python
            interpreter</term>, which will look like so: </p>
        <listing>
            <caption>An interactive Python session</caption>
            <console>
                <output>
                    Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux
                    Type "help", "copyright", "credits" or "license" for more information.
                </output>
                <prompt>&gt;&gt;&gt; </prompt>
                <input />
            </console>
        </listing>
        <p> If this second case occurs, type <c>quit()</c> to exit Python and return to your
            terminal. If it does not, you need Python: go to <url href="https://python.org" /> and
            follow the download directions appropriate for your operating system.</p>
    </subsection>
    <subsection xml:id="sub-python-setup-working">
        <title>Working environment</title>
        <p> It's a good idea to have a dedicated <term>working environment</term> for your course
            work. I like to create a subdirectory in my <c>Documents</c> directory called <c>aam</c>
            and do all my work there, keeping all of the files associated with each project in a
            subdirectory of that. It makes everything nice and hierarchical and easy to find, rather
            than scrolling through a long list of files all dumped in one folder (or on the
            desktop)! </p>
    </subsection>
    <subsection xml:id="sub-python-setup-firstprogram">
        <title>A first Python script</title>
        <p> We've alread seen that executing <c>python3</c> from the command line will allow us to
            enter Python's interactive mode, but generally speaking you won't use that mode very
            often. Most of the time you'll work with programs saved in separate files, called <term>
            scripts</term>. It is normal to name Python scripts as files ending in the <c>.py</c>
            extension. </p>
        <p>
            Using your text editor, start a new file, and type the following exactly into it.
        </p>
        <listing>
            <caption>A first Python script</caption>
            <program language="python3">
                <input>
                    # Name: Frodo Baggins
                    print("Hello world!")
                    print("Hello yourself")
                    print('Type this exactly the way that I have typed it')
                    print("Don't change anything, even if you feel 'smart.'")
                    print("""\tSometimes things don't do what you would expect, and\n
                          that's\t\tokay""")
                </input>
            </program>
        </listing>
        <p>
            Save that file in as <c>prj01_01.py</c>. Then navigate in your terminal to the directory where you saved the file, and run the following command.
        </p>
        <console>
            <prompt>$ </prompt>
            <input>
                python3 prj01_01.py
            </input>
        </console>
        <p>
            You should get the following output.
        </p>
        <console>
            <output>
                Hello world!
                Hello yourself
                Type this exactly the way that I have typed it
                Don't change anything, even if you feel 'smart.'
                Sometimes things don't do what you would expect, and

                    that's okay
            </output>
        </console>
        <remark>
            <p> It is <em>very important</em> that you actually type the given code in by hand <em>exactly
                as it is written</em>. There are two reasons for this: </p>

            <p>
                <ol>
                    <li>
                        Attention to detail is a very important difference between people who are
                        good at their job and people who are merely mediocre.
                    </li>

                    <li>
                        Sometimes the point of an exercise will be to fix something which has
                        intentionally been written as broken.
                    </li>

                </ol>
            </p>
        </remark>
        <!-- <p>
            From within IDLE, do the following:
        </p>
        <p>
            <ol>
                <li>
                    <p> Open a new file, either from the File menu or pressing <c>Ctrl-N</c>. </p>
                </li>
                <li>
                    <p> Type <c>print("Hello, world!")</c> in the blank file. </p>
                </li>
                <li>
                    <p> Save it somewhere memorable (like a Python folder on your desktop) as <c>
                        hello_world.py</c>
                    </p>
                </li>
                <li>
                    <p>From the Run menu, select Run Module, or press <c>F5</c> on your keyboard. </p>
                </li>
            </ol>
        </p>
        <p>
            After a second, you should see some output in the IDLE Shell window, like so:
        </p>
        <listing xml:id="list-hello_world_output">
            <title>The output of running the <q>Hello, World!</q> module.</title>
            <console>
                <output>= RESTART: C:/Users/sgraves/OneDrive - The University of Texas at
                    Tyler/Python/hello_world.py
                    Hello, world!
                </output>
                <prompt>&gt;&gt;&gt; </prompt>
                <input />
            </console>
        </listing>
        <p>
            Congratulations! You can no longer say you have never written a computer program.
        </p>
        <p>
            We will frequently be writing modules and listing code examples in the text, so they
            will appear like so:
        </p>
        <listing xml:id="list-hello_world">
            <title>The <q>Hello, world!</q> program</title>
            <program language="python">
                <input>print("Hello, world!")</input>
            </program>
        </listing>
        <p> All of your actual work in Python should be done in modules, which are also called <em>
            scripts</em>. It is convenient to have one folder where you keep all of your Python
            code, and even more convenient to name your Python modules sensibly so that they can be
            reused if ever you have the need. </p> -->
    </subsection>
</section>
