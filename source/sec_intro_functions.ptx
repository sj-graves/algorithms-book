<?xml version='1.0' encoding='utf-8'?>
<section xml:id="sec-intro-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Functions and conditional statements</title>
    <introduction>
        <p>
            We already have a good, useable definition of functions in <xref ref="def-math-function" />. That definition still actually holds for programming functions.
        </p>
        <definition xml:id="def-function">
            <title>Programming function</title>
            <statement>
                <p>
                    Also called a <term>subroutine</term>, a <term>function</term> in computer programming is a sequence of program instructions encapsulated into a unit which can be references elsewhere in a program.
                </p>
            </statement>
        </definition>
        <p>
            Any self-contained implementation of any algorithm can be considered as a subroutine, so we will use function specifically for those which are defined in Python using the <c>def</c> command.
        </p>
    </introduction>
    <subsection xml:id="sub-intro-functions-def">
        <title><c>def</c>ining new functions</title>
        <p>
            As hinted by the title of this subsection, the command in Python which allows functions to be defined is <c>def</c>.
        </p>
        <technology xml:id="tech-def">
            <title>Defining functions with <c>def</c></title>
            <statement>
                <p>
                    In order to define a function in Python, we use the <c>def</c> block structure as follows:
                </p>
                <listing>
                    <caption>An example of using a <c>def</c> block structure</caption>
                    <program language="python">
                        <input>
                            def my_func(arg1, arg2, arg3=default_val):
                                """The multiline string which comes immediately after a 'def' statement
                                is the docstring, which is displayed when 'help(my_func)' is used at the
                                Python console."""
                                # Some procedure goes here
                                #
                                # Every function either explicitly returns a value or the program "falls
                                # off" the end of the function, which effectively returns the value
                                # None, of NoneType.
                                return arg1
                        </input>
                    </program>
                </listing>
                <p>
                    The expression <c>my_func</c> is the name of the function, the values <c>arg1</c>, <c>arg2</c>, and <c>arg3</c> are <term>arguments</term> to the function, and <c>arg3=default_val</c> indicates that the third argument is <term>optional</term> as a <term>default value</term> is provided. Whatever follows the <c>return</c> statement, or is passed to the <c>return</c> statement in parentheses, is the value sent back to the <term>calling routine</term> where the function was invoked.
                </p>
            </statement>
        </technology>
        <p>
            Every piece of code that is written can be wrapped in a function with a memorable name and saved by a user in a single location for later use. This allows a programmer to efficiently reuse code that has already been written, rather than having to reimplement known algorithms repeatedly. Extremely common or basic-level functions are actually written into Python, and a list of these built-in functions is available at the <url href="https://docs.python.org/3/library/functions.html">Python documentation</url> website.
        </p>
    </subsection>
    <subsection xml:id="subsec-into-functions-conditionals">
        <title>Controlling flow of programs</title>
        <p>
            In order to write good, meaningful functions, we need to be able to emulate mathematical functions with piecewise definitions. Take for example the <term>Kronecker delta</term> function,
            <me>\delta(i,j) = \begin{cases} 1, \amp i=j, \\ 0, \amp i\neq j.\end{cases}</me>
            The value of <m>\delta(i,j)</m> changes depending upon whether or not the input arguments <m>i</m> and <m>j</m> satisfy <m>(i,j)\in\set{(x,x):x\in\mathbb{R}}</m>. The control of the flow of a program can also depend upon the value of variables, and the structure which enables this is the <c>if:... elif:... else:...</c> block structure.
        </p>
        <technology xml:id="tech-if_elif_else">
            <title>Conditional statements</title>
            <statement>
                <p>
                    The <c>if:... elif:... else:...</c> structure permits a program to execute different subroutines depending upon the state of various <term>conditional variables.</term> Consider the following example.
                </p>
                <sidebyside>
                    <program language="python">
                        <input>
                            if cond1:
                                # If cond1 evaluate to True, do the following:
                                opt_function1(...)
                            elif cond2:
                                # If cond1 evaluates to False but cond2 evaluates to True, do the
                                # following:
                                opt_function2(...)
                            else:
                                # If none of the conditions in the original if or any subsequent
                                # elif statements evaluates to True, then do the following:
                                else_function(...)
                        </input>
                    </program>
                </sidebyside>
                <p>
                    After an <c>if:... elif:... else:...</c> block executes, the program does not repeat it (because it is a conditional statement, not an iteration) but returns to the same level of indentation as the original <c>if:</c> and continues the execution.
                </p>
            </statement>
        </technology>
        <p>
            We have now put together enough pieces of programming that we can look at some interesting mathematical problems!
        </p>
    </subsection>
    <subsection xml:id="sub-intro-functions-collatz">
        <title>The Collatz Conjecture</title>
        <p>
            This problem was introduced by Lothat Collatz in 1937. Define a mathematical sequence by the following rule: begin with any positive integer <m>n</m>, and set <m>c_0 = n</m>. Subsequent terms in the sequence are determined from the preceding terms according to this rule: <me>c_{n+1} = \begin{cases} 3c_n + 1, \amp c_n\text{ is odd}\\c_n/2, \amp c_n\text{ is even.}\end{cases}</me>
        </p>
        <conjecture>
            <title>The Collatz Conjecture</title>
            <statement>
                No matter the choice of <m>c_0</m>, any such sequence will eventually contain the number 1.
            </statement>
        </conjecture>
        <p>
            This simple statement gives an easy programming exercise but has an interesting conclusion: no one knows whether or not the Collatz Conjecture is true! It is an open problem in combinatorics, which has defied the attempts at proof of some of the greatest mathematicians of the last 100 years.
        </p>
        <listing xml:id="list-collatz">
            <caption>A Python implementation of the Collatz sequence using a <c>for</c> loop.</caption>
            <program language="python">
                <input>
                    def iterative_collatz(n):
                        """An iterative version of the Collatz sequence which
                            runs a maximum of 10000 steps."""
                        output = [ n ]
                        current_value = n
                        for i in range(10000):
                            if current_value % 2 == 0:
                                current_value = current_value // 2
                            else:
                                current_value = 3 * current_value + 1
                            output.append( current_value )
                            if current_value == 1:
                                return( output )
                        return( output )
                </input>
            </program>
        </listing>
        <p>
            Type the previous listing into a file called <c>collatz.py</c> in your directory for Python files, and then open IDLE. At the prompt, run <c>import collatz</c> and then run <c>collatz(39)</c>. What is your result?
        </p>
        <remark>
            <title>Typing vs. copying and pasting code</title>
            <statement>
                One of the best ways to learn programming is to simply learn by experimentation, but a minimal working knowledge of syntax and programming methods is needed before that is possible. Another very good way to learn to program is to manually type in code from another source, seeking to explain and understand it along the way. If you transcribe another person's program into your own, try to put an explanatory comment on every line to see if you understand what the program is doing!
            </statement>
        </remark>
        <p>
            What might seem a better way to write a Collatz-sequence program would be to start building a sequence at the input number <c>n</c> and continue as long as the last element of the sequence is not 1, but there are several serious problems with that approach. First and foremost, if the Collatz conjecture is actually false, there is some input <c>n</c> for which that program would never terminate! Since all current research indicates that the Collatz conjecture is probably true, the other worse problem is that generating a long sequence uses up system memory in the computer, and eventually (for a long enough sequence) you could run out of memory and crash Python! The good news is that running a computer out of memory in this way causes no long-term problems; quitting Python is usually enough to solve the problem and allow the operating system to reallocate that memory.
        </p>
    </subsection>
    <!--
    <xi:include href=".subsec-emp-intro.ptx" />
    <xi:include href=".subsec-emp-next.ptx" />
    <xi:include href=".subsec-emp-conc.ptx" />
    -->
</section>
