<?xml version='1.0' encoding='utf-8'?>

<section xml:id="sec-crypto-proj" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Project: Implementing cryptography in Python</title>
    <shorttitle>Crypto in Python</shorttitle>
    <objectives>
        <introduction>
            <p>
                It is time to develop Python tools for some of our cryptographic methods.
            </p>
        </introduction>
        <ol>
            <li><p>
                Practice some cryptography by hand.
                </p></li>
            <li><p>
                Implement DIANA, a Vigen&#232;re-style encryption formerly used by the NSA.
                </p></li>
            <li><p>
                Extend the <c>AlgoPerm</c> class to be a more full-feature class of permutations.
                </p></li>
        </ol>
    </objectives>


    <subsection xml:id="sub-crypto-proj-manual_decryption">
        <title>Demonstrating understanding</title>
        <p>
            It takes a higher level of understanding to implement a simple algorithm as a code than it does to be able to perform the algorithm. To that end, it is important to practice ideas by hand on paper.
        </p>
        <!-- ############################# -->
        <activity xml:id="proj-crypto-manual">
            <title>Practice makes perfect</title>
            <introduction>
                <p>
                    Now that we have discussed some cryptographic techniques, it is time to show that you have mastered them. Work out this activity on paper.
                </p>
            </introduction>
            <task>
                <p>
                    The message <c>CQNAN JWM KJLT JPJRW</c> is encrypted with a shift cipher. Explain how you could find the amount of shift without using a computer.
                </p>
            </task>
            <task>
                <p>
                    Find the decrypted phrase corresponding to <c>CQNAN JWM KJLT JPJRW</c>, on paper. Henceforth we'll refer to that key phrase as <m>key</m>.
                </p>
            </task>
            <task>
                <p>
                    The permutation with one-line notation <m>a_0~a_1~a_2~\cdots~a_{n-1}</m> can be <term>rotated</term> by <m>k</m> steps to obtain a new permutation with one-line notation <m>a_k~a_{k+1}~a_{k+2}~\cdots~a_{n-1}~a_0~\cdots~a_{k-1}</m>. All shift ciphers on an alphabet can be considered as rotations of one another; what is the simplest permutation of which a shift cipher can be considered a rotation? Explain why.
                </p>
            </task>
            <task>
                <p>
                    Suppose you want to use <m>key</m> as the key phrase for Playfair's cipher. On paper, write the Playfair grid corresponding to <m>key</m>.
                </p>
            </task>
            <task>
                <p>
                    Remembering that the shift directions to decrypt using Playfair's cipher are <em>up and left</em> instead of <em>down and right</em>, use <m>key</m> and Playfair's cipher to decrypt the following message.
                </p>
                <program>
                    <input>
                        GDTESG HFGNER LTPODB HERARF GWHBTE QNDFEV
                    </input>
                </program>
                <p>
                    The spaces in that message <alert>do not correspond to actual spaces</alert>. They merely provide spacing to make the encrypted message easier to process by hand.
                </p>
            </task>
        </activity>
        <p>
            Performing Playfair's cipher by hand is easy enough that a common use was in encrypting time-sensitive information: for instance, mortar fire on a location would commence in 15 minutes and so friendly personnel should vacate the area! By the time the enemy could decipher it, the information was no longer relevant.
        </p>
    </subsection>
    <subsection xml:id="sub-crypto-proj-implementations">
        <title>Implementing cryptography</title>
        <!-- ###################################### -->
        <activity xml:id="proj-crypto-digitizing_viginere">
            <title>DIANA: Vigen&#232;re-style encryption</title>
            <introduction>
                <p>
                    Implementation of the Vigen&#232;re cipher is suprisingly easy; we'll implement a slightly modified version called the DIANA cipher, used by the National Security Agency. The difference between the two is that the tabular rasa of the Vigen&#232;re cipher includes the identity permutation as the first column of the table, where in the DIANA system no letter of the key is represented by an identity permutation. The matrix of the DIANA cipher is as follows, in both alphabetix and arithmetic forms:
                    <md>
                        <mrow>
                            \small
                            \begin{array}{c|cccccccc}
                                \amp A \amp B \amp C \amp D \amp \cdots \amp Y \amp Z \\ \hline
                                     A \amp      Z \amp      Y \amp      X \amp      W \amp \cdots \amp      B \amp      A \\
                                     B \amp      Y \amp      X \amp      W \amp      V \amp \cdots \amp      A \amp      Z \\
                                     C \amp      X \amp      W \amp      V \amp      U \amp \cdots \amp      Z \amp      Y \\
                                     D \amp      W \amp      V \amp      U \amp      T \amp \cdots \amp      Y \amp      X \\
                                \vdots \amp \vdots \amp \vdots \amp \vdots \amp \vdots \amp \ddots \amp \vdots \amp \vdots \\
                                     Y \amp      B \amp      A \amp      Z \amp      Y \amp \cdots \amp      D \amp      C \\
                                     Z \amp      A \amp      Z \amp      Y \amp      X \amp \cdots \amp      C \amp      B
                            \end{array} \amp\qquad
                            \small
                            \begin{array}{c|cccccccc}
                                 ~ \amp  0 \amp  1 \amp  2 \amp  3 \amp \cdots \amp 24 \amp 25 \\ \hline
                                 0 \amp 25 \amp 24 \amp 23 \amp 22 \amp \cdots \amp  1 \amp  0 \\
                                 1 \amp 24 \amp 23 \amp 22 \amp 21 \amp \cdots \amp  0 \amp 25 \\
                                 2 \amp 23 \amp 22 \amp 21 \amp 20 \amp \cdots \amp 25 \amp 24 \\
                                 3 \amp 22 \amp 21 \amp 20 \amp 19 \amp \cdots \amp 24 \amp 23 \\
                                \vdots \amp \vdots \amp \vdots \amp \vdots \amp \vdots \amp \ddots \amp \vdots \amp \vdots \\

                                24 \amp  1 \amp  0 \amp 25 \amp 24 \amp \cdots \amp  3 \amp  2 \\
                                25 \amp  0 \amp 25 \amp 24 \amp 23 \amp \cdots \amp  2 \amp  1
                            \end{array}
                        </mrow>
                    </md>
                </p>
            </introduction>
            <task>
                <p>
                    Use a <term>nested for loop</term> to create a list-of-lists containing the DIANA cipher. You'll need to create a mathematical formula (involving remainders!) for the element of the <m>m</m>th row and <m>k</m>th column of the DIANA matrix, where <m>k,m\in\set{0,\dotsc,25}</m>.
                </p>
                <program language='python'>
                    <input>
                        diana = [ ]
                        for m in range( 26 ):
                            new_row = [ ]
                            for k in range( 26 ):
                                # CHANGE THIS to the correct value involving k and m
                                new_row.append( 0 )
                            diana.append( new_row )
                        print( diana )
                    </input>
                </program>
            </task>
            <task>
                <introduction>
                    <p>
                        Remember that <c>ord('A')</c> is 65, so to find the alphabet index of a capital letter stored as a string <c>x</c> would require using <c>ord(x)-65</c>. If we write <m>[D]_{i,j}</m> to mean the entry in the <m>i</m>th row and <m>j</m>th column of the numerical DIANA matrix given above, then we now have from task (a) a mathematical formula for the value of <m>[D]_{i,j}</m>. Since that value is the encrypted value of a message character with index <c>i</c> using key character <c>j</c>, we can build a DIANA cipher!
                    </p>
                    <p>
                        The first step to applying the DIANA cipher given a cryptographic key <c>key</c> and a message <c>msg</c> is to ensure that both message and key consist only of capital letters, and that the cryptographic key is either already as long as the message or has been extended by repetition to be at least as long as the message. Then the key and message can be converted to lists of integers, which then can be processed through the DIANA cipher. In order to decrypt a message, we must acknowledge that the DIANA cipher is that it is an <term>involution</term>: <m>k=[D]_{i,j}</m> if and only if <m>i=[D]_{k,j}</m>.
                    </p>
                </introduction>
                <task>
                    <p>
                        Write a detailed step-by-step algorithm on paper to explain the DIANA cipher.
                    </p>
                </task>
                <task>
                    <p>
                        Create a function <c>diana(key, msg)</c> which performs the DIANA cipher using an input string <c>key</c> to encrypt and decrypt a message string <c>msg</c>, which works correctly whether <c>msg</c> is plaintext or ciphertext.
                    </p>
                </task>
            </task>
        </activity>
        <p>
            Now we should fill out the rest of our <c>AlgoPerm</c> class so we would have the tools to make a rotating-permutation cipher like Enigma; while fully implementing Enigma is beyond the scope of this project, it will be nice to have the tools to do so if you choose later to continue experimenting.
        </p>
        <activity xml:id="proj-crypto-extending_AlgoPerm">
            <title>Extending the <c>AlgoPerm</c> class</title>
            <task>
                <p>
                    Begin by copying <c>AlgoPerm.py</c> into a new file, called <c>ExtendedAlgoPerm.py</c>. All your changes to the <c>AlgoPerm</c> class will be performed in the <c>ExtendedAlgoPerm.py</c> file.
                </p>
            </task>
            <task>
                <p>
                    The <c>__init__</c> method of your <c>AlgoPerm</c> class must first be extended to allow for the mapping to represent the disjoint cycle decomposition of the permutation of <m>\set{0,1,2,\dotsc,k-1}</m>. Here is a function which takes a tuple of tuples and converts it into an appropriate mapping dictionary.
                </p>
                <program language='python'>
                    <input>
                        def mapping_from_tuples(tuple_of_tuples):
                            bad_cycles = ValueError("Badly formatted tuple for cycle notation.")
                            map_dict = { }
                            for cyc in tuple_of_tuples:
                                if type(cyc) != tuple:
                                    # It might still be bad input.
                                    raise bad_cycles
                                else:
                                    # So now we know it's a tuple of tuples.
                                    for i,x in enumerate(cyc):
                                        # i is the index and x is the element of the cycle
                                        if x in map_dict.keys():
                                            # This is a bad disjoint cycle notation! Not a bijection!
                                            raise bad_cycles
                                        try:
                                            y = cyc[i+1]
                                            # This will work unless we're at the end of the cycle already
                                        except IndexError:
                                            y = cyc[0]
                                        # Now y = f(x), if f is this permutation.
                                        map_dict[x] = y
                            # Once that's done we've walked through the whole support
                            #   of the permutation, and now we have to make sure the
                            #   fixed set is in the domain as well.
                            max_value = max(map_dict.keys())
                            for x in range(1 + max_value):
                                if x in map_dict.keys():
                                    # We've already seen this x, move along.
                                    continue
                                else:
                                    map_dict[x] = x
                            # Now map_dict is the right dictionary to use to build an
                            #   AlgoPerm, so rewrite this code into your own words!
                            return map_dict
                    </input>
                </program>
                <p>
                    In order to fix your <c>__init__</c> file, this function must be rewritten! Do so.
                </p>
            </task>
            <task>
                <p>
                    Add a <c>support</c> method to the class, as follows:
                </p>
                <program language='python'>
                    <input>
                        def support(self):
                            supp = [ ]
                            for x in self.domain():
                                if x==self(x):
                                    continue
                                else:
                                    supp.append( x )
                            return set(supp)
                    </input>
                </program>
            </task>
            <task>
                <introduction>
                    <p>
                        Now that <c>AlgoPerm.__init__</c> has been rewritten to allow input such as <c>AlgoPerm( ((0,),(1,2,3),(4,),(5,6,7)) )</c>, we must include code to display our permutations in disjoint cycle notation as well as returning them as tuples of tuples. We will introduce two new methods: <c>cycle_tuples</c> and <c>cycle_string</c>. Since the code for <c>cycle_tuples</c> involves some looping, we are going to add a neat feature to our class. Specifically, we will make use of a <c>try:... except:...</c> block so that no matter how many times we call the <c>cycle_tuples</c> method, the computation is only performed once.
                    </p>
                </introduction>
                <task>
                    <p>
                        Start the method as below. The lines beginning with <c>####</c> will be changed.
                    </p>
                    <program language='python'>
                        <input>
                            def cycle_tuples(self):
                                '''Return self in disjoint cycle notation as a tuple of tuples. Single-element tuples
                                    will be left off unless self is the identity, in which case this will return
                                    ((x,),), which is the tuple-of-tuples notation for the identity permutation when
                                    x is the minimum element of self.domain()'''
                                try:
                                    # If self has an attribute _cycle_tuples, this will work.
                                    return self._cycle_tuples
                                    # if not, it will raise an AttributeError, which is handled by...
                                except AttributeError:
                                    # Since tuples are immutable, everything must be created as a list.
                                    list_of_cycles = [ ]
                                    # In order to create the cycle decomposition, we need an ordered list
                                    #    of all the domain elements which are not fixed by self, but in
                                    #    a mutable way. The following should work!
                                    symbol_list = sorted(self.support())
                                    #### This is the part you will work out in successive steps.
                                    ####    It will involve some looping so these three comments will
                                    ####    end up being removed and replaced by a nested while loop.
                                    if list_of_cycles == [ ]:
                                        # Inside this block, we see that self is the identity.
                                        self._cycle_tuples = ( ( min(self.domain()), ), )
                                        # To be nice for our next method, let's define the string version as well.
                                        self._cycle_tuples = f"({min(self.domain())})"
                                    else:
                                        # Otherwise we've create a list containing tuples of each interesting
                                        #    cycle in the decomposition of self.
                                        self._cycle_tuples = tuple(list_of_cycles)
                                        # And we have to be a little more careful with the string version here
                                        self._cycle_string = ''
                                        for cyc in list_of_cycles:
                                            self._cycle_string += str(cyc)
                                    # Now we've defined the interesting attribute of self, so return it.
                                    return self._cycle_tuples
                        </input>
                    </program>
                </task>
                <task>
                    <p>
                        The algorithm for producing the disjoint cycle notation appeared in the first section of this chapter, in <xref ref="exmp-disjoint-cycles" />. It consists of a loop which puts elements of the domain into cycles, starting with the minimum element of the support, and proceeding until all of the support elements have either been placed into cycles or discarded; only the elements of the support need to be considered because disjoint cycle notation does not include single-element cycles unless the permutation is the identity!
                    </p>
                    <p>
                        The while loop must repeat as long as <c>symbol_list</c> is non-empty. The first task inside the <c>while</c> loop will be to remove the 0th-indexed element from <c>symbol_list</c>. This is exactly what the <c>list.pop(index)</c> method does: it returns the element in the specified <c>index</c> from the list, and simultaneously removes it from the list. Thus <c>x = symbol_list.pop(0)</c> will always assign the 0th-indexed element of <c>symbol_list</c> to <c>x</c> and shorten <c>symbol_list</c> by removing its 0th-indexed element.
                    </p>
                    <p>
                        Next a new list must be created representing the cycle which is about to be created: <c>new_cycle = [ x ]</c>.
                    </p>
                    <p>
                        In order to create the cycle, we must iterate until the image of the last element appended to <c>new_cycle</c> is equal to the initial element of <c>new_cycle</c>. Since we have defined the <c>__call__</c> method, we can check this as the condition of a while loop by testing to see if <c>self( new_cycle[-1] )</c> differs from <c>new_cycle[0]</c>. So long as these two are unequal, we must assign a new variable <c>y = self( new_cycle[-1] )</c>, then remove <c>y</c> from <c>symbol_list</c> using the <c>list.remove(...)</c> method, and finally append <c>y</c> to the end of <c>new_cycle</c>.
                    </p>
                    <p>
                        Once that loop has completed, we simply check if <c>new_cycle</c> is a single-element list: if so, we skip to the next iteration of the outer while loop using <c>continue</c>. Otherwise, we append <c>tuple( new_cycle )</c> to our <c>list_of_cycles</c>. This completes the nested while loop!
                    </p>
                    <p>
                        Convert that explanation into code and replace the <c>####</c> lines.
                    </p>
                </task>
                <task>
                    <p>
                        Having written the <c>cycle_tuples</c> method in such a way that its execution saves the <c>_cycle_string</c> attribute, we now have an easy way to write the <c>cycle_string</c> method, again using the <c>try:... except AttributeError:...</c> block.
                    </p>
                    <program language='python'>
                        <input>
                            def cycle_string(self):
                                try:
                                    return self._cycle_string
                                except AttributeError:
                                    # If the attribute wasn't defined, we need to run the cycle_tuples method,
                                    #    but we don't need its output so we'll just let it run without saving
                                    #    the returned value.
                                    self.cycle_tuples()
                                    return self._cycle_string
                        </input>
                    </program>
                    <p>
                        An alternative way to perform that same function safely is to use the builtin <c>hasattr(value, attr_name)</c> function; this function takes any object as <c>value</c> and any string as <c>attr_name</c> and returns <c>True</c> if <c>value</c> has an attribute with the same name as the contents of the<c>attr_name</c> string.
                    </p>
                    <p>
                        Implement <c>cycle_string</c> as a method using an <c>if:... else:...</c> block instead of <c>try:... except:...</c>
                    </p>
                </task>
            </task>
            <task>
                <title>Permutation rotations</title>
                <p>
                    The key component of the Enigma machine is in its physical rotation of the permutations. The physical mechanism made this extremely straightforward, and we can use careful slicing to cause the same change. Suppose we defined <c>sigma = AlgoPerm([5,4,3,0,1,2])</c>, which is <m>\sigma=(0,5,2,3)(1,4)</m>. We want to define a method <c>rotate(self, steps)</c> which has the following outputs:
                </p>
                <table xml:id="tab-permutation_rotation">
                    <title>Rotations of the permutation <m>\sigma=(0,5,2,3)(1,4)</m></title>
                    <tabular>
                        <row bottom='minor'>
                            <cell>Input</cell>
                            <cell>Output (in cycle notation)</cell>
                        </row>
                        <row>
                            <cell><c>sigma.rotate(0)</c></cell>
                            <cell><m>(0,5,2,3)(1,4)</m></cell>
                        </row>
                        <row>
                            <cell><c>sigma.rotate(1)</c></cell>
                            <cell><m>(0,4,2)(1,3)</m></cell>
                        </row>
                        <row>
                            <cell><c>sigma.rotate(7)</c></cell>
                            <cell><m>(0,4,2)(1,3)</m></cell>
                        </row>
                        <row>
                            <cell><c>sigma.rotate(-1)</c></cell>
                            <cell><m>(0,2,4)(1,5)</m></cell>
                        </row>
                    </tabular>
                </table>
                <p>
                    Implement the <c>rotate(self, steps)</c> method.
                </p>
            </task>
        </activity>
    </subsection>
  <!--
  <xi:include href=".subsec-emp-intro.ptx" />
  <xi:include href=".subsec-emp-next.ptx" />
  <xi:include href=".subsec-emp-conc.ptx" />
  -->

</section>
