<?xml version='1.0' encoding='utf-8'?>

<section xml:id="sec-crypto-perms" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Permutations as substitution ciphers</title>
    <shorttitle>Substitution ciphers</shorttitle>
    <introduction>
        A <term>substitution cipher</term> is simply a permutation of the letters in an alphabet; more complicated substitution ciphers might map single characters to fixed-size blocks of characters. Recall that an <term>alphabet</term> is a finite set of symbols, and that we will use two special set notations: <m>\scr{E}</m> to denote the set of capital letters of the English alphabet, and <m>[n]=\set{1,2,3,\dotsc,n}</m>.
    </introduction>
    <!-- ################################### -->
    <subsection xml:id="sub-crypto-perms-simple">
        <title>Monoalphabetic substitution</title>
        <p>
            Also called <term>simple substitution</term>, encryption of a message by performing a single permutation is a <term>monoalphabetic substitution.</term> The <term>Caesar cipher</term> is one of the earliest known uses, and was a simple three-character shift of the alphabet. Represented in two-line notation over a ten-element set <c>range(10)</c>, this is
            <me>
                \sigma = \begin{bmatrix}
                    0 \amp 1 \amp 2 \amp 3 \amp 4 \amp 5 \amp 6 \amp 7 \amp 8 \amp 9 \\
                    3 \amp 4 \amp 5 \amp 6 \amp 7 \amp 8 \amp 9 \amp 0 \amp 1 \amp 2
                \end{bmatrix}
            </me>.
            In this case, we could also write <m>\sigma(x) = (x+3)\rem 10</m>, using <m>\rem</m> in the mathematical equivalent of its Python usage.
        </p>
        <remark xml:id="rmk-modular_arithmetic">
            <title>Modular arithmetic and indexing</title>
            <p>
                Similarly to the convention that <m>0\in\Nats</m>, we should consider the canonical <m>n</m>-element set to be <m>[n]=\set{0,1,2,\dotsc,n-1}</m> (which is the set of elements of <c>range(n)</c>) rather than <m>\set{1,2,3,\dotsc,n}</m>. This example shows one of the other reasons for doing so: <term>modular arithmetic</term> works correctly in <m>[n]</m>. In arithmetic under modulus <m>n</m>, all calculations are carried out normally but reported as remainders from integer division by <m>n</m>.
            </p>
            <p>
            Unfortunately this is not the convention of abstract algebra, where <m>\sym{n}</m> denotes the symmetric group of all permutations of <m>\set{1,2,3,\dotsc,n}</m>.
            </p>
        </remark>
        <p>
            Substitution ciphers are a form of <term>shared secret</term> cryptography, where the message originator and message receiver must agree on a secret encryption method prior to transmission and share that secret first. In this case, the mathematical formula of the permutation is the shared secret.
        </p>
        <definition xml:id="def-shift_cipher">
            <title>Shift cipher</title>
            <a>
                The easiest type of encryption is a <term>shift cipher</term> of an alphabet <m>\mathcal{A} = \set{a_0,a_1,a_2,\dotsc,a_{n-1}}</m>, defined by <m>\sigma(a_i) = a_{(i+s)\rem n}</m> for some constant <m>s</m>.
            </a>
        </definition>
        <exercise xml:id="exc-breaking-shift-cipher">
            <title>Breaking a shift cipher</title>
            <statement>
                The message <c>JYZWKTZGYVIJRIVVRJPKFSIVRB</c> is encrypted with a shift cipher on the 26-letter alphabet <m>\mathcal{E}</m>. Decrypt it, and explain what the shared secret is for a shift cipher.
            </statement>
        </exercise>
        <p>
            In general it is not quite so simple to break a substitution cipher on <m>\mathcal{E}</m> as it is to break a shift cipher; specifically, there are only 25 non-identity shift permutations of <m>\mathcal{E}</m>, but <me>\abs{\sym{\mathcal{E}}}= 26! = 403291461126605635584000000 \approx 4\times 10^{26}</me>. If you were to try one million permutations per second and you had to test all <m>26!</m> permutations, it would take 12,788,288,341,153.146 years to test them all. There has to be a better way!
        </p>
    </subsection>
    <!-- ################################### -->
    <subsection xml:id="sub-crypto-perms-freqanalysis">
        <title>Frequency analysis</title>
        <p>
            Thankfully we are not unarmed when it comes to decrypting a monoalphabetic substitution. Even though the pool of possible permutations is vast, we can analyze the frequencies with which each letter is used in normal text to try to determine parts of the mapping. It is quite easy to write a program in Python counting the frequency of occurrence of each letter in a string. For instance, taking the original 1972 etext of the Declaration of Independence from <href a="https://www.gutenberg.org/cache/epub/1/pg1.txt">Project Gutenberg</href> and converting it into all capital letters (which is how it was produced in 1972 since computers didn't have minuscule letters at that early date), we obtain the following results for the 8133 characters in the text:
        </p>
        <listing xml:id="list-declaration">
            <caption>Dictionary of frequencies of each character in the United States of America's Declaration of Independence</caption>
            <program language="python">
                <input>
                    {'\n': 165, 'T': 646, 'H': 352, 'E': 869, ' ': 1212, 'D': 256, 'C': 187, 'L': 229,
                    'A': 482, 'R': 425, 'I': 453, 'O': 519, 'N': 488, 'F': 184, 'P': 139, 'U': 210,
                    'S': 478, 'M': 145, 'W': 97, 'V': 74, ',': 107, 'B': 95, 'Y': 81, 'G': 130, 'Q': 6,
                    "'": 1, 'K': 14, '.': 36, '-': 3, 'J': 16, 'Z': 4, ';': 10, 'X': 9, ':': 10, '&amp;': 1}
                </input>
            </program>
        </listing>
        <p>
            This was produced using the following simlpe program.
        </p>
        <technology xml:id="tech-tallying_program">
            <title>A Python program to count the frequencies of each character in a string</title>
            <listing xml:id="list-tallying_program">
                <caption>The <c>tally</c> program</caption>
                <program language="python">
                    <input>
                        def tally(some_text):
                            tally_dict = { }
                            for c in some_text:
                                try:
                                    tally_dict[c] += 1
                                except KeyError:
                                    tally_dict[c] = 1
                            print(f"String Length: {len(some_text)}")
                            return(tally_dict)
                    </input>
                </program>
            </listing>
        </technology>
        <p>
            Modifying the code slightly allows us to count just the alphabetic characters, and we find the following frequency results, listed from most common to least common.
        </p>
        <table xml:id="table-letter_freq-declaration">
            <title>Letter frequencies in the Declaration of Independence of the United States of America</title>
            <tabular>
                <col /><col right="minor" />
                <col /><col right="minor" />
                <col /><col right="minor" />
                <col /><col />
                <row bottom="major">
                    <cell>#</cell><cell>Letter</cell><cell>Frequency</cell>
                    <cell>#</cell><cell>Letter</cell><cell>Frequency</cell>
                    <cell>#</cell><cell>Letter</cell><cell>Frequency</cell>
                    <cell>#</cell><cell>Letter</cell><cell>Frequency</cell>
                </row>
                <row>
                    <cell>0</cell><cell>E</cell><cell>869</cell>
                    <cell>7</cell><cell>R</cell><cell>425</cell>
                    <cell>14</cell><cell>M</cell><cell>145</cell>
                    <cell>21</cell><cell>J</cell><cell>16</cell>
                </row>
                <row>
                    <cell>1</cell><cell>T</cell><cell>646</cell>
                    <cell>8</cell><cell>H</cell><cell>352</cell>
                    <cell>15</cell><cell>P</cell><cell>139</cell>
                    <cell>22</cell><cell>K</cell><cell>14</cell>
                </row>
                <row>
                    <cell>2</cell><cell>O</cell><cell>519</cell>
                    <cell>9</cell><cell>D</cell><cell>256</cell>
                    <cell>16</cell><cell>G</cell><cell>130</cell>
                    <cell>23</cell><cell>X</cell><cell>9</cell>
                </row>
                <row>
                    <cell>3</cell><cell>N</cell><cell>488</cell>
                    <cell>10</cell><cell>L</cell><cell>229</cell>
                    <cell>17</cell><cell>W</cell><cell>97</cell>
                    <cell>24</cell><cell>Q</cell><cell>6</cell>
                </row>
                <row>
                    <cell>4</cell><cell>A</cell><cell>482</cell>
                    <cell>11</cell><cell>U</cell><cell>210</cell>
                    <cell>18</cell><cell>B</cell><cell>95</cell>
                    <cell>25</cell><cell>Z</cell><cell>4</cell>
                </row>
                <row>
                    <cell>5</cell><cell>S</cell><cell>478</cell>
                    <cell>12</cell><cell>C</cell><cell>187</cell>
                    <cell>19</cell><cell>Y</cell><cell>81</cell>
                    <cell /><cell /><cell />
                </row>
                <row>
                    <cell>6</cell><cell>I</cell><cell>453</cell>
                    <cell>13</cell><cell>F</cell><cell>184</cell>
                    <cell>20</cell><cell>V</cell><cell>74</cell>
                    <cell /><cell /><cell />
                </row>
            </tabular>
        </table>
        <p>
            A general analysis of text shows the most frequently occurring English letters to be <c>ETAOIN SHRDLU</c>, which the above table shows to be correct (up to reordering). Hence if these letters can be correctly matched in the mapping, there are only <m>14!=87178291200</m> remaining permutations. Even this is insurmountable to check by hand, but context can help greatly; looking over a long passage which has been partially decrypted often allows one to make reasonable guesses to other mappings of characters under a simple substitution. Unfortunately, this often requires a lot of guessing and checking, which is unreasonable without other tools from frequency analysis: there are only two one-letter words in English (<c>A</c> and <c>I</c>) relatively few common two-letter words (about 24 of them), and the frequency order for two-letter pairs (digraphs) and three-letter pairs (tri-graphs) can also be studied.
        </p>
        <p>
            Unfortunately, all of that is, all of that is time consuming and requires a lot of guessing and checking. Having simple programs written to effectively tally the different types of frequencies, as well as allowing for simple trial-and-error substitions to be made, makes the cryptanalysis much smoother. Once whole words start to be identified, having a large vocabulary certainly helps fill in the rest, much as when playing Wheel of Fortune!
        </p>
        <example xml:id="exmp-breaking_simple_substitution">
            <title>Breaking a simple substitution by frequency analysis</title>
            <p>
                Consider the following text:
            </p>
            <pre>
                KP GP HMBHZVXKPGRRY IKV HEHPXPJ HGURY XP CTRY G YKTPJ OGP
                BGOH KTV KW VIH JGUUHV XP FIXBI IH RKNJHN XP BGUZHPVHUD
                ZRGBH GPN FGRSHN DRKFRY GD VIKTJI XP IHDXVGVXKP VKFGUND
                SKSTDISXP QUXNJH IH IGN DTBBHDDWTRRY GEKXNHN OHHVXPJ IXD
                RGPNRGNY KP VIH DVGXUBGDH IXD JGUUHV FGD TPNHU VIH UKKW KW
                G IXJI WXEHDVKUXHN IKTDH GPN FGD OKUH RXSH G BTZQKGUN VIGP
                G UKKO VIH RGPNRGNY FIK ZUKEXNHN IXO FXVI JGUUHV NXPPHUD
                GPN GVVHPNGPBH RXEHN KP VIH WRKKU QHRKF GPN HEHUY VXOH IH
                FHPV KTV IH FGD KQRXJHN VK ZGDD IHU SXVBIHP VIH NKKU KW
                FIXBI XPEGUXGQRY DVKKN KZHP GPN HGBI VXOH IH ZGDDHN VIH
                YKTPJ OGP IGN G DXBS WUXJIVHPHN WHHRXPJ FIXBI OGNH IXO
                DBKFR GPN WHHR GDIGOHN IH FGD IKZHRHDDRY XP NHQV VK IXD
                RGPNRGNY GPN FGD GWUGXN KW OHHVXPJ IHU VIXD FGD PKV QHBGTDH
                IH FGD BKFGUNRY GPN GQCHBV ATXVH VIH BKPVUGUY QTV WKU DKOH
                VXOH ZGDV IH IGN QHHP XP GP KEHUDVUGXPHN XUUXVGQRH BKPNXVXKP
                EHUJXPJ KP IYZKBIKPNUXG IH IGN QHBKOH DK BKOZRHVHRY GQDKUQHN
                XP IXODHRW GPN XDKRGVHN WUKO IXD WHRRKFD VIGV IH NUHGNHN
                OHHVXPJ PKV KPRY IXD RGPNRGNY QTV GPYKPH GV GRR IH FGD
                BUTDIHN QY ZKEHUVY QTV VIH GPMXHVXHD KW IXD ZKDXVXKP IGN KW
                RGVH BHGDHN VK FHXJI TZKP IXO IH IGN JXEHP TZ GVVHPNXPJ VK
                OGVVHUD KW ZUGBVXBGR XOZKUVGPBH IH IGN RKDV GRR NHDXUH VK NK
                DK PKVIXPJ VIGV GPY RGPNRGNY BKTRN NK IGN G UHGR VHUUKU WKU
                IXO QTV VK QH DVKZZHN KP VIH DVGXUD VK QH WKUBHN VK RXDVHP
                VK IHU VUXEXGR XUUHRHEGPV JKDDXZ VK ZHDVHUXPJ NHOGPND WKU
                ZGYOHPV VIUHGVD GPN BKOZRGXPVD GPN VK UGBS IXD QUGXPD WKU
                HMBTDHD VK ZUHEGUXBGVH VK RXH  PK UGVIHU VIGP VIGV IH FKTRN
                BUHHZ NKFP VIH DVGXUD RXSH G BGV GPN DRXZ KTV TPDHHP
            </pre>
            <p>
                Applying frequency analysis to this text, we see the following:
            </p>
            <sidebyside>
                <program language="python">
                    <input>
                        [(148, 'H'), (121, 'G'), (105, 'V'), (102, 'K'), (90, 'P'),
                        (87, 'X'), (82, 'I'), (76, 'N'), (74, 'D'), (70, 'U'),
                        (58, 'R'), (37, 'B'), (27, 'Z'), (27, 'O'), (26, 'T'),
                        (25, 'Y'), (24, 'J'), (24, 'F'), (23, 'W'), (21, 'Q'),
                        (14, 'E'), (9, 'S'), (3, 'M'), (2, 'C'), (1, 'A')]
                    </input>
                </program>
            </sidebyside>
            <p>
                A first guess we can make from this analysis is that the letter <c>H</c> in the ciphertext is probably an <c>E</c> in the original passage. However, the passage is actually too short to get much more than that from the frequencies of single letters, so instead we use additional clues. The frequencies of three-letter words (not trigraphs, but whole words) are as follows:
            </p>
            <sidebyside>
                <program language="python">
                    <input>
                        [(12, 'GPN'), (11, 'VIH'), (8, 'IGN'), (8, 'FGD'), (7, 'IXD'),
                        (4, 'WKU'), (4, 'QTV'), (4, 'IXO'), (3, 'KTV'), (3, 'IHU'),
                        (2, 'PKV'), (2, 'OGP'), (2, 'GRR'), (1, 'RXH'), (1, 'IKV'),
                        (1, 'GPY'), (1, 'FIK'), (1, 'BGV')]
                    </input>
                </program>
            </sidebyside>
            <p>
                Since we see <c>GPN</c> and <c>VIH</c> at the front of that list, and we already suspect that <c>H</c> has replaced <c>E</c>, we now have a strong argument that <c>GPN</c> is actually <c>AND</c> and <c>VIH</c> is actually <c>THE</c>.
            </p>
        </example>
    </subsection>
    <!--
  <xi:include href=".subsec-emp-intro.ptx" />
  <xi:include href=".subsec-emp-next.ptx" />
  <xi:include href=".subsec-emp-conc.ptx" />
  -->

</section>
