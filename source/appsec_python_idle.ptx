<?xml version='1.0' encoding='utf-8'?>

<section xml:id="sec-intro-idle" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Getting started with Python</title>
    <introduction>
        <p>
            We began with a neat practical algorithm. Unfortunately, even with a very good understanding of the problem and its solution a beginner is not ready to turn the complete algorithm into a working computer code, or <term>program</term>.
        </p>
    </introduction>

    <subsection xml:id="sub-intro-idle-gettingidle">
        <title>Getting IDLE</title>
        <p>
          There are many, many different ways to get started as a Python programmer, but the first thing you need is to download Python itself. Download the latest version (3.10 as of this writing) from <url href="http://python.org"/>. Once you have Python, the next tool you should have is an IDE (integrated development environment). The default Python IDE which comes bundled with Python is called IDLE.
        </p>
        <remark xml:id="rem-other-ides">
            <title>Other IDEs</title>
            <p>
                You do not have to use IDLE. Any text editor will work to edit your files (such as Notepad) and once you have the Python interpreter installed, you can run Python scripts. That being said, it's often easiest to write code inside an IDE so that you can use some sort of debugging.
            </p>
            <ul>
                <li><p>
                    <url href="https://code.visualstudio.com/">Visual Studio Code</url>, by Microsoft, with the <url href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</url> installed. Code is an extremely full-featured IDE, but is a fairly big program. This is the current IDE of choice of the author of this textbook since it can flexibly work in the <LaTeX /> typesetting language for mathematics as well, if the right extensions are enabled.
                    </p></li>
                <li><p>
                    <url href="https://atom.io/">Atom</url>, by Github, with the <url href="https://atom.io/packages/script">script package</url> installed. Atom is a very hackable text editor which can be treated as an IDE by adding enough packages.
                    </p></li>
                <li><p>
                    <url href="https://thonny.org/">Thonny</url>, originally by the University of Tartu and now maintained by the global community of users. Thonny actually comes bundled with its own installation of Python and so doesn't require you to download from <url href="http://python.org"/> at all.
                    </p>
                    <p>
                        Thonny is actually designed for absolute beginners and is so user-friendly that it is pre-installed in the Raspbian operating system for RaspberryPi microcomputers, often used to teach programming to children. That being said it is still a functional Python IDE.
                    </p></li>
                <li><p>
                    A final alternative, and a strong one, is to sign up for an account at <url href="http://cocalc.com" /> and use CoCalc as your development environment. The major caveat here is that you must be online to access your files. This textbook was rewritten on CoCalc!
                    </p></li>
            </ul>
        </remark>
        <p>
            All that being said, the basic assumption of this text is that you are working in IDLE.
        </p>
    </subsection>
    <subsection xml:id="sub-intro-idle-interactivemode">
        <title>Interactive Mode</title>
        <p>
            When you first run IDLE, you're greeted with a box that looks like this:
            <listing>
                <caption>Starting IDLE</caption>
                <console>
                    <output>Python 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.</output>
                    <prompt>&gt;&gt;&gt; </prompt>
                    <input> </input>
                </console>
            </listing>
        </p>
        <p>
            Different versions of IDLE may have some sort of dividing line where the prompt <q>&gt;&gt;&gt;</q> is separated from the input, and the color scheme of the IDLE window can be configured by the user, so the window might look different depending upon who is using it.
        </p>
        <p>
            When you type commands at the prompt and press enter (or return), they are executed.
        </p>
        <listing>
            <caption>The Python prompt for Interactive Mode</caption>
            <console>
                <prompt>&gt;&gt;&gt; </prompt>
                <input>2 + (3 / 5 ** 4)</input>
                <output>2.0048</output>
            </console>
        </listing>
        <p>
            Interactive mode is of limited use, but is very good for doing quick calculations or checking to see if your syntax is correct.
        </p>
        <definition xml:id="def-intro-syntax">
            <title>Syntax</title>
            <statement>
                The <term>syntax</term> of a programming language is the set of rules which decide what combinations of symbols are meaningful in the language.
            </statement>
        </definition>
        <p>
            Python was designed to be as easy to write and read as possible, and to be very easy to go from an algorithm to a working program. Anything more complicated than a single line will be written in a <term>module</term>, which is a sequence of Python commands saved in a text file (usually with file extension <c>.py</c>). Python modules can be opened, edited, and executed all within IDLE.
        </p>
        <technology xml:id="tech-quitting-python">
            <title>Quitting Python</title>
            <statement>
                If you're using Python via IDLE, just close all of your IDLE windows to quit the program. If not, you can use
                <sidebyside>
                    <console>
                        <prompt>>>> </prompt>
                        <input>quit()</input>
                        <output />
                    </console>
                </sidebyside>
            </statement>
        </technology>
    </subsection>
    <subsection xml:id="sub-intro-idle-firstprogram">
        <title>A first Python module</title>
        <p>
            From within IDLE, do the following:
        </p>
        <ol>
            <li><p>
                Open a new file, either from the File menu or pressing <c>Ctrl-N</c>.
                </p></li>
            <li><p>
                Type <c>print("Hello, world!")</c> in the blank file.
                </p></li>
            <li><p>
                Save it somewhere memorable (like a Python folder on your desktop) as <c>hello_world.py</c>
                </p></li>
            <li><p>From the Run menu, select Run Module, or press <c>F5</c> on your keyboard.
                </p></li>
        </ol>
        <p>
            After a second, you should see some output in the IDLE Shell window, like so:
        </p>
        <listing>
            <caption>The output of running the <q>Hello, World!</q> module.</caption>
            <console>
                <output>= RESTART: C:/Users/sgraves/OneDrive - The University of Texas at Tyler/Python/hello_world.py
Hello, world!
                </output>
                <prompt>&gt;&gt;&gt; </prompt>
                <input />
            </console>
        </listing>
        <p>
            Congratulations! You can no longer say you have never written a computer program.
        </p>
        <p>
            We will frequently be writing modules and listing code examples in the text, so they will appear like so:
        </p>
        <listing xml:id="list-hello_world">
            <caption>The <q>Hello, world!</q> program</caption>
            <program language="python">
                <input>print("Hello, world!")</input>
            </program>
        </listing>
        <p>
            All of your actual work in Python should be done in modules, which are also called <em>scripts</em>. It is convenient to have one folder where you keep all of your Python code, and even more convenient to name your Python modules sensibly so that they can be reused if ever you have the need.
        </p>
    </subsection>
</section>
