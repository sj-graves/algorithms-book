<section>
<title>Strings</title>


<introduction>
<p>
Mathematically, a <em>string</em> is a finite sequence of symbols from an <em>alphabet</em>, which is really just the set of allowable symbols. Python behaves similarly: if you can type something, it's an allowable symbol. Strings in Python are differentiated from variable names and commands by being enclosed in single or double quotes. The only difference between single and double quotes for Python has to do with quotes within strings.
</p>

<p>
The operation of attaching one string to the end of another string is called <em>concatenation</em>, and is carried out in Python using the <c>+</c> operator. Integer multiplication of strings produces multiple copies of the string.
</p>

<p>
<c>>>> spam = 'There, he moved!'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>>>> eggs = "No he didn't, that was you hitting the cage!"</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>>>> 3 * spam</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'There, he moved!There, he moved!There, he moved!'</c>
</p>

<p>
<c>>>> spam + eggs</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>"There, he moved!No he didn't, that was you hitting the cage!"</c>
</p>

<p>
Observe that you must be careful when entering strings: improper use of quotation marks will cause syntax errors.
</p>

<p>
<c>>>> eggs = 'No he didn't, that was you hitting the cage!'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>SyntaxError: invalid syntax</c>
</p>

<p>
Another way to avoid this is to <em>escape</em> the special character:
</p>

<p>
<c>>>> eggs = 'No he didn\'t, that was you hitting the cage!'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>>>> eggs</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>"No he didn't, that was you hitting the cage!"</c>
</p>

<p>
There are several other special ``escape characters," including <c>\n</c> (new line) and <c>\t</c> (tab) which will not display when a string is returned, but only when it is <c>print</c>ed.
</p>

<p>
{
<c>>>> eggs = 'No he didn\'t, that was you hitting the cage!\n\tI never!'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>>>> eggs</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>"No he didn't, that was you hitting the cage!\n\tI never!"</c>
</p>

<p>
<c>>>> print(eggs)</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>No he didn't, that was you hitting the cage!</c>
</p>

<p>
<c>    I never!</c>
}
</p>

<p>
The <c>print(...)</c> <em>function</em> prints a formatted string version of whatever <em>argument(s)</em> it is given; if it is given more than one argument, it separates them with a space:
</p>

<p>
<c>>>> print(3, 5, spam)</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>3 5 There, he moved!</c>
</p>

<p>
The behavior of <c>print</c> can be further controlled: if given the parameter <c>sep='xx'</c> successive arguments would be separated by <c>xx</c> rather than a space; if given the parameter <c>end=' '</c> the string is terminated with a single space rather than a new line.
</p>

<p>
Since strings are actually sequences of printable characters, we should be able to access elements of the sequence individually; in other languages, these pieces are called <em>characters</em>, but Python has no separate character class. They are simply strings of size 1. An extremely important thing to remember about Python is that all sequence-type objects have first index <m>0</m>. If you wanted to represent the sequence of positive integers less than or equal to 100, <m>a=(1,2,3,4,\ldots, 100)</m>, the elements of the tuple would be <m>a_0=1</m>, <m>a_1=2</m>, <m>a_2=3</m>, and so on, up to <m>a_{99}=100</m>.
</p>

<p>
Rather than subscripts, indices in Python are given in square brackets. Trying to index a position outside a string will result in an error.
</p>

<p>
<c>>>> spam = 'this is a string'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>>>> spam[0]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'t'</c>
</p>

<p>
<c>>>> spam[5]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'i'</c>
</p>

<p>
<c>>>> spam[-1]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'g'</c>
</p>

<p>
<c>>>> spam[42]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>Traceback (most recent call last):</c>
</p>

<p>
<c>  File "&lt;pyshell#36>", line 1, in &lt;module></c>
</p>

<p>
<c>    spam[42]</c>
</p>

<p>
<c>IndexError: string index out of range</c>
</p>
</introduction>


<subsection>
<title>Slicing</title>
<p>
You can access a substring by <em>slicing</em> the string, but you have to be careful how slicing works. The best way to imagine it (as explained in the Python tutorial) is to think of the indices actually marking the dividers between letters in a string:
</p>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=.75]
\draw 
	(0,0) node [below] {-16} -- (16,0) 
	(16,1) node [above] {16} -- (0,1) node [above] {0};
\foreach \x in {0,1,...,16}{\draw (\x,0) -- (\x,1);}
\path
	(0.5,.5) node {<c>t</c>}
	(1.5,.5) node {<c>h</c>}
	(2.5,.5) node {<c>i</c>}
	(3.5,.5) node {<c>s</c>}
	(5.5,.5) node {<c>i</c>}
	(6.5,.5) node {<c>s</c>}
	(8.5,.5) node {<c>a</c>}
	(10.5,.5) node {<c>s</c>}
	(11.5,.5) node {<c>t</c>}
	(12.5,.5) node {<c>r</c>}
	(13.5,.5) node {<c>i</c>}
	(14.5,.5) node {<c>n</c>}
	(15.5,.5) node {<c>g</c>}
	(8,1.7) node [above] {From Front}
	(8,-.7) node [below] {From Back};
\foreach \x in {1,2,...,15}{
	\node [above] at (\x,1) {\x};
	\node [below] at (16-\x,0) {-\x};
}\end{tikzpicture}]]></latex-image-code>
</image>
<p>
So if this is the string <c>spam</c>, then we can see that <c>spam[0]</c> gave us the single-letter string starting at index 0, and <c>spam[-1]</c> gave us the single-letter string starting at index <m>-1</m> from the back. If we want to isolate the word <c>this</c> we can do it two ways. Since the word <c>string</c> appears at the end of <c>spam</c>, there are several ways to easily access it:
</p>

<p>
<c>>>> spam[0:4]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'this'</c>
</p>

<p>
<c>>>> spam[:4]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'this'</c>
</p>

<p>
<c>>>> spam[10:16]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'string'</c>
</p>

<p>
<c>>>> spam[10:]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'string'</c>
</p>

<p>
<c>>>> spam[-6:]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'string'</c>
</p>

<p>
Negative and positive indices can be mixed and matched, and mixing is handled smartly. Also, Python will accept a slice beyond the length of a string.
</p>

<p>
<c>>>> spam[-11:9]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'is a'</c>
</p>

<p>
<c>>>> spam[8:-11]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>''</c>
</p>

<p>
<c>>>> spam[8:42]</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>'a string'</c>
</p>

<p>
You can always find the length of your string using the <c>len(...)</c> command:
</p>

<p>
<c>>>> len(spam)</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>16</c>
</p>
</subsection>


<subsection>
<title>Strings are <em>immutable</em></title>
<p>
An important thing to note about strings is that you may read individual positions but you may not overwrite them.
</p>

<p>
<c>>>> spam[5]='1'</c><nbsp />\fbox{$\dlsh$}
</p>

<p>
<c>Traceback (most recent call last):</c>
</p>

<p>
<c>  File "&lt;pyshell#41>", line 1, in &lt;module></c>
</p>

<p>
<c>    spam[5]='1'</c>
</p>

<p>
<c>TypeError: 'str' object does not support item assignment</c>
</p>

<p>
In the next lesson we will talk about other <em>compound</em> objects which are <em>mutable</em>, where you can change elements of the container one at a time.
</p>
</subsection>

</section>
