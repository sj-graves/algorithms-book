<section>
<title>Representing graphs computationally</title>


<introduction>
<p>
There are many problems in discrete modeling which are best solved using graph theory, so it is important to be able to represent graphs as some sort of data structure. In fact, there is an abstract data structure called a graph! This data structure is often of limited use when trying to solve mathematical problems on graphs, so we will focus instead on other methods of implementing graphs.
</p>

<p>
We will begin with a representation that is easily understandable and build towards representations that provide more theoretical power.
</p>
</introduction>


<subsection>
<title>Edge lists</title>
<p>
The simplest way to represent a graph is to provide a list of the vertices and the edges; while the edges can be stored either as lists or tuples, we will prefer tuples so they are immutable. We'll consider again the Petersen graph, this time with vertices labeled from <m>0</m> through <m>9</m>.
</p>
<figure>
<caption>The Petersen graph with vertices <m>V=\set{v_0,v_1,\ldots,v_9}</m>.</caption>
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}\draw \foreach \x/\c/\d in {90/0/5, 162/1/6, 234/2/7, 306/3/8, 18/4/9}{
    (\x:2) node [circle, fill=black, inner sep=2pt] (\c) 
    (\x:2.5) node {\c}
    (\x:1) node [circle, fill=black, inner sep=2pt] (\d) 
    (\x+20:1) node {\d}
};
\graph{
(0) -- {(1) -- {(2) -- {(7)--(9), (3)--(8)}, (6)--{(8), (9)}}, (4) -- {(3), (9)}, (5) -- {(7), (8)}}
};\end{tikzpicture}]]></latex-image-code>
</image>

</figure>
<p>
In Python, the list of edges can be given using the integer indices of vertices as the ``name" of the vertex. So the vertex list and list of edges as tuples are as given below:
</p>

<p>
\begingroup
</p>
<pre>
V = list(range(10))
E = [(0, 1), (0, 4), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), 
     (4, 9), (5, 7), (5, 8), (6, 8), (6, 9), (7, 9)]
</pre>
<p>
\endgroup
</p>

<p>
We notice that each edge is listed only once, in one direction <mdash /> algorithms must take this into account! Even though <m>v_0v_1</m> is the same edge as <m>v_1v_0</m>, there are often times when we will want to use the edge in the latter order rather than the former. This makes an edge list slightly less useful than some of the other representations when we move into implementing algorithms.
</p>

<p>
Equivalent to an edge list is an edge dictionary: the dictionary representation of this edge list is
</p>

<p>
\begingroup
</p>
<pre>
d = {0: [1, 4, 5], 1: [2, 6], 2: [3, 7], 3: [4, 8], 4: [9], 5: [7, 8], 6: [8, 9],
     7: [9]}
</pre>
<p>
\endgroup
This suffers from exactly the same limitation as the edge list. A simple solution is to use a ``double-ended" dictionary:
</p>

<p>
\begingroup
</p>
<pre>
ded = {0: [1, 4, 5], 1: [0, 2, 6], 2: [1, 3, 7], 3: [2, 4, 8], 4: [0, 3, 9],
       5: [0, 7, 8], 6: [1, 8, 9], 7: [2, 5, 9], 8: [3, 5, 6], 9: [4, 6, 7]}
</pre>
<p>
\endgroup
While this stores every edge twice, it allows us to access each edge from either endpoint.
</p>
</subsection>


<subsection>
<title>Adjacency matrices</title>
<p>
From the idea of a double-ended edge dictionary it is a small step to build the adjacency matrix of a graph.
</p>
<definition>
<statement>
<p>
Suppose <m>\Gamma=(V,E)</m> is a graph with vertices <m>V=\set{v_0,v_1,\ldots, v_{n-1}}</m>. Then the <term>adjacency matrix</term> of <m>\Gamma</m> is the <m>n\times n</m> matrix <m>A=[a_{i,j}]</m> with
<me>
  a_{i,j} = \begin{cases}1 \amp  v_iv_j\in E \\ 0 \amp  v_iv_j\notin E
\end{cases} .
</me>
</p>
</statement>
</definition>
<p>
The adjacency matrix of the Petersen graph as above is
{
<me>
  A = \begin{bmatrix}0 \amp  1 \amp  0 \amp  0 \amp  1 \amp  1 \amp  0 \amp  0 \amp  0 \amp  0 \\
1 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \\
0 \amp  1 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  1 \amp  0 \amp  0 \\
0 \amp  0 \amp  1 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  1 \amp  0 \\
1 \amp  0 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  0 \amp  0 \amp  1 \\
1 \amp  0 \amp  0 \amp  0 \amp  0 \amp  0 \amp  0 \amp  1 \amp  1 \amp  0 \\
0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  0 \amp  0 \amp  0 \amp  1 \amp  1 \\
0 \amp  0 \amp  1 \amp  0 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \amp  1 \\
0 \amp  0 \amp  0 \amp  1 \amp  0 \amp  1 \amp  1 \amp  0 \amp  0 \amp  0 \\
0 \amp  0 \amp  0 \amp  0 \amp  1 \amp  0 \amp  1 \amp  1 \amp  0 \amp  0
\end{bmatrix}
</me>
</p>

<p>
.}
If we have the double-ended dictionary stored as <c>ded</c> and the vertex list as <c>V</c>, we can create this adjacency matrix easily using a list comprehension:
</p>

<p>
\begingroup
</p>
<pre>
A = [[1 if v in ded[u] else 0 for v in V] for u in V]
</pre>
<p>
\endgroup
</p>
</subsection>

</section>
