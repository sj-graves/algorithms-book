<section>
<title>Functions in programming</title>


<introduction>
<p>
A mathematical function is a well-defined relation between two sets, if you've taken Foundations or other proof-based courses. A function in computer programming is as well, although it may not often seem like it.
</p>

<p>
In programming, functions are necessary when you need to repeatedly perform the same algorithm, perhaps on a variety of inputs. Input values to a function are called its <em>arguments</em>, and we will use the terminology of <em>passing arguments to a function</em>. Every Python function also has an output value, although sometimes its output is <c>None</c>.
</p>
</introduction>


<subsection>
<title><c>lambda</c> expressions</title>
<p>
The simplest type of function in Python is called a <c>lambda</c> expression. Let's say we want to define a function <m>f</m> which takes two arguments, <m>n</m> and <m>x</m>, and returns <m>nx</m>. Mathematically, this is simple: let <m>f(n,x)=nx</m>. When we need to define such a simple function for our own use in a Python program, we can define <m>f</m> in almost the same way.
</p>
<pre>
>>> f = lambda n,x: n*x
>>> f(4,12)
48
>>> f(4,'12')
'12121212'
>>> f([4],'12')
Traceback (most recent call last):
  File "&lt;pyshell#92>", line 1, in &lt;module>
    f([4],'12')
  File "&lt;pyshell#89>", line 1, in &lt;lambda>
    f = lambda n,x: n*x
TypeError: can't multiply sequence by non-int of type 'str'
</pre>
<p>
There is a limitation: <c>lambda</c> expressions are not block structures, and if there is more than one expression following the <c>lambda ... :</c> a syntax error will occur. In fact, trying to enter an indented block by pressing enter after the colon raises a syntax error!
</p>
<pre>
>>> g = lambda x:
	
SyntaxError: invalid syntax
</pre>
<p>
The variable names which occur after the keyword <c>lambda</c> and before the colon are the tuple of arguments to the function; the expression after the colon is what is evaluated based upon those arguments, and whatever is evaluated is returned as the function's output.
</p>
</subsection>


<subsection>
<title><c>def</c>ining functions</title>
<p>
The long-form way to define a function, and the way that methods of classes will be defined later in the lesson, is using the <c>def</c> command. The syntax is no more complicated than anything else we've worked with so far. Save the following as <c>les4_ex1.py</c> and run it in IDLE.
</p>
<pre>
def fib(n):
    '''A mysterious function appears!

    The argument n must be a positive integer.
'''
    if (type(n)!=type(1)) or (type(n)==type(1) and n&lt;0):
        raise TypeError('function fib expects positive integer')
    seq = [1,1]
    while len(seq)&lt;n:
        seq.append(seq[-1]+seq[-2])
    return seq[-1]
</pre>
<p>
You'll notice that when you run this through IDLE, nothing appears to happen! However, something important has occurred: try typing <c>help(fib)</c> at the prompt.
</p>
<pre>
>>> help(fib)
Help on function fib in module __main__:

fib(n)
    A mysterious function appears!
    
    The argument n must be a positive integer.
</pre>
<p>
So we see that now there is a function called <c>fib</c>, and if we pass a positive integer to it, something should happen.
</p>

<p>
Let's look at the code you've saved as <c>les4_ex1.py</c> once again. The first expression is <c>def fib(n):</c>, which tells Python to define a function named <c>fib</c> in the current context and let it have one argument, <c>n</c>, which can be used inside the function. Moving into the <c>def</c> block, the first expression we encounter is a multiline string! This is very good programming practice in Python, and it's called the <em>documentation string</em>, or <em>docstring</em> for short. It is good programming style<fn>Yes, there are such things as good programming style and bad programming style. You can consider it two ways. The first way is that writing code in a nice, consistent style makes it easier for you to later relearn what you've done. The second is that I will have to read code that you write, and if it is horribly difficult to decipher because you haven't been nice to me, I will have a harder time being nice to you! The ``manual" of good style for Python is generally accepted to be what is documented in Python Enhancement Proposal 8 (PEP 8). This can be found at <url href="https://www.python.org/dev/peps/pep-0008/"><c>https://www.python.org/dev/peps/pep-0008/</c></url>. A very brief overview of that style guide is found at <url href="https://docs.python.org/3/tutorial/controlflow.html#intermezzo-coding-style"><c>https://docs.python.org/3/tutorial/controlflow.html<hash />intermezzo-coding-style</c></url>.</fn> to include a docstring, since it enables the <c>help</c> function to tell something about the defined function. I won't go into the formatting of the docstring here: see the Python Tutorial.
</p>

<p>
Moving into the actual code of our function, we see that the very first thing it does is checks the type and the value of the argument, and if the type is wrong or the integer is negative, a <c>TypeError</c> is raised. You can think of this as ``bulletproofing" our function: if you're writing code for other people to use, you must be very certain that they cannot through malice or ignorance pass an argument to your function which will fundamentally break stuff<fn>This is a technical term.</fn>. Type and value checking the input to a function is a good way to do this. If you are writing code just for yourself and know that nothing seriously bad will happen if you accidentally pass a float or a string instead of an integer, you will often skip this step.
</p>

<p>
The next line instantiates a list, <c>seq</c>, and the following <c>while</c> loop makes use of the <c>append</c> method of the <c>list</c> class to lengthen the list to the length passed as argument <c>n</c>. Once <c>len(seq) >= n</c>, the loop exits and the last entry of <c>seq</c> is <c>return</c>ed.
</p>

<p>
Generally speaking, this structure is what every function will follow! You'll pass in some arguments, maybe do some type checking, and then run an algorithm on the arguments. When you complete the algorithm, you return something. One special note is that even functions which contain no <c>return</c> statement return a value <mdash /> it is the special value <c>None</c> of data type <c>NoneType</c>. If you try to execute the expression <c>None</c>, nothing happens.
</p>
<pre>
>>> None
>>>
</pre>
<p>
You've already used a function which returns <c>None</c>: the <c>print</c> function.
</p>
<pre>
>>> print(print(5))
5
None
>>>
</pre>
</subsection>

</section>
