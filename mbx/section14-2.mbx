<section>
<title>Kruskal's algorithm</title>
<p>
Joseph Kruskal first published his solution to the minimum spanning tree problem in 1956; again, this is a wonderful, almost intuitive algorithm, which hinges on an awesome use of mathematical induction. The caveat is that the weight function for Kruskal's algorithm must be a non-negative function, <m>w:E\to \set{x\geq 0:x\in \mathbb{R}}</m>.
</p>

<theorem>
<statement>
<p>
If <m>\Gamma=(V,E)</m> is a forest and <m>uv\in E</m> is an edge where <m>u</m> and <m>v</m> are not in the same component of <m>\Gamma</m>, then <m>\Gamma'=(V,E\cup\set{uv})</m> is a forest.
</p>
</statement>
</theorem>

<proof>
<p>
Suppose <m>\Gamma=(V,\set{~})</m> is a totally disconnected graph, and let <m>u_0,u_1\in V</m>. Then <m>u_0</m> and <m>u_1</m> are (naturally) in separate components. The graph <m>\Gamma'=(V,\set{u_0,u_1})</m> contains no cycles, since a graph with only one edge cannot contain a cycle.
</p>

<p>
Suppose <m>\Gamma=(V,E)</m> is a forest and <m>u_0,u_1\in V</m> are vertices in different components of <m>\Gamma</m>. Assume, towards a contradiction, that <m>\Gamma=(V,E\cup\set{u_0u_1})</m> contains a cycle. Then there is a cycle <m>C=(v_0,e_1,v_1,e_2,v_2,\ldots,v_{n-1},e_n,v_n=v_0)</m> where <m>v_i\in V</m> and <m>v_i\neq v_j</m> when <m>i\neq j</m> and <m>\set{i,j}\neq\set{0,n}</m>. If <m>u_0u_1\neq e_j</m> for any <m>j\in\set{1,2,\ldots,n}</m>, then we have contradicted the assumption that <m>\Gamma</m> was a forest. On the other hand, if <m>u_0u_1\in \set{e_1,e_2,\ldots,e_n}</m>, then we may relabel the cycle <m>C=(v_0=u_0, e_1, v_1, e_2, v_2, \ldots, v_{n-1}=u_1, e_n=u_0u_1, v_n=u_0=v_0)</m>. But then <m>(v_0=u_0, e_1, v_1, e_2, v_2, \ldots, v_{n-1}=u_1)</m> is a <m>u_0,u_1</m>-path, contradicting the assumption that <m>u_0</m> and <m>u_1</m> are in different components of <m>\Gamma</m>. In either case, we have a contradiction.
</p>
</proof>

<p>
Hence we have an immediate method of producing a spanning forest <mdash /> include any edge which does not connect components. More importantly, we have all that is necessary for Kruskal's algorithm: if the graph is weighted, the edge of minimal weight which does not introduce a cycle is added in every iteration.
</p>
<algorithm>
<title>Kruskal's Spanning Tree algorithm</title>
<p>
Let <m>{\Gamma=(V,E,w)}</m> be a weighted graph where <m>V=\set{v_1,v_2,\ldots,v_n}</m> and <m>E=\set{e_1,e_2,\ldots, e_m}</m> such that <m>w(e_i)\leq w(e_j)</m> whenever <m>i\lt j</m>.
</p>

<ol>
<li><p>Suppose <m>C_1 = \set{v_1}</m>, <m>C_2=\set{v_2}</m>, <ellipsis />, <m>C_n=\set{V_n}</m>, and <m>E_0= \set{~}</m></p></li>
<li><p>For each <m>j=1,2,\ldots,m</m>, let <m>uv=e_j</m>. Do the following:
</p>

<ol>
<li><p>If <m>u\in C_k</m> and <m>v\in C_\ell</m> and <m>C_k\neq C_\ell</m> where <m>k\lt \ell</m>, then let <m>C_k = C_k\cup C_\ell</m> and let <m>E_{j} = E_{j-1}\cup\set{e_j}</m>. Otherwise, let <m>E_{j} = E_{j-1}</m>.</p></li>
</ol>
</li>
<li><p><m>\Gamma' = (V,E_m)</m> is a minimum spanning tree for <m>\Gamma</m>.</p></li>
</ol>
</algorithm>

<example>
<statement>
<p>
Consider the list of <m>(w, u, v)</m> triples below, where <m>w</m> is the weight assigned to the edge <m>uv</m>:
</p>

<p>
\begingroup
</p>
<pre>
(4, 'a', 'b')    (14, 'a', 'f')   (18, 'a', 'h')   (7, 'a', 'i')
  (5, 'a', 'j')    (1, 'a', 'l')    (4, 'a', 'o')    (5, 'b', 'i')
  (8, 'b', 'k')    (10, 'b', 'l')   (11, 'b', 'm')   (9, 'c', 'e')
  (5, 'c', 'f')    (16, 'c', 'g')   (6, 'c', 'j')    (4, 'c', 'm')
  (2, 'c', 'o')    (11, 'd', 'e')   (18, 'd', 'h')   (10, 'd', 'j')
  (2, 'e', 'h')    (9, 'e', 'k')    (3, 'e', 'o')    (19, 'f', 'k')
  (12, 'h', 'i')   (2, 'h', 'j')    (15, 'i', 'k')   (3, 'i', 'l')
  (4, 'j', 'l')    (16, 'n', 'o')
</pre>
<p>
\endgroup
The graph <m>\Gamma</m> with this edge set on <m>V=\set{a,b,c,\ldots,o}</m> and weight function <m>w</m> is depicted in <xref ref="fig_kruskal_exmp" autoname="yes" />. To begin applying Kruskal's algorithm to find a spanning tree of <m>\Gamma</m> with minimal weight, we assign each vertex to its own component; thus, the partition of the vertices is
<me>
  \scr{C} = \set{C_0=\set{a},C_1=\set{b},C_2=\set{c},\ldots,C_{14}=\set{o}}.
</me>
</p>

<p>
We begin with the lightest edge, and check each edge to determine whether it connects components. If not, the edge is included in the spanning tree.
</p>
<figure xml:id="fig_kruskal_exmp" >
<caption>A graph <m>\Gamma</m> with 15 vertices. Edge weights are not shown.</caption>
{
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=2]
\graph [edge quotes = {auto}, math nodes, no placement, nodes={draw, circle, inner sep = 1pt}]{
\foreach \n/\x/\y in {a/2.0/0.4, c/1.62/-0.64, b/1.24/0.82, e/2.46/-0.16, d/3.22/0.22, g/0.66/-0.64, f/1.28/-0.14, i/2.06/1.08, h/2.78/0.66, k/1.56/0.44, j/2.4/0.32, m/0.66/-0.02, l/1.76/1.16, o/2.48/-0.8, n/3.22/-0.8} \n[x=\x,y=\y];
a -- b; a -- f; a -- i; a -- h; a -- j; a -- l; a -- o;
c -- e; c -- g; c -- f; c -- j; c -- m; c -- o;
b -- i; b -- k; b -- m; b -- l;
e -- h; e -- k; e -- o;
d -- e; d -- h; d -- j;
f -- k;
i -- k; i -- l;
h -- i; h -- j;
j -- l;
n -- o;
};\end{tikzpicture}]]></latex-image-code>
</image>
}
</figure>
<p>
Let <m>C(v)=k</m> if and only if <m>v\in C_k</m>. The ``lightest" edge is an <m>al</m>-edge, with weight <m>1</m>. Since <m>C(a)=0</m> and <m>C(l)=11</m>, we include the edge <m>al</m>. Hence we update our partition, with the new partition <m>C_0=\set{a,\ell}</m> and <m>C_{11}=\set{}</m>.
The next lightest edge is <m>co</m>, with weight <m>2</m>. Since <m>C(c) = 2</m> and <m>C(o) = 14</m>, we again include the edge <m>co</m>. Updating the partition, we now have <m>C_{2} = \set{c,o}</m> and <m>C_{14}=\set{}</m>.
The next two edges are similar: firstly <m>w(eh)=2</m>, <m>C(e)=4</m>, and <m>C(h)=7</m>, so we include <m>eh</m> and put <m>C_{4}=\set{e,h}</m> and <m>C_7=\set{}</m>; secondly <m>w(hj)=2</m>, <m>C(h) = 4</m> from the previous update, and <m>C(j)=9</m>, so we include <m>hj</m> and put <m>C_4 = \set{e,h,j}</m> and <m>C_9 = \set{}</m>.
The next iteration shows us <m>w(eo)=3</m>, but now we merge two cells of the partition of which neither is a single-element cell. As the algorithm is written naively<fn>This is naive, because a better approach would involve merging the smaller cell into the larger one <mdash /> this would require fewer assignments. Kruskal's algorithm is a good place to start thinking about ``smart" data structures, which improve the computational complexity of the algorithm by reducing the number of loops.</fn>, we simply merge the cells into that of the vertex which comes first in the vertex order. So since <m>C(e)=4</m> and <m>C(o)=2</m>, we include <m>eo</m> and obtain <m>C_4=\set{c,e,h,j,o}</m> and <m>C_2=\set{}</m>.
</p>

<p>
\begingroup
</p>
<pre>
Weight   u   C(u)   v   C(v)   Include?
+--------+---+------+---+------+----------+
    1      a    0     l    11      True
    2      c    2     o    14      True
    2      e    4     h    7       True
    2      h    4     j    9       True
    3      e    4     o    2       True
    3      i    8     l    0       True
    4      a    8     b    1       True
    4      a    8     o    4       True
    4      c    8     m    12      True
    4      j    8     l    8      False
    5      a    8     j    8      False
    5      b    8     i    8      False
    5      c    8     f    5       True
    6      c    8     j    8      False
    7      a    8     i    8      False
    8      b    8     k    10      True
    9      c    8     e    8      False
    9      e    8     k    8      False
    10     b    8     l    8      False
    10     d    3     j    8       True
    11     b    3     m    3      False
    11     d    3     e    3      False
    12     h    3     i    3      False
    14     a    3     f    3      False
    15     i    3     k    3      False
    16     c    3     g    6       True
    16     n    13    o    3       True
    18     a    13    h    13     False
    18     d    13    h    13     False
    19     f    13    k    13     False
</pre>
<p>
\endgroup
The set of included edges is <m>E' = \set{ab, al, ao, bk, cf, cg, cm, co, dj, eh, eo, hj, il, no}</m>. The result of this process is depicted in <xref ref="fig_kruskal_exmp_completed" autoname="yes" />.
</p>
</statement>
</example>

<figure xml:id="fig_kruskal_exmp_completed" >
<caption>The same graph <m>\Gamma</m> from \xautoref{fig_kruskal_exmp} with the minimum spanning tree discovered via Kruskal's algorithm highlighted with red dashed edges.</caption>
{
<image>
<latex-image-code><![CDATA[\begin{tikzpicture}[scale=2]
\graph [edge quotes = {auto}, math nodes, no placement, nodes={draw, circle, inner sep = 1pt}]{
\foreach \n/\x/\y in {a/2.0/0.4, c/1.62/-0.64, b/1.24/0.82, e/2.46/-0.16, d/3.22/0.22, g/0.66/-0.64, f/1.28/-0.14, i/2.06/1.08, h/2.78/0.66, k/1.56/0.44, j/2.4/0.32, m/0.66/-0.02, l/1.76/1.16, o/2.48/-0.8, n/3.22/-0.8} \n[x=\x,y=\y];
a --[dashed, thick, red] b; a -- f; a -- h; a -- i; a -- j; a --[dashed, thick, red] l; a --[dashed, thick, red] o;
b -- i; b --[dashed, thick, red] k; b -- l; b -- m;
c -- e; c --[dashed, thick, red] f; c --[dashed, thick, red] g; c -- j; c --[dashed, thick, red] m; c --[dashed, thick, red] o;
d -- e; d -- h; d --[dashed, thick, red] j;
e --[dashed, thick, red] h; e -- k; e --[dashed, thick, red] o;
f -- k;
h -- i; h --[dashed, thick, red] j;
i -- k; i --[dashed, thick, red] l;
j -- l;
n --[dashed, thick, red] o;
};\end{tikzpicture}]]></latex-image-code>
</image>
}
</figure>
<p>
\section[Implementing Kruskal's algorithm]{Implementing Kruskal's algorithm with <q>smart data structures</q>}
</p>

<p>
In a very naive approach to Kruskal's algorithm, the function <m>C(v)</m> reporting the component of vertex <m>v</m> is not implemented. This requires two searches through the components for each edge. Since we will implement the components as a list of lists of vertices, we may (at the cost of a small amount of memory) implement the function <m>C:V\to \mathbb{N}</m> as a dictionary storing the index of the component containing each vertex <m>v\in V</m>. The variable <c>comps</c> stores the actual list of components.
</p>

<p>
\begingroup
</p>
<pre>
def smart_kruskal(wedge_dict):
    V = []
    wedges = []
    for u,nbrs in wedge_dict.items():
        wedges += [(w,u,v) for v,w in sorted(nbrs.items())]
        V += ([u]+[v for v in nbrs.keys() if v not in V])
    V.sort()
    wedges.sort()
    C = {v:i for i,v in enumerate(V)}
    comps = {i:[v] for i,v in enumerate(V)}
    included = []
    excluded = []
    for w,u,v in wedges:
        cu = C[u]
        cv = C[v]
        if cu == cv:
            excluded += [(u,v,w)]
        else:
            included += [(u,v,w)]
            C[v] = cu
            for vert in comps[cv]:
                comps[cu].append(vert)
                C[vert]=cu
    return [included,excluded]
</pre>
<p>
\endgroup
</p>

<p>
\definecolor{vc0}{rgb}{1,1,1}
\definecolor{ec0}{rgb}{0.500000000000000,0.500000000000000,0.500000000000000}
</p>
</section>
