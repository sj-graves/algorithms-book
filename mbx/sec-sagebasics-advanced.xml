<section xml:id='sec-SageBasics-Advanced'>
    <title>More Advanced Sage</title>

    <p>
        It should be abundantly obvious that Sage is much, much more powerful than we've currently expressed. Here's a very quick demonstration of some of the more powerful things which you can do in Sage. For a nice, long tour of the various applications of Sage to undergraduate mathematics, see Bard's excellent book <xref ref="bib_SageBook" />.
    </p>
    
    <p> 
        The focus of this text is on developing the algorithms which Sage already employs, so we will tend to avoid using any <q>sophisticated</q> functions, except possibly for the purpose of error-checking. Here are a few small examples of more powerful features SMC incorporates.
    </p>

    <activity xml:id="sec-SageBasics-Advanced-ODE">
        <title>Solving ODEs</title>
        <p>
            We could take a general ODE problem you might see in your introductory differential equations course (Math 3305, for instance), and try to solve it with Sage. Let's say we have a system governed by
            <me>x''+4x'+4x = 2te^{-2t}+4\cos(2t)</me>
            subject to the initial conditions that <m>x(0)=1</m> and <m>x'(0)=0</m>.
        </p>
        <sage>
            <input>
                t = var('t')
                x = function('x')(t)
                dx = diff(x,t)
                ddx = diff(dx,t)
                dddx = diff(ddx,t)

                f(t) = 2*t*exp(-2*t)+4*cos(2*t)

                ode = (ddx+4*dx+4*x==f(t))

                t0=0
                x0=1
                dx0=-1

                solx(t) = desolve(ode,x,ics=[t0,x0,dx0])
                show("x''+4x'+4="+latex(f(t)))
                show('\implies x(t) = '+latex(solx(t)))

                plot(solx, (t,-1,10))+list_plot([(t0,x0)],size=75)
            </input>
        </sage>
        <p>
            While the built-in <url href="http://maxima.sourceforge.net/">Maxima</url> software is limited in what it can solve algorithmically, this shows some of its power. If numerical approximations are acceptable rather than exact solutions, the possibilities become much more complex. The <q>pretty printed</q> mathematics text at the top of the evaluation comes from the tight inclusion of <latex /> with Sage; <latex /> is the typesetting engine used by professional mathematicians to produce the majority of mathematical texts, from exams to articles to textbooks.
        </p>
        <p> In fact, you can get much more sophisticated using Sage, as it can be used to produce interactive output! The following produces part of the phase portrait of a homogenous linear second-order ODE with constant coefficients. Try copy and pasting this into a SMC worksheet and see what happens when you run it.
        </p>
        <sage type="display">
            <input>
                @interact
                def func(
                a = input_box('2', type=real),
                b = input_box('8', type=real),
                c = input_box('8', type=real),
                x0 = input_box('1',type=real,label="x(0)"),
                dx0 = input_box('0', type=real, label="x'(0)"),
                tmax = input_box('1', type=real)):
                    t = var('t')
                    x = function('x')(t)
                    dx = diff(x,t)
                    ddx=diff(x,t,2)
                    X(t) = desolve(a*ddx+b*dx+c*x==0,x,ics=[0,x0,dx0])
                    dX(t) = diff(X,t)
                    sgn = lambda n: ("+" if n>0 else "-")+str(n)
                    pp=(parametric_plot((X(t),dX(t)),(t,0,tmax)))
                    tr = [tmax*n(_/100) for _ in range(101)]
                    xR = [X(_) for _ in tr]
                    dxR = [dX(_) for _ in tr]
                    xm,xM= min(xR),max(xR)
                    ym,yM= min(dxR), max(dxR)
                    xx,yy=var('x,y')
                    vp = plot_vector_field((yy,(-b*yy-c*xx)/a),(xx,xm,xM),(yy,ym,yM))
                    show(pp+vp+list_plot([(x0,dx0)],size=30,color="red"))
            </input>
        </sage>
    </activity>

    <subsection>
        <title>Graph Theory</title>
        <p>
            Sage comes preequipped with a sophisticated suite of tools for algorithmic graph theory, which we'll touch on late in the course. Here's a small sample.
            <sage>
                <input>
                    G = graphs.WagnerGraph()
                    H = graphs.CubeGraph(3)
                    show((G+H).plot())
                    print "\nThese graphs are " + ("" if G.is_isomorphic(H) else "not ")+"isomorphic."
                </input>
            </sage>
        </p>
    </subsection>
    <p> There are many, many other examples we could show, but Bard's book provides a wonderful breadth of coverage of the features of Sage. This brief section should serve only to pique your interest.</p>
</section>