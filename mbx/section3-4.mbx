<section>
<title><c>break</c> and <c>pass</c></title>
<p>
Two special commands to mention explicitly are <c>break</c> and <c>pass</c>. The first of these, <c>break</c>, causes the Python interpreter to immediately exit the current loop. If <c>break</c> is called outside a loop, a <c>SyntaxError</c> arises:
</p>
<pre>
>>> break
SyntaxError: 'break' outside loop
</pre>
<p>
We often use this to prematurely exit <c>for</c> or <c>while</c> loops. Sometimes the test condition for a <c>while</c> loop is not easy to explain, and <c>break</c> can be used to exit the loop at the appropriate time. In these cases, you can usually come up with some sort of way to avoid using <c>break</c> if you desire.
</p>
<pre>
>>> while True:
        break

>>>
</pre>
<p>
On the other hand, sometimes while writing code you need some ``placeholder" code <mdash /> for instance, you're trying to write a complicated if-else block, and you want to work on the <c>else:</c> part first. The <c>pass</c> command is a do-nothing command. In fact, it does so little that you can't even get <c>help</c> on it:
</p>
<pre>
>>> help(pass)
SyntaxError: invalid syntax
</pre>
<p>
Again, there are other ways to effect the same thing (often just <c>print</c>ing a debug message, for instance), but <c>pass</c> is still occasionally useful.
</p>
</section>
