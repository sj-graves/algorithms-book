<section>
<title>Kid RSA</title>


<introduction>
<p>
As an introduction to the RSA algorithm, modular multiplication can be used to greatly simplify the calculation process; the trade-off is that the algorithm becomes susceptible to a very well-known mathematical attack. The only <em>shared secret</em> in using Kid RSA is the method of converting strings into integers.
</p>
</introduction>


<subsection>
<title>Key Generation</title>
<p>
The first step of a public key cryptography algorithm is the generation of the public and private keys.
</p>
<algorithm>
<title>Kid RSA Key Generation</title>
<p>
Let <m>a,b,a',b'\in \mathbb{Z}</m> be arbitrary positive integers.
Define
<md>
  <mrow>  M \amp = ab-1</mrow>
  <mrow>  e \amp = a'M+a</mrow>
  <mrow>  d \amp = b'M+b</mrow>
  <mrow>  n \amp = (ed-1)/M = a'b'M+ab'+a'b+1</mrow>
</md>
</p>

<p>
The public key is the ordered pair <m>(n,e)</m>; the private key is the ordered pair <m>(n,d)</m>.
</p>
</algorithm>
<p>
Having a public key generated and shared, a user can now wait for an encrypted message to arrive.
</p>

<example>
<statement>
<p>
Suppose we choose
<md>
  <mrow>  a \amp = 5 \amp  b \amp = 25 \amp  a' \amp = 7 \amp  b' \amp = -49.</mrow>
</md>
</p>

<p>
Following Algorithm 11.1, we obtain
<md>
  <mrow>  M \amp = 5(25)-1 = 124</mrow>
  <mrow>  e \amp = 7(124)+5 = 873</mrow>
  <mrow>  d \amp = 49(124)+25 = 6101</mrow>
  <mrow>  n \amp = (873(6101)-1)/124 = 42953</mrow>
</md>
</p>

<p>
Hence our public key is <m>(42953, 873)</m>, and our private key is <m>(42953, 6101)</m>.
</p>
</statement>
</example>

<p>
Keys in hand, we now need to actually encrypt a message <mdash /> the power and allure of RSA and this easier variant is that the encryption function is mathematically simple.
</p>
<algorithm>
<title>Kid RSA Encryption</title>
<p>
Suppose <m>(n,e)</m> and <m>(n,d)</m> are respectively public and private Kid RSA keys. If <m>m</m> is an integer representing a single character of a plaintext message, then the associated encrypted integer is
<me>
  c = (me)\mod n.
</me>
</p>

<p>
Likewise, if <m>c</m> is an encrypted integer, then the associated decrypted integer is
<me>
  d= (cd)\mod n.
</me>
</p>
</algorithm>
<p>
It should be clear that since <m>(0x)\mod n=0</m> for every pair of <m>n,x</m>, we should avoid coding any letter as the integer 0.
</p>

<example>
<statement>
<p>
Continuing our previous example, we have public key <m>(42953, 873)</m>. Suppose we remove punctuation and spaces from the message:
</p>
<blockquote>
If I have seen further it is by standing on the shoulders of giants<fn>Issac Newton in a letter to Robert Hooke, 1676</fn>.
</blockquote>
<p>
We will convert to a list of integers by simply using the Python <c>ord</c> command.
{
<me>
  \begin{array}{rrrrrrrrrrrrrrrrrrrr}
73 \amp  70 \amp  73 \amp  72 \amp  65 \amp  86 \amp  69 \amp  83 \amp  69 \amp  69 \amp  78 \amp  70 \amp  85 \amp  82 \amp  84 \amp  72 \amp  69 \amp  82 \amp  73 \amp  84 \\
73 \amp  83 \amp  66 \amp  89 \amp  83 \amp  84 \amp  65 \amp  78 \amp  68 \amp  73 \amp  78 \amp  71 \amp  79 \amp  78 \amp  84 \amp  72 \amp  69 \amp  83 \amp  72 \amp  79 \\
85 \amp  76 \amp  68 \amp  69 \amp  82 \amp  83 \amp  79 \amp  70 \amp  71 \amp  73 \amp  65 \amp  78 \amp  84 \amp  83
\end{array}
</me>
</p>

<p>
}
Applying the Kid RSA algorithm, we obtain
{
<me>
  \begin{array}{rrrrrrrrrr}
20776 \amp  18157 \amp  20776 \amp  19903 \amp  13792 \amp  32125 \amp  17284 \amp  29506 \amp  17284 \amp  17284 \\
25141 \amp  18157 \amp  31252 \amp  28633 \amp  30379 \amp  19903 \amp  17284 \amp  28633 \amp  20776 \amp  30379 \\
20776 \amp  29506 \amp  14665 \amp  34744 \amp  29506 \amp  30379 \amp  13792 \amp  25141 \amp  16411 \amp  20776 \\
25141 \amp  19030 \amp  26014 \amp  25141 \amp  30379 \amp  19903 \amp  17284 \amp  29506 \amp  19903 \amp  26014 \\
31252 \amp  23395 \amp  16411 \amp  17284 \amp  28633 \amp  29506 \amp  26014 \amp  18157 \amp  19030 \amp  20776 \\
13792 \amp  25141 \amp  30379 \amp  29506
\end{array}
</me>
</p>
</statement>
</example>
</subsection>


<subsection>
<title>Breaking Kid RSA</title>
<p>
Unfortunately, it is number-theoretically trivial to break Kid RSA. Consider the values <m>n</m>, <m>d</m>, and <m>e</m> used by the encryption. It must be the case that
<me>
  ((me)\mod n)d\mod n = m,
</me>
but then <m>e</m> and <m>d</m> must be multiplicative inverses modulo <m>n</m>. A number <m>e\in \mathbb{Z}_n</m> only has a mutliplicative inverse when <m>\gcd(e,n)=1</m>. This leads, however, to an efficient expansion of Euclid's algorithm for the Greatest Common Divisor to recover the value of <m>d</m>.
</p>

<theorem>
<statement>
<p>
Suppose <m>a,b</m> are positive integers, such that <m>a=bq+r</m> with <m>0\leq r\lt b</m>. Then <m>\gcd(a,b) = \gcd(b,r)</m>.
</p>
</statement>
</theorem>

<p>
The application of this theorem repeatedly is called Euclid's algorithm: given positive integers <m>a</m> and <m>b</m>, there are unique <m>q,r</m> with <m>0\leq r\lt b</m> such that <m>a=bq+r</m>. If <m>r=0</m>, then <m>\gcd(a,b)=b</m>. If <m>r\neq 0</m>, then <m>\gcd(a,b) = \gcd(b,r)</m>.
</p>
<algorithm>
<title>Extended Euclidean Algorithm</title>
<p>
Let <m>s>t</m> be positive integers.
</p>

<ol>
<li><p>Set <c>a = [s]</c>, <c>b = [t]</c>, <c>q = [a//b]</c>, <c>r = [a%b]</c>, and <c>p = [0,1]</c>.</p></li>
<li><p>While the last element of <c>r</c> is nonzero:
</p>

<ol>
<li><p>Append the last element of <c>b</c> to <c>a</c>.</p></li>
<li><p>Append the last element of <c>r</c> to <c>b</c>.</p></li>
<li><p>Append the quotient of those values to <c>q</c>.</p></li>
<li><p>Append the remainder of those values to <c>r</c>.</p></li>
<li><p>Append to <c>p</c> the value <c>(p[-2]+p[-1]*q[-2]) % s</c>.</p></li>
</ol>
</li>
<li><p>When the loop terminates, <c>p[-1]</c> is <m>t^{-1}</m> in <m>\mathbb{Z}_s</m>.</p></li>
</ol>
</algorithm>

<example>
<statement>
<p>
Applying the algorithm for our public key <m>(42953,873)</m>, we have:
<md>
  <mrow>  \amp \amp   p_{-1} \amp = 0</mrow>
  <mrow>  42953 \amp = 49(873)+176 \amp  p_0 \amp = 1</mrow>
  <mrow>  873 \amp = 4(176)+169    \amp  p_1 \amp = (0-1(49))\mod 42953 = 42904</mrow>
  <mrow>  176 \amp = 1(169)+7      \amp  p_2 \amp = (1-42904(4))\mod 42953 = 197</mrow>
  <mrow>  169 \amp = 24(7)+1       \amp  p_3 \amp = (42904-197(1))\mod 42953 = 42707</mrow>
  <mrow>  7 \amp = 7(1)+0          \amp  p_4 \amp = (197-42707(24))\mod 42953 = 6101</mrow>
</md>
</p>

<p>
But we had <m>d=6101</m>, so our decryption is broken. Applying
<me>
  f(c) = (6101\cdot c)\mod 42953
</me>
to each integer <m>c</m> in the list of encrypted integers, we recover the original list.
</p>
</statement>
</example>
</subsection>

</section>
