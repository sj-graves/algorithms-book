<section>
<title>How would a computer best represent a matrix?</title>
<p>
There is a sort of natural way to represent a matrix algorithmically, which arises from the way we refer to elements of a matrix. For instance, if we are working with a matrix <m>A</m> and are interested in the element of <m>A</m> in the <m>i^\text{ th }</m> row and <m>j^\text{ th }</m> column<fn>By convention rows are horizontal and columns vertical.</fn>, we might logically refer to it mathematically as the element <m>a_{i,j}</m>. The number of rows of <m>A</m> is its <em>row dimension</em>, and the number of columns of <m>A</m> is its <em>column dimension</em>. Hence if we have
<me>
  A=\begin{bmatrix}\pi\amp  e\amp  6.2 \\ \frac13 \amp  7 \amp  -42
\end{bmatrix}
</me>
we would say that <m>A</m> has row dimension <m>2</m> and column dimension <m>3</m>, or more concisely say that <m>A</m> is a <m>2\times 3</m> matrix. Row dimension is always listed first in this notation.
</p>

<p>
Since we index the element in the <m>i^\text{ th }</m> row and <m>j^\text{ th }</m> column as <m>a_{i,j}</m>, it seems natural that the <m>i^\text{ th }</m> row should be something like a list. In fact, since we won't want to overwrite individual elements of a matrix, we'll use a tuple of tuples to store the elements. Without any validation of input, this would be easy enough. However, if we want to be careful, there are many things which could go wrong in trying to input a matrix which we want to protect against <mdash /> after all, we might use this matrix class later for something more fun!
</p>

<p>
Here's a brief list of what could be incorrect input for a matrix:
<ol>
<li><p>The value input could not be have any elements (not a compound data type).</p></li>
<li><p>The elements of the input value could not be compound types.</p></li>
<li><p>The first element of the input could be an empty container, like <c>[ ]</c>.</p></li>
<li><p>The length of the elements of the inputs could be different.</p></li>
<li><p>The innermost elements could be non-numeric.</p></li>
</ol>
</p>

<p>
All of these errors are addressed in the following code, which you should save as <c>Matrix.py</c>.
</p>
<pre>
class Matrix:
    """A matrix class.
"""
    def __init__(self, grid):
        input_err = '\n\nMatrix class requires rectangular grid of numbers '+\
                    'as input.\n\n'
        try:
            # will raise error if not compound
            self._coldim = len(grid[0])
            if self._coldim==0: # empty first row
                raise ValueError(input_err) 
            self._data = []
            for row in grid:
                # check row length and that all row elements are numbers
                if (len(row)!=self._coldim) or \
                   not all([type(x) in [float,int] for x in row]):
                    raise ValueError(input_err[2:-2]) 
                else:
                    self._data.append(tuple(row))
        except:
            print(input_err)
            raise
        self._data = tuple(self._data)
        self._rowdim = len(grid)
        
    def __repr__(self):
        return str(self._data)
</pre>
<p>
This code, like many, introduces a new command, <c>all</c>. This is a special boolean function which takes a compound object as its only argument. The effect of running <c>all</c> on a list <c>spam</c> would be to return <c>True</c> if and only if <c>bool(x)</c> returns <c>True</c> for every <c>x</c> in <c>spam</c>. We won't worry about producing a prettier output than provided by <c>Matrix.__repr__</c> at this point, so we'll leave <c>Matrix.__str__</c> undefined.
</p>
</section>
