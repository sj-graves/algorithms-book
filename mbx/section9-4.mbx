<section>
<title>Implementing permutations in Python</title>


<subsection>
<title>Dictionaries</title>
<p>
We've talked about <c>list</c>s and <c>tuple</c>s, both compound data types which are indexed by nonnegative integers. When working with <m>S_A</m> for arbitrary sets <m>A</m>, it becomes necessary to index by elements of <m>A</m>. In Python the mechanism to do this is called a <em>dictionary</em>, with data type <c>dict</c>. Dictionaries can be defined explicitly as follows:
</p>
<pre>
>>> d = {'bob': (3,2,1), 2:'larry', (1,5):['this is data', 3]}
>>> d['bob']
(3, 2, 1)
>>> d[2]
'larry'
>>> d[(1,5)]
['this is data', 3]
>>> d.keys()
dict_keys(['bob', 2, (1, 5)])
>>> d.values()
dict_values([(3, 2, 1), 'larry', ['this is data', 3]])
>>> d.items()
dict_items([('bob', (3, 2, 1)), (2, 'larry'), ((1, 5), ['this is data', 3])])
</pre>
<p>
\sloppypar So we see that the valid indices of a <c>dict</c> are called its <c>keys</c>, and the values indexed by those keys are called <c>values</c>. The <c>tuple</c>s
<me>
  <c>('bob', (3, 2, 1))</c>, <c>(2, 'larry')</c>, <c>((1, 5), ['this is data', 3])</c>
</me>
given in the final evaluation give another way to define a <c>dict</c>. Interestingly, the key-value pairs in a dictionary are stored in a <c>set</c>, a Python data type which behaves as a set does in abstract mathematics.
</p>

<p>
\begingroup
</p>
<pre>
>>> d = dict([(2*x, list(range(-x,x+1))) for x in range(10)])
>>> for x,y in d.items():
        print(x,": ",y)

	
0 :  [0]
16 :  [-8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
2 :  [-1, 0, 1]
4 :  [-2, -1, 0, 1, 2]
6 :  [-3, -2, -1, 0, 1, 2, 3]
8 :  [-4, -3, -2, -1, 0, 1, 2, 3, 4]
10 :  [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]
12 :  [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]
18 :  [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
14 :  [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]
</pre>
<p>
\endgroup
In this example we have a dictionary indexed by integers whose values are lists, but we don't need to have all the indices! Hence this is a good way to store ``sparse" arrays, where only some of the indices are neceesary. A more important feature of dictionaries is that the values can be accessed by indexing in the normal <c>__getitem__</c> kind of way:
</p>

<p>
\begingroup
</p>
<pre>
>>> d[4]
[-2, -1, 0, 1, 2]
</pre>
<p>
\endgroup
There are lots of different ways to construct a dictionary, but one of the easiest is to use Python's <c>zip</c> function. The input to <c>zip</c> is any two iterables: the output is an iterable <c>zip</c> object. This is like a <c>range</c> object, which is really only useful when you iterate over it.
</p>

<p>
\begingroup
</p>
<pre>
>>> a = 'alpha'
>>> b = "beta"
>>> z = zip(a,b)
>>> z
&lt;zip object at 0x10568af48>
>>> for x in z:
        print(x)

	
('a', 'b')
('l', 'e')
('p', 't')
('h', 'a')
</pre>
<p>
\endgroup
Effectively, this provides a tuple of ordered pairs. The zipped object will only have length equal to the length of the shorter inputs, but this is very useful if they are the same length. In fact, we can use <c>zip</c> to construct the list of tuples which is an option for instantiating a dictionary.
</p>

<p>
\begingroup
</p>
<pre>
>>> a = 'abcdefghijklmnopqrstuvwxyz'
>>> b = 'thequickbrownfxjmpsvlazydg'
>>> d = dict(zip(a,b))
>>> d
{'s': 's', 'k': 'o', 't': 'v', 'o': 'x', 'v': 'a', 'i': 'b', 'g': 'c', 'x': 'y', 
 'w': 'z', 'a': 't', 'z': 'g', 'l': 'w', 'y': 'd', 'u': 'l', 'f': 'i', 'h': 'k', 
 'j': 'r', 'd': 'q', 'c': 'e', 'q': 'm', 'b': 'h', 'r': 'p', 'p': 'j', 'e': 'u', 
 'm': 'n', 'n': 'f'}
</pre>
<p>
\endgroup
This<fn>The string used for <c>b</c> in the example code is derived from a short sentence using all lowercase characters in English: ``The quick brown fox jumps over the lazy dog." This is often used to demonstrate the shape of all the miniscule characters in a type face.</fn> is particularly useful as we can now use indexing sort of as a function call to our permutation, but we will have to be very careful about punctuation.
</p>

<p>
\begingroup
</p>
<pre>
>>> p = 'this is a plain text.'
>>> for x in p:
        print(d[x],end =' ')

	
v k b s Traceback (most recent call last):
  File "&lt;pyshell#40>", line 2, in &lt;module>
    print(d[x],end =' ')
KeyError: ' '
</pre>
<p>
\endgroup
Further, we want to think of our permutations as functions, not as indexed arrays, so we'd like to call use <c>d(x)</c> instead of <c>d[x]</c>. In order to do this we'll actually need to build a permutation class and overload the builtin <c>__call__</c> operator, which allows functions to be called as functions.
</p>
</subsection>

</section>
