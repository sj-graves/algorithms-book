<section>
<title>Implementing Dinitz' Algorithm</title>
<p>
One caveat to the implementation of Dinitz algorithm is that in several places, we need to have a comparison value which is always going to be bigger than present in the graph. For instance, the initial distance to a vertex <m>v\neq s</m> in the modified Dijkstra's code should be <m>\infty</m>, but Python has no built-in mathematical understanding of <m>\infty</m>! In those instances, we will define a variable <c>infty</c> which is larger than the largest value which we should ever see in that context.
</p>

<p>
\begingroup
</p>
<pre>
def dinitz(cap_dic, source, target):
    
    #Our helper functions:
    # This removes 0-weight edges and cleans entries for vertices with no 
    # out-edges from the dictionary.
    clean = lambda weighted_graph: {u:{v:w for v,w in nbrs.items() if w>0} 
                                    for u, nbrs in weighted_graph.items() 
                                    if nbrs != {} and sum(nbrs.values())>0}
    
    # This is the modified Dijkstra's algorithm
    def all_shortest_paths(weight_dic, source, vertex_set):
        # The longest path on n vertices has n-1 edges, so properly bigger than 
        # the longest path is
        infty = len(vertex_set)+1 
        dist = {v:(infty if v!=source else 0) for v in V}
        pred = {v:{} for v in V}
        visited = []
        max_dist = 0
        is_pred = set([])
        while len(visited)&lt;len(V):
            temp = sorted((d,v) for v,d in dist.items() if v not in visited)
            if temp == [] or temp[0][0]==infty:
                break
            else:
                u = temp[0][1]
                visited += [u]
                try:
                    for v,w in weight_dic[u].items(): 
                        if w>0 and dist[v] >= dist[u]+1:
                            dist[v] = dist[u]+1
                            if dist[v]>max_dist:
                                max_dist = dist[v]
                            pred[v][u]=w
                            is_pred.add(u)
                except KeyError:
                    continue
        return ({v:d for v,d in dist.items() if d&lt;infty},
                {v:p for v,p in pred.items() if v in dist.keys() 
                 and dist[v]&lt;infty})

    # The pathfinding algorithm, with error handling which takes care of the 
    # special terminate cases.
    def path_find(layers):
        # 1 more than the highest capacity in the layered graph is effectively 
        # infinite
        infty = 1+max([w for d, layer in layers.items() 
                       for u,nbrs in layer.items() 
                       for v,w in nbrs.items()])
        if any(layer=={} for layer in layers.values()):
            raise RuntimeError('No augmenting path! Empty layer in graph.')
        try:
            path = [ list(layers[0].keys())[0] ]
            flow_amount = infty
            for d in sorted(layers.keys())[:-1]:
                u = path[-1]
                v = list(layers[d][u].keys())[0]
                flow_amount = min(flow_amount, layers[d][u][v])
                path += [v]
            
            return (flow_amount, path)
        except KeyError:
            raise RuntimeError('No augmenting path remains in layered graph.')
            
    def clean_to_source(layers, u, d):
        if layers[d][u] == {}:
            if d>0:
                for w,w_nbrs in layers[d-1].items():
                    if u in w_nbrs.keys():
                        layers[d-1][w].pop(u)
                        if len(w_nbrs)==0:
                            layers = clean_to_source(layers, w, d-1)
            layers[d].pop(u)
        return layers
    
    def clean_to_target(layers, v, d):
        maxd = max(layers.keys())
        if not any(v in layers[d-1][w].keys() for w in layers[d-1].keys()):
            for w in layers[d][v].keys():
                layers[d][v].pop(w)
                if d&lt;maxd:
                    layers = clean_to_target(layers, w, d+1)
            layers[d].pop(v)
        return layers

    def maintain_layers(layers, source, target, weight, path):
        for d,(u,v) in enumerate(zip(path[:-1],path[1:])):
            try:
                layers[d][u][v] -= weight
                if layers[d][u][v] == 0:
                    zero = layers[d][u].pop(v)
                    layers = clean_to_source(layers, u, d)
                    layers = clean_to_target(layers,v,d+1)
            except KeyError:
                continue
        return layers
    
    # end of helper functions
    # This is the main routine of the dinitz function
    
    V = set(v for u in cap_dic.keys() for v in [u]+list(cap_dic[u].keys()))
    # Minor error handling
    if not (source in V and target in V):
        raise ValueError('Invalid choice of source and/or target vertices.')
        
    #initalize flow
    flow = {u:{v:0 for v in V if v!=u} for u in V}
    a
    # This is the main loop.
    while True:
        # res_cap is the capacity dictionary for Delta_f
        res_cap = {u:{v:0 for v in V if v!=u} for u in V}
        for u, nbrs in cap_dic.items():
            for v, c in nbrs.items():
                res_cap[u][v] += c-flow[u][v]
                res_cap[v][u] += flow[u][v]
        res_cap = clean(res_cap)
        
        # modified Dijkstra first
        dist, pred = all_shortest_paths(res_cap, source, V)
        # modified Dijkstra second
        dist, succ = all_shortest_paths(pred, target, V)
        # maxd is the length of a shortest path in Lambda
        maxd = max(d for d in dist.values() if d&lt;len(dist.keys()))

        if target not in [v for u,nbrs in succ.items() for v in nbrs.keys()]:
            # if target is not reachable via Dijkstra's algorithm, we terminate 
            # the main loop.
            break

        layers = {maxd-d:{u:n for u,n in succ.items() if dist[u]==d} 
                  for d in dist.values() if d &lt;= maxd}

        # iterate through finding augmenting flows in the layered structure
        try:
            while not all(val=={} for val in layers.values()):
                # use path_find to find an augmenting path; this may generate 
                # a RuntimeError.
                flow_val, path = path_find(layers)

                # add the flow amount to every edge in the path.
                for i,v in enumerate(path[:-1]):
                    flow[v][path[i+1]] += flow_val
                    
                # prune the layered data structure; this is equivalent to 
                # recalculating the residual capacity but uses the calculated 
                # union of shortest paths, until no path from source to target 
                # remains. Edges of residual capacity 0 are removed, as are 
                # vertices with no outflow or no inflow.

                layers = maintain_layers(layers, source, target, flow_val, path)
        except RuntimeError:
            # If the RuntimeError was generated, then no more augmenting flows 
            # exist. Go to the next iteration of the main loop.
            continue
    # Once the code reaches this point, we've broken out of the main loop, so no 
    # more augmenting paths are possible.
    # The sum of flows out of the source is the value of the flow.
    flow_val = sum(f for f in flow[source].values())
    
    # return the value of the flow and the dictionary of edges with positive flow.
    return flow_val, clean(flow)
</pre>
<p>
\endgroup
</p>
</section>
