<section xml:id="sec-MST-Kruskal">
    <title>Kruskal's algorithm</title>
    <introduction>
        <p>
            Joseph Kruskal first published his solution to the minimum spanning tree problem in 1956; again, this is a wonderful, almost intuitive algorithm, which hinges on an awesome use of mathematical induction. The caveat is that the weight function for Kruskal's algorithm must be a non-negative function, <m>w:E\to \set{x\geq 0:x\in \mathbb{R}}</m>.
        </p>

        <theorem>
            <statement>
                <p>
                    If <m>\Gamma=(V,E)</m> is a forest and <m>uv\in E</m> is an edge where <m>u</m> and <m>v</m> are not in the same component of <m>\Gamma</m>, then <m>\Gamma'=(V,E\cup\set{uv})</m> is a forest.
                </p>
            </statement>
        </theorem>

        <proof>
            <p>
                Suppose <m>\Gamma=(V,\set{~})</m> is a totally disconnected graph, and let <m>u_0,u_1\in V</m>. Then <m>u_0</m> and <m>u_1</m> are (naturally) in separate components. The graph <m>\Gamma'=(V,\set{u_0,u_1})</m> contains no cycles, since a graph with only one edge cannot contain a cycle.
            </p>

            <p>
                Suppose <m>\Gamma=(V,E)</m> is a forest and <m>u_0,u_1\in V</m> are vertices in different components of <m>\Gamma</m>. Assume, towards a contradiction, that <m>\Gamma=(V,E\cup\set{u_0u_1})</m> contains a cycle. Then there is a cycle <m>C=(v_0,e_1,v_1,e_2,v_2,\ldots,v_{n-1},e_n,v_n=v_0)</m> where <m>v_i\in V</m> and <m>v_i\neq v_j</m> when <m>i\neq j</m> and <m>\set{i,j}\neq\set{0,n}</m>. If <m>u_0u_1\neq e_j</m> for any <m>j\in\set{1,2,\ldots,n}</m>, then we have contradicted the assumption that <m>\Gamma</m> was a forest. On the other hand, if <m>u_0u_1\in \set{e_1,e_2,\ldots,e_n}</m>, then we may relabel the cycle <m>C=(v_0=u_0, e_1, v_1, e_2, v_2, \ldots, v_{n-1}=u_1, e_n=u_0u_1, v_n=u_0=v_0)</m>. But then <m>(v_0=u_0, e_1, v_1, e_2, v_2, \ldots, v_{n-1}=u_1)</m> is a <m>u_0,u_1</m>-path, contradicting the assumption that <m>u_0</m> and <m>u_1</m> are in different components of <m>\Gamma</m>. In either case, we have a contradiction.
            </p>
        </proof>

        <p>
            Hence we have an immediate method of producing a spanning forest <mdash /> include any edge which does not connect components. More importantly, we have all that is necessary for Kruskal's algorithm: if the graph is weighted, the edge of minimal weight which does not introduce a cycle is added in every iteration.
        </p>
        <algorithm>
            <title>Kruskal's Spanning Tree algorithm</title>
            <statement>
                <p>
                    Let <m>{\Gamma=(V,E,w)}</m> be a weighted graph where <m>V=\set{v_1,v_2,\ldots,v_n}</m> and <m>E=\set{e_1,e_2,\ldots, e_m}</m> such that <m>w(e_i)\leq w(e_j)</m> whenever <m>i\lt j</m>.
                </p>

                <ol>
                    <li><p>Suppose <m>C_1 = \set{v_1}</m>, <m>C_2=\set{v_2}</m>, <ellipsis />, <m>C_n=\set{V_n}</m>, and <m>E_0= \set{~}</m></p></li>
                    <li><p>For each <m>j=1,2,\ldots,m</m>, let <m>uv=e_j</m>. Do the following:
                        </p>

                        <ol>
                            <li><p>If <m>u\in C_k</m> and <m>v\in C_\ell</m> and <m>C_k\neq C_\ell</m> where <m>k\lt \ell</m>, then let <m>C_k = C_k\cup C_\ell</m> and let <m>E_{j} = E_{j-1}\cup\set{e_j}</m>. Otherwise, let <m>E_{j} = E_{j-1}</m>.</p></li>
                        </ol>
                    </li>
                    <li><p><m>\Gamma' = (V,E_m)</m> is a minimum spanning tree for <m>\Gamma</m>.</p></li>
                </ol>
            </statement>
        </algorithm>



        <example>
            <title>Applying Kruskal's Algorithm</title>
            <statement>
                <p>
                    Consider the graph with the following weighted edges:
                    <!-- Here's the edge list:
                [(0, 3, 1), (0, 4, 2), (0, 5, 4), (0, 8, 1), (0, 9, 9), (1, 2, 5), (1, 6, 10), (1, 8, 4), 
                 (2, 6, 8), (2, 7, 5), (2, 8, 7), (3, 4, 5), (3, 7, 7), (3, 9, 9), (4, 8, 9), (4, 9, 7), 
                 (5, 7, 9), (5, 8, 5), (5, 9, 7), (6, 8, 10)]
                -->
                </p>

                <table>
                    <tabular halign='center'>
                        <row bottom='major'>
                            <cell> Weight </cell> <cell right='minor'> Edge </cell>
                            <cell> Weight </cell> <cell right='minor'> Edge </cell>
                            <cell> Weight </cell> <cell right='minor'> Edge </cell>
                            <cell> Weight </cell> <cell> Edge </cell>
                        </row>
                        <row>
                            <cell> 1 </cell> <cell right='minor'> <m>v_{0}v_{3}</m></cell>
                            <cell> 4 </cell> <cell right='minor'> <m>v_{1}v_{8}</m></cell>
                            <cell> 7 </cell> <cell right='minor'> <m>v_{2}v_{8}</m></cell>
                            <cell> 9 </cell> <cell> <m>v_{0}v_{9}</m></cell>
                        </row>
                        <row>
                            <cell> 1 </cell> <cell right='minor'> <m>v_{4}v_{8}</m></cell>
                            <cell> 5 </cell> <cell right='minor'> <m>v_{1}v_{2}</m></cell>
                            <cell> 7 </cell> <cell right='minor'> <m>v_{3}v_{7}</m></cell>
                            <cell> 9 </cell> <cell> <m>v_{3}v_{9}</m></cell>
                        </row>
                        <row>
                            <cell> 2 </cell> <cell right='minor'> <m>v_{0}v_{4}</m></cell>
                            <cell> 5 </cell> <cell right='minor'> <m>v_{2}v_{7}</m></cell>
                            <cell> 7 </cell> <cell right='minor'> <m>v_{4}v_{9}</m></cell>
                            <cell> 9 </cell> <cell> <m>v_{5}v_{7}</m></cell>
                        </row>
                        <row>
                            <cell> 2 </cell> <cell right='minor'> <m>v_{0}v_{8}</m></cell>
                            <cell> 5 </cell> <cell right='minor'> <m>v_{3}v_{4}</m></cell>
                            <cell> 7 </cell> <cell right='minor'> <m>v_{5}v_{9}</m></cell>
                            <cell> 10 </cell> <cell> <m>v_{1}v_{6}</m></cell>
                        </row>
                        <row>
                            <cell> 4 </cell> <cell right='minor'> <m>v_{0}v_{5}</m></cell>
                            <cell> 5 </cell> <cell right='minor'> <m>v_{5}v_{8}</m></cell>
                            <cell> 8 </cell> <cell right='minor'> <m>v_{2}v_{6}</m></cell>
                            <cell> 10 </cell> <cell> <m>v_{6}v_{8}</m></cell>
                        </row>
                    </tabular></table>
                <p>
                    The graph <m>\Gamma</m> with this edge set on <m>V=\set{v_0,v_1,\ldots,v_9}</m> and weight function <m>w</m> is depicted in <xref ref="fig_kruskal_exmp" autoname="yes" />. To begin applying Kruskal's algorithm to find a spanning tree of <m>\Gamma</m> with minimal weight, we assign each vertex to its own component; thus, the partition of the vertices is
                    <me>
                        \mathcal{C} = \set{C_0=\set{v_0}, C_1=\set{v_1}, C_2=\set{v_2},\ldots,C_{9}=\set{v_9}}.
                    </me>
                </p>
                <figure xml:id="fig_kruskal_exmp">
                    <image source="./images/kruskal_example.svg" width="100%"/>
                    <caption> A weighted graph <m>\Gamma</m>.</caption>
                </figure>
                <notation>
                    We define the function <m>c:V\to V</m> such that <m>c(u)=v</m> if and only if <m>u\in C_v</m>.
                </notation>
                <p>
                    The algorithm proceeds as follows: the edge of least weight is <m>v_0v_3</m>, with <m>w(v_0v_3) = 1</m>. Since <m>c(v_0)=0\neq 3=c(v_3)</m>, the edge <m>v_0v_3</m> can be included in the tree. We will merge the component <m>C_0</m> into <m>C_3</m>, since the two components are of equal size and <m>0 &lt; 3</m>. Hence we make <m>C_0=\set{}</m> and <m>C_3=\set{v_0,v_3}</m>. The next edge of least weight is <m>v_4v_8</m>, also with <m>w(v_4v_8)=1</m>; since <m>c(v_4)=4</m> and <m>c(v_8)=8</m>, we must merge <m>C_4</m> and <m>C_8</m> just as we did <m>C_0</m> and <m>C_3</m>. The process is tabulated below.
                </p>

                <table>
                    <tabular halign='center'>
                        <row bottom='major'>
                            <cell> Step </cell> <cell> Weight </cell> <cell><m>u</m></cell> <cell><m>c(u)</m></cell> <cell><m>v</m></cell> <cell><m>c(v)</m></cell> <cell right='minor'>Include <m>uv</m>?</cell>
                        </row>
                        <row><cell right='minor'> 0</cell> <cell> 1 </cell><cell> <m>v_{0}</m> </cell><cell> 0 </cell><cell> <m>v_{3}</m> </cell><cell> 3 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 1</cell> <cell> 1 </cell><cell> <m>v_{4}</m> </cell><cell> 4 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 2</cell> <cell> 2 </cell><cell> <m>v_{0}</m> </cell><cell> 3 </cell><cell> <m>v_{4}</m> </cell><cell> 8 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 3</cell> <cell> 2 </cell><cell> <m>v_{0}</m> </cell><cell> 8 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 4</cell> <cell> 4 </cell><cell> <m>v_{0}</m> </cell><cell> 8 </cell><cell> <m>v_{5}</m> </cell><cell> 5 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 5</cell> <cell> 4 </cell><cell> <m>v_{1}</m> </cell><cell> 1 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 6</cell> <cell> 5 </cell><cell> <m>v_{1}</m> </cell><cell> 8 </cell><cell> <m>v_{2}</m> </cell><cell> 2 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 7</cell> <cell> 5 </cell><cell> <m>v_{2}</m> </cell><cell> 8 </cell><cell> <m>v_{7}</m> </cell><cell> 7 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 8</cell> <cell> 5 </cell><cell> <m>v_{3}</m> </cell><cell> 8 </cell><cell> <m>v_{4}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 9</cell> <cell> 5 </cell><cell> <m>v_{5}</m> </cell><cell> 8 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 10</cell> <cell> 7 </cell><cell> <m>v_{2}</m> </cell><cell> 8 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 11</cell> <cell> 7 </cell><cell> <m>v_{3}</m> </cell><cell> 8 </cell><cell> <m>v_{7}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 12</cell> <cell> 7 </cell><cell> <m>v_{4}</m> </cell><cell> 8 </cell><cell> <m>v_{9}</m> </cell><cell> 9 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 13</cell> <cell> 7 </cell><cell> <m>v_{5}</m> </cell><cell> 8 </cell><cell> <m>v_{9}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 14</cell> <cell> 8 </cell><cell> <m>v_{2}</m> </cell><cell> 8 </cell><cell> <m>v_{6}</m> </cell><cell> 6 </cell><cell> True </cell></row>
                        <row><cell right='minor'> 15</cell> <cell> 9 </cell><cell> <m>v_{0}</m> </cell><cell> 8 </cell><cell> <m>v_{9}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 16</cell> <cell> 9 </cell><cell> <m>v_{3}</m> </cell><cell> 8 </cell><cell> <m>v_{9}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 17</cell> <cell> 9 </cell><cell> <m>v_{5}</m> </cell><cell> 8 </cell><cell> <m>v_{7}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 18</cell> <cell> 10 </cell><cell> <m>v_{1}</m> </cell><cell> 8 </cell><cell> <m>v_{6}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                        <row><cell right='minor'> 19</cell> <cell> 10 </cell><cell> <m>v_{6}</m> </cell><cell> 8 </cell><cell> <m>v_{8}</m> </cell><cell> 8 </cell><cell> False </cell></row>
                    </tabular>
                    <caption>
                        The set of included edges is <m>E' = \set{v_0v_3, v_4v_8, v_0v_8, v_0v_5, v_1v_8, v_1v_2, v_2v_7, v_4v_9, v_2v_6}</m>.
                    </caption>
                </table>
                <figure xml:id="fig_kruskal_exmp_completed" >
                    <caption>The same graph <m>\Gamma</m> with the minimum spanning tree discovered via Kruskal's algorithm highlighted with red edges.</caption>
                    <image source="./images/kruskal_example_tree.svg" width="100%" />
                </figure>

            </statement>
        </example>
    </introduction>

    <subsection>
        <title>Implementing Kruskal's algorithm</title>


        <p>
            In a very naive approach to Kruskal's algorithm, the function <m>c(v)</m> reporting the component of vertex <m>v</m> is not implemented. This requires two searches through the components for each edge. We avoid this at the cost of storing both the component of each vertex as well as the vertices in each component.
        </p>
        <listing>
            <program>
                <input>
                    def kruskal(G, verbose=False):
                    V = G.vertices()
                    WE = sorted((l,u,v) for u,v,l in G.edges())

                    comp_of = {v:v for v in V}
                    vert_of = {v:[v] for v in V}

                    keep = []
                    dump = []
                    out_grid = []
                    for i,(w,u,v) in enumerate(WE):
                    cu, cv = comp_of[u], comp_of[v]
                    row = [w,u,cu,v,cv,cu!=cv]
                    out_grid.append( row )
                    if cu==cv:
                    dump.append( (u,v,w) )
                    continue
                    keep.append( (u,v,w) )
                    if len(vert_of[cu]) > len(vert_of[cv]):
                    v,u = u,v
                    cu,cv = cv,cu
                    vert_of[cv] += vert_of[cu]
                    while len(vert_of[cu])>0:
                    comp_of[vert_of[cu].pop()] = cv
                    if verbose:
                    print table(out_grid, header_row = ["Weight", "u", "C(u)", "v", "C(v)", "Include?"], align="center")
                    return out_grid, keep, dump
                    return keep,dump
                </input>
            </program>
            <caption>A Sage implementation of Kruskal's algorithm.</caption>
        </listing>
    </subsection>
</section>
