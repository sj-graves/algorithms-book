<section xml:id="sec-Vectors-GaussianElimination">
    <title>Algorithms for Gaussian elimination</title>


    <introduction>
        <p>
            Beginning with implementations of the elementary row operations, we can build the full algorithm for the method of Gaussian elimination with partial pivoting.
        </p>
    </introduction>


    <subsection>
        <title>Elementary row operation: Elimination</title>
        <p>
            The first elementary row operation is the elimination operation. We write this in our shorthand as <m>kR_i+R_j</m> and mean <q>multiply every element of row <m>i</m> by scalar <m>k</m> and then add that product to the corresponding element of row <m>j</m>.</q> Rather than trying to perform the matrix operations as changes to a matrix itself, we'll assume that a new matrix is to be returned.
        </p>
        <algorithm>
            <title>Row elimination operation</title>
            <statement>
                <p>
                    Suppose <m>A=[a_{i,j}]_{m\times n}</m> is a matrix, <m>\ell</m> is a scalar, and <m>i</m> and <m>j</m> are row indices in <m>A</m>.
                    <ol>
                        <li><p>Let <c>temp</c> be a list of the rows of <m>A</m>.</p></li>
                        <li><p>Overwrite the <m>j^\text{th}</m> element of <c>temp</c> with the list whose <m>k^\text{th}</m> element is <m>\ell a_{i,k}+a_{j,k}</m>. </p></li>
                        <li><p>Return the <c>aam_Matrix</c> of <c>temp</c>.</p></li>
                    </ol>

                </p>
            </statement>
        </algorithm>
    </subsection>


    <subsection>
        <title>Elementary row operation: Swapping rows</title>
        <p>
            The next elementary row operation is changing the row order<fn>Even though we only swap two rows at a time, this is still a <em>permutation of the rows</em>. We'll talk about permutations a lot when we get to Cryptography.</fn> and is used in the partial pivoting algorithm.
        </p>
        <algorithm>
            <title>Row swap operation</title>
            <statement>
                <p>
                    Suppose <m>A=[a_{i,j}]_{m\times n}</m> is a matrix and both <c>i</c> and <c>j</c> are row indices of <m>A</m>.
                    <ol>
                        <li><p>Let <c>temp</c> be a list of the rows of <m>A</m>.</p></li>
                        <li><p>Set <c>temp[i]</c> to the <m>j^\text{th}</m> row of <m>A</m>.</p></li>
                        <li><p>Set <c>temp[j]</c> to the <m>i^\text{th}</m> row of <m>A</m>.</p></li>
                        <li><p>Return the <c>aam_Matrix</c> of <c>temp</c>.</p></li>
                    </ol>

                </p>
            </statement>
        </algorithm>
    </subsection>


    <subsection>
        <title>Gaussian elimination with partial pivoting</title>
        <p>
            While we could first implement so-called naive Gaussian elimination, it makes more sense to immediately write the algorithm for partial pivoting as well.
        </p>
        <algorithm>
            <title>Gaussian elimination with partial pivoting</title>
            <statement>
                <p>
                    Suppose <m>A=[a_{i,j}]_{m\times n}</m> is a matrix. Let <m>i=1</m> and <m>j=1</m>.
                </p>

                <ol>
                    <li><p>(Pivot step) In the <m>j^\text{th}</m> column, let <m>p</m> be the index of a row with <m>p\geq i</m> such that <m>\abs{a_{p,j}}\geq \abs{a_{k,j}}</m> for all <m>k\in\set{i,i+1,\ldots,m}.</m>
                        </p>

                        <ol>
                            <li><p>If <m>a_{p,j}=0</m>, increment <m>j</m> and return to the pivot step, unless <m>j>n</m>, in which case return <m>A</m>.</p></li>
                            <li><p>Otherwise, swap row <c>i</c> and row <c>p</c> of <m>A</m>.</p></li>
                        </ol>
                    </li>
                    <li>
                        <p>
                        For each <m>k>i</m>, use <em>Row Elimination</em> from above to eliminate the <m>k^\text{th}</m> row using a scalar multiple of the <m>i^\text{th}</m> row.
                        </p>
                    </li>
                    <li><p>Increment <m>i</m> and <m>j</m>. If after incrementing either <m>i>m</m> or <m>j>n</m>, return the matrix <m>A</m>.</p></li>
                </ol>
            </statement>
        </algorithm>
        <exercise>
            <title>Back substitution</title>
            <statement>
                <p>
                    Consider as an example the augmented matrix in row echelon form given by
                    <me>
                        A|\vec{b} = \left[\begin{array}{rrr|r}
                        4 \amp 3 \amp 5 \amp 6 \\
                        0 \amp -2 \amp 4 \amp 10 \\
                        0 \amp 0 \amp -6 \amp -18
                        \end{array}\right]
                    </me>
                </p>
                <ol>
                    <li><p>Use back substitution from the augmented matrix <m>A|\vec{b}</m> to solve <m>A\vec{x}=\vec{b}</m> where <m>\vec{x}=\vc{x_1,x_2,x_3}.</m></p></li>
                    <li><p>Write an algorithm which performs back substitution on an augmented matrix such as given.</p></li>
                    <li><p>What happens in your algorithm if in the process of partial pivoting a column of zeros is encountered?</p></li>
                </ol>
            </statement>
        </exercise>
        
        <exercise>
            <title>Implement Gaussian elimination with partial pivoting</title>
            <statement>
                <p>
                    Combine the algorithm given above for Gaussian elimination with partial pivoting and your algorithm for back substitution to produce a total equation-solving algorithm. Implement it.
                </p>
            </statement>
        </exercise>
    </subsection>

</section>
