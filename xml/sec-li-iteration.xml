<section xml:id="sec-ListsIteration-Iteration">
    <title>Iteration over a list</title>

    <subsection xml:id="sec-ListsIteration-Iteration-ForLoops">
        <title>For loops</title>
        <p>
            The noun <em>computer</em> used to refer to a person whose job was often tedious computation; the difference now is that we have digital computers! This is the power of modern computers, which is often obscured by flashy graphics and entertainment value. Computers can make boring calculations quickly through <em>iteration</em>. Let's look at a new coding structure.</p>
        <sage>
            <input>
                foo = "Hello world!"
                for x in foo:
                    print x.swapcase()
            </input>
        </sage>
        <p>
            The <c>for</c> loop is the most generally useful type of <em>iteration</em>, which is the primary purpose of a computer: repeated performace of a tedious task. In many programming languages, a <c>for</c> loop updates some <em>index variable</em> from a starting point to an ending point with a specific step size. This could be written something like <c>for i from 1 to 10 step 2</c>, for instance. Sage inherits a much more flexible structure from Python by skipping the index variable entirely and allowing the loop to iterate over the elements of an object with any <em>iterable</em> compound data type. As we saw in <xref ref="sec-SageBasics-Strings" autoname="title"/>, the elements of a string of length greater than 1 are strings of length 1.
        </p>
        <p>
            Executing the example above shows us exactly how Sage treats a <c>for</c> loop. The variable <c>x</c> consecutively is assigned the value of each single-character string of <c>foo</c>, and then the case-swapped version of <c>x</c> is printed on its own line. In the event that the single character stored in <c>x</c> is not alphabetic, the <c>str.swapcase()</c> method simply returns the original character.
        </p>

        <p>
            In our example, the data type of <c>foo</c> is a string, so its elements are single-letter strings. The loop starts by setting <c>x</c> to the value <c>'H'</c>. Then it enters the indented <em>block</em> of code below the <c>for</c> statement. It will run everything in this indented block, and upon reaching the outdent will set <c>x</c> to the next value in <c>foo</c>.
        </p>
    </subsection>

    <subsection xml:id="sec-ListsIteration-Iteration-Range">
        <title>The range function</title><p>
        Here's another example to try: add it to a new cell in the same worksheet as the above.
        </p>
        <sage>
            <input>
                bar = "It's just a flesh wound."
                n=79 - len(bar)
                for i in range(n):
                    print i * ' ' + bar
            </input>
        </sage>
        <p>
            This introduces function <c>range(n)</c>, which provides the list of integer indices of a list of length <c>n</c>. To be technically correct, a <c>range</c> object isn't a list, but in practicality you won't see any differences. There are several different sets of arguments which can be passed to <c>range</c>, summarized in <xref ref="table-range_options" autoname="yes"/> below.
        </p>
        <table  xml:id="table-range_options">
            <title>Arguments to the range command</title>
            <caption>Arguments to the <c>range</c> command.</caption>
            <tabular>
                <row><cell><em>Command</em></cell><cell><em>Produces</em></cell></row>
                <row bottom="minor"><cell></cell><cell></cell></row>
                <row><cell><c>range(i)</c></cell><cell>The sequence of integers <m>0,1,2,\ldots,i-1</m>.</cell></row>
                <row><cell><c>range(i,j)</c></cell><cell>The sequence of integers <m>i, i+1, i+2,\ldots, j-1</m>.</cell></row>
                <row><cell><c>range(i,j,k)</c></cell><cell>The sequence of integers <m>i, i+k, i+2k,\ldots,i+mk</m></cell></row>
                <row><cell></cell><cell>where <m>m</m> is the maximum integer such that <m>i+mk\lt j</m>.</cell></row>
            </tabular>
        </table>
        <p>
            All loops can be nested within one another, but remember that this makes the number of executions <em>multiply</em>, not just add.
        </p>
        <sage>
            <input>
                foo = []
                for i in range(10):
                    for j in range(5):
                        foo.append([i,j])
                print len(foo)    
                
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Infinite loops</title>
        <p>
            It is difficult, but not impossible, to get stuck in an ``infinite" for loop. To do this, you would have to <c>append</c> data to the list over which the loop iterates at least as fast as the iteration progresses. This rapidly uses an incredibly large amount of memory and will bring your computer to a crippling halt.
        </p>

        <p>
            If you believe that a loop has gotten away from you, you have several remedies in SMC and really only one in a Sage Cell. In SMC, at the top of every window showing a Sage Worksheet are two important butons: <em>Stop</em> and <em>Restart</em>. Stop sends a <c>KeyboardInterrupt</c> to the running process in an attempt to halt the running computation. This will often work, but if it appears not to do so, the Restart button will stop the current process and restart the instance of Sage. This will require you to reload any variables with approriate values after the restart. In embedded Sage cells in the book, your only real option is to refresh the page.
        </p>

        <p>
            I recommend against trying to build an infinite loop in this way: the amount of memory used grows with the size of the list, and even in SMC there is a finite cap on the amount of memory which can be used by a project. Nearing that limit will make your browser react incredibly slowly.
        </p>
    </subsection>

</section>
