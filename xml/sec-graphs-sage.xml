<section xml:id="sec-Graphs-Sage">>
    <title>Representing graphs in Sage</title>


    <introduction>
        <p>
            There are many problems in discrete modeling which are best solved using graph theory, so it is important to be able to represent graphs as some sort of data structure. In fact, there is an abstract computer science data structure called a graph! This data structure is often of limited use when trying to solve mathematical problems on graphs, so we will focus instead on other methods of implementing graphs.
        </p>

        <p>
            To our great benefit, Sage comes pre-equipped with an incredible library of graph tools. The determination of which tools to use for which algorithm depends heavily upon the algorithm under consideration.
        </p>
    </introduction>


    <subsection>
        <title>Edge lists</title>
        <p>
            The simplest way to represent a graph is to provide a list of the vertices and the edges; while the edges can be stored either as lists or tuples, we will prefer tuples so they are immutable. We'll consider again the Petersen graph, this time with vertices labeled from <m>0</m> through <m>9</m>.
        </p>
        <sage>
            <input>
                V = range(10)
                E = [(0, 1), (0, 4), (0, 5), (1, 2), (1, 6), 
                     (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), 
                     (5, 7), (5, 8), (6, 8), (6, 9), (7, 9)]
                Pet = Graph([V,E])
                show(Pet.plot())
                print Pet.is_isomorphic(graphs.PetersenGraph(), certificate=True)
            </input>
        </sage>
        
        <p>
            We notice that each edge is listed only once, in one direction; the built in algorithm for the <c>Graph</c> class takes this into account. In fact, we can use the methods of this class to produce a sort of two-ended dictionary telling the neighborhood of each vertex in the graph.
        </p>
        <sage>
            <input>
                V = range(10)
                E = [(0, 1), (0, 4), (0, 5), (1, 2), (1, 6), 
                     (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), 
                     (5, 7), (5, 8), (6, 8), (6, 9), (7, 9)]
                Pet = Graph([V,E])
                print Pet.to_dictionary()
            </input>
        </sage>
        <p>
            Although the dictionary produced from the <c>Graph.to_dictionary()</c> method is shows the neighbors of every vertex, we need only specify one end of each. This is due to the symmetry of the adjacency relation.
        </p>
        <sage>
            <input>
                D = {0:[1,4,5], 1:[2,6], 2:[3,7], 3:[4,8], 
                     4:[9], 5:[7,8], 6:[8,9], 7:[9]}
                V = range(10)
                E = [(0, 1), (0, 4), (0, 5), (1, 2), (1, 6), 
                     (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), 
                     (5, 7), (5, 8), (6, 8), (6, 9), (7, 9)]
                Graph([V,E]) == Graph(D)
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Adjacency matrices</title>
        <p>
            From the idea of a double-ended edge dictionary it is a small step to build the adjacency matrix of a graph.
        </p>
        <definition>
            <statement>
                <p>
                    Suppose <m>\Gamma=(V,E)</m> is a graph with vertices <m>V=\set{v_0,v_1,\ldots, v_{n-1}}</m>. Then the <term>adjacency matrix</term> of <m>\Gamma</m> is the <m>n\times n</m> matrix <m>A=[a_{i,j}]</m> with
                    <me>
                        a_{i,j} = \begin{cases}1 \amp  v_iv_j\in E \\ 0 \amp  v_iv_j\notin E
                        \end{cases} .
                    </me>
                </p>
            </statement>
        </definition>
        <p>
            Accessing the adjacency matrix of a predefined graph is easy using Sage, and the <c>Graph</c> class accepts matrices as constructors as well.
        </p>
        <sage>
            <input>
                G = Graph(matrix([[0,1,0,1],[1,0,1,1],[0,1,0,0],[1,1,0,0]]))
                show(G)
                G.adjacency_matrix()
            </input>
        </sage>
    </subsection>

</section>
