<section xml:id="s-FP-FDT">
  <title>Functions do things</title>
  <introduction>
    <p>
      Examples of mathematical functions abound, and you have probably spent
    the last several years as a mathematics student learning about the behavior
    of all sorts of different functions: polynomials, rational functions,
    trigonometric functions, exponential functions, and logarithms, just to
    name a few. These functions all have some things in common. They all take
    as input a single number, usually a real number (although each of the
    listed functions has an extension into the complex numbers). Moreover, they
    all return as output exactly one real number for each real number input.
    Multivariate calculus introduces the idea of functions with more than one
    input variable (sometimes written using vector notation) and then later
    introduces the idea of vector-valued functions. For instance, a nice
    multivariate calculus function example is 
    <me>\vec{f}(x,y) = \begin{bmatrix} x^2\\ -\frac{x}{y} \end{bmatrix}.</me>
    </p>
    <p>Since Sage does symbolic math, it can do all this, but since Sage is
    also a full programming language it also has a means to use the word 
    <em>function</em>to mean something else, which is often called a 
    <term>subroutine</term>. We'll generally continue to call these functions
    as the usage is essentially the same for a subroutine in Sage as a
    mathematical function: the function name first, followed by a
    comma-separated sequence of inputs, called 
    <term>arguments</term>.</p>
    <p>Symbolic functions like those used in Calculus are very, very easy to
    define in Sage.</p>
    <sage>
      <input>x = var('x') f(x) = 1+x^2 + x^3 print f print f(3) print
      f(x^2)</input>
    </sage>
  </introduction>
  <subsection xml:id='ss-FP-FDT-DS'>
    <title>Defining subroutines</title>
    <p>More often than not, a single line of code doesn't suffice to solve a
    problem. The 
    <c>def my_func(...):</c>block structure provides the ability to write more
    complicated procedures as reusable subroutines. Let's investigate a simple
    function 
    <c>fib</c>to understand the structure of a function written using 
    <c>def</c>.</p>
    <!--         <listing> -->
    <!--             <program> -->
    <!--                 <input> -->
    <!--                     def fib(n): -->
    <!--                         '''A mysterious function appears! -->
    <!--  -->
    <!--                         The argument n must be a positive integer. -->
    <!--                         ''' -->
    <!--                         if type(n) == type(1) and n &gt; 0: -->
    <!--                             sequence = [0,1] -->
    <!--                             while len(sequence) &lt; n: -->
    <!--                                 sequence += [sequence[-2]+sequence[-1]] -->
    <!--                             return sequence[-1] -->
    <!--                         else: -->
    <!--                             raise TypeError('Function fib expects positive integer.') -->
    <!--                 </input> -->
    <!--             </program> -->
    <!--             <caption> -->
    <!--                 A function written using the <c>def</c> command. -->
    <!--             </caption> -->
    <!--         </listing> -->
    <listing>
      <program>
        <input>        
          def fibo(n):
            """Return the n-th element in the Fibonacci sequence with initial 
            values 0 and 1. The argument n should be a positive integer. 
            """
            # Check to see if n &gt;= 2 is an integer
            if type(n) == type(1) and n &gt; 1:
              # Initialize the list
              sequence = [0,1]
              # Loop until the sequence is long enough
              while len(sequence) &lt; n:
                # Append the sum of the last two curent entries to the list
                sequence.append( sequence[-2] + sequence[-1] )
              # Once the list is long enough, return its last element
              return sequence[-1]
            else:
              # In the case where the input validation fails, raise an error.
              raise ValueError('Argument not a positive integer.')
        </input>
      </program>
      <caption>Using a <c>def</c> function to calculate Fibonacci numbers.</caption>
    </listing>
    <p>
      We note that executing the <c>def</c>block doesn't produce any output. This occurs for precisely the same reason as the lack of output for assigning a value to a variable -- unless there's a syntax error in the function, all we've really done is attached the rule of <q>perform this process</q> to the name of the subroutine. 
    </p>
    <p>
      Let's pick apart the code so that we can see how subroutines are structured. We'll ignore all the comment lines which begin with <c>#</c>.
      <ol>
        <li><c>def fibo(n):</c> begins our function, assigning the name <c>fibo</c> to the process and declaring that the argument passed to the function will be referred to as <c>n</c> inside the function code.</li>
        <li>The next three lines begin and end with <c>"""</c>, which tell us that this is a long-form multiline string. This particular string is called the <term>docstring</term> of the function, and is what will be displayed when <c>help(fibo)</c> is used.</li>
        <li><c>if type(n) == type(1) and n &gt; 1:</c> tests the argument to make sure that it is valid input to the function. Since we'll be using the input argument <c>n</c> as an index of a list, we have to ensure that <c>n</c> is first an integer and then that it is at least 2, since the list starts with two elements.</li>
        <li><c>sequence = [0,1]</c> initialize the first two values in our Fibonacci sequence. <em>If you change these, you get a different Fibonacci sequence!</em></li>
        <li><c>while len(sequence) &lt; n:</c> runs the loop until the list has enough elements</li>
        <li><c>sequence.append( sequence[-2] + sequence[-1] )</c> adds the last two elements of <c>sequence</c> and appends that value to <c>sequence</c>. This is the last line of the <c>while</c> loop.</li>
        <li><c>return sequence[-1]</c> returns the last element of the list.</li>
        <li><c>else:</c> executes in case the input validation of step (3) failed.</li>
        <li><c>raise ValueError('Argument not a positive integer.')</c> raises a <c>ValueError</c> exception to tell us that something bad happened when we tried to run the function.</li>
      </ol>
    </p>
    <p>
      Of all this code, there are only two things necessary for a valid function definition. The first line is mandatory: you must have the <c>def</c> instruction, a function name, a (possibly empty) list of argument names in parentheses, and finally a colon <c>:</c>. Then the next line must be indented some number of spaces, and all the indentation of the block below this point must match. Every function has a <c>return</c> value, but if one is not explicitly written, the function returns a special value called <c>None</c>, of <c>NoneType</c>. Here's a minimal working example.
    </p>
    <sage>
      <input>
        def my_func():
          1
        my_func()
      </input>
    </sage>
  </subsection>
  <subsection xml:id="ss-FP-FDT-VS">
    <title>Variable Scope</title>
    <p>
      A technical consideration that must be mentioned is that variable names used as arguments to functions or declared inside the function body are <term>local variables</term>, which cannot be used outside the function. Mainly you should think of there being two different <term>scopes</term> of variables in Sage: local variables, which are accessible only inside the function with which you are currently working, or <term>global variables</term> which can be seen everywhere. You usually want to avoid the use of global variables, so we won't worry about them too much.
    </p>
  </subsection>
  <subsection xml:id="ss-FP-FDT-NF">
    <title>Nesting functions</title>
    <p>
      As with other block structures (<c>if</c>, <c>for</c>, or <c>while</c>, particularly) we can nest <c>def</c> blocks. The effect of this is to create a function which is known locally inside another function. This is often referred to as a <term>helper function</term>. Usually helper functions are used when your function has some often-used subroutine that you would prefer to only write once. The benefit of using a helper function in this case is that if after being initially written you find an error in the design of your helper function, there is only one place where you need to change code, rather than having to change code everywhere that the process appears.
    </p>
    <p>
      As an example of this, consider that I have a frequent need in a function <c>my_func</c> to sort a list of numbers in <em>decreasing</em> order. This is the opposite order of the <c>list.sort()</c> method, so we could write a helper function.
    </p>
    <listing>
      <program>
        <input>
          def my_func():
            def dsort(a_list):
              b_list = sorted(a_list)
              b_list.reverse()
              return b_list
            ...
            ...
            my_list = dsort(my_list)
            ...
            ...
        </input>
      </program>
      <caption>Using helper functions.</caption>
    </listing>
  </subsection>
    <subsection xml:id="ss-FP-FDT-IV">
        <title>Input validation</title>
        <p>
            When we consider mathematical functions, we recognize that every well-defined function has a <term>domain</term>, but in programming any value can be passed as an argument to any function, even if in error. The process of <term>input validation</term> is used to restrict the domain and raise an exception (or exit in some other way) when improper arguments are provided. Adding input validation to your functions is a way of <q>idiot-proofing</q> your code, by making it so that strange function behaviors are limited. It is very hard to cover all cases of bad input to a function, and so sometimes (for instance when good faith can be assumed by the users of a function) no input validation is added to a function.
        </p>
    </subsection>
  
  <subsection xml:id="ss-FP-FDT-LF">
    <title>Lambda functions</title>
    <p>
      There is another way to define functions when the process they perform is simple, called the <term>lambda constructor</term>. The <c>lambda</c> command allows you to assign a function which performs exactly one line of code. This is a limitation, but lambda functions end up being very useful especially as helper functions. The structure of a lambda definition is show below, where the example is to make a function <m>f</m> with two inputs which simply attempts to multiply the arguments.
    </p>
    <sage>
      <input>
        f = lambda a, b: a*b

        print f(3, 'bob')
        print f(4+2*I, 4-2*I)
        print f('bob', 'larry')
      </input>
    </sage>
    <p>
      Looking at the definition, we see that the function name <c>f</c> is being used just like a regular variable, and the <c>lambda</c> structure is what is assigned to <c>f</c>. The structure requires the <c>lambda</c> token, then a comma-separated sequence of arguments, then a colon, and then the single line of code to be executed.
    </p>
    <p>
      Here's a cool example of using a lambda function for a real purpose. First, we need to know that if <c>a</c> and <c>b</c> are both integers, then <c>a % b</c> returns the remainder of <c>a</c> when integer-divided by <c>b</c>, called the <term>mod</term> operator.
    </p>
    <sage>
      <input>
        foo = lambda x,y: y if x%y == 0 else foo(y, x%y)
        
        foo(1978, 2019)
      </input>
    </sage>
    <p>
      Can you determine what this function <c>foo</c> is doing?
    </p>
  </subsection>
   
  <subsection xml:id="ss-FP-FDT-WRC">
    <title>Writing reusable code</title>
    <p>
      You may never in your life need to look back at an old code you have written and reuse it, depending upon your career and interests. This being said, you often want to write code in a way that it can be easily reused. This is a limitation of writing all of your code inside a page like a Sage worksheet. If you are writing a program, especially a long program, and you know that you will need it more than once, it is beneficial to have it saved in a separate file which can be loaded into worksheets when you need it.
    </p>
    <p>
      In Sage if you want to write a reusable function for use in more than one worksheet, it is best to save it in a <c>.sage</c> file rather than a <c>.sagews</c> file, and then use the <c>load(...)</c> function to <em>import</em> it when you need to use it. For instance, in the next section when we begin talking about <xref ref="s-FP-CAM" text="title" /> we'll write our classes in separate files so they can be loaded into worksheets when you need them.
    </p>  </subsection>
</section>
