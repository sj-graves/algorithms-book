<section xml:id="s-FP-OO">
    <title>Operator overloading</title>

    <introduction>
        <p>
            We learn in elementary school that the procedure necessary to calculate <m>3 + 5</m> and the procedure necessary to calculate <m>\frac13 + \frac15</m> are different, but we allow that the procedure is addition in both cases so the use of the <m>+</m> <term>operator</term> is natural. Computers have no ability to know a thing – they simply store and retrieve information and perform calculations – so we must explicitly define both procedures to be addition. This causes a problem: the single symbol <c>+</c> is then being used for more than one process, and both are necessary. The problem of having a single operator being used for multiple processes is called <term>operator overloading</term>. The Sage (and Python) implementation of operator overloading is through the use of special methods, all of which have names of the format <c>__operator_name__</c>. 
        </p>
        <p>
            Operators are often classified by the number of arguments to the operation: for this reason, many of our regular mathematical operations are called <term>binary operators</term>, since they take two arguments. All of the basic arithmetic operations of addition, subtraction, multiplication, and division are binary operators, denoted by <m>+</m>, <m>-</m>, <m>\times</m> or <m>\cdot</m>, and <m>\div</m> or <m>/</m>. Other operations are <term>unary operators</term>, as they take only a single argument: the <m>\sqrt{\mbox{}}</m> operator (called the <term>radical</term> symbol) is an example, as is the differential operator <m>\frac{d}{dx}</m> for a single-variable function <m>f(x)</m>. We've encountered already a special programming idea called the <term>ternary operator</term>, the single-line <c>value if condition else alt_value</c> expression. In all cases, the first argument of an operator is always the referent object, often called <c>self</c>. For the binary operators, the second argument can be best thought of as <c>other</c>, though sometimes we'll give it another name for the sake of clarity. Binary operators also present a problem when the operator is not commutative.
        </p>
        <definition>
            <title>Commutative operator</title>
            <statement>
                A binary mathematical operation <m>@</m> is <term>commutative</term> if and only if <m>x @ y = y @ x</m> for every <m>x</m> and <m>y</m> in the domain of the operation. If there is at least one pair of <m>x</m> and <m>y</m> for which <m>x @ y \neq y @ x</m>, then <m>@</m> is <term>non-commutative</term>.
            </statement>
        </definition>

        <p>
            The first two operators for which commutativity is an issue are addition and multiplication, specifically when we are defining new classes which interact with other classes. Two basic cases involving non-commutativity are string addition and matrix multiplication. If you've never worked with matrices before, the canonical eaxmple of non-commutative multiplication is within the set of square matrices of size <m>n</m>, which we will discuss later in the course.
        </p>
        <table> <!-- OH MY GOSH TABLES TAKE FOREVER -->
            <caption>Overloaded operators which are frequently non-commutative.</caption>
            <tabular>
                <row bottom="major">
                    <cell>Method</cell>
                    <cell>Operation Defined</cell>
                </row>
                <row>
                    <cell>
                        <c>__add__(self, right)</c>
                    </cell>
                    <cell>
                        <c>self + right</c>
                    </cell>
                </row>
                <row>
                    <cell>
                        <c>__radd__(self, left)</c>
                    </cell>
                    <cell>
                        <c>left + self</c>
                    </cell>
                </row>
                <row>
                    <cell>
                        <c>__mul__(self, right)</c>
                    </cell>
                    <cell>
                        <c>self * right</c>
                    </cell>
                </row>
                <row>
                    <cell>
                        <c>__rmul__(self, left)</c>
                    </cell>
                    <cell>
                        <c>left * self</c>
                    </cell>
                </row>
            </tabular>
        </table>
        <p>
            The first step in implementing the operations of addition and multiplication for Gaussian integers is to clearly articulate each algorithm.
        </p>
        <definition xml:id="defn-A">
            <title>Algorithm</title>
            <idx>algorithm</idx>
            <statement>
                <p>
                    An <em>algorithm</em> is a formal procedure which gives the necessary instructions to complete a task, often computational.
                </p>
            </statement>
        </definition>
        <p>
            This is a very loose definition, because a lot of procedures are algorithms, although we don't think of them in such terms: a recipe is an algorithm for producing food, after all. We will restrict our use of the terminology to procedures which enumerate the steps of some sort of computational task.
        </p>

    </introduction>
    <subsection xml:id='ss-FP-OO-OGI'>
        <title>Operating on the Gaussian integers</title>
        <subsubsection xml:id='sss-FP-OO-OGI-CA'>
            <title>Complex addition</title>
            <p>
                Since we have decided that every real number can be written as a complex number with imaginary part <m>0</m>, it must be that whatever we define to be the addition operator in the complex numbers must respect real addition. In fact, if we treat <m>i</m> like a real variable rather than an imaginary constant, we get the desired definition from the distributive property. Suppose <m>z_1=x_1+iy_1</m> and <m>z_2=x_2+iy_2</m> are complex numbers. Then
            </p>
            <md align='gather'>
                <mrow> z_1 + z_2 &amp;= (x_1 + iy_1) + (x_2 + iy_2) </mrow>
                <mrow> &amp;= (x_1+x_2) + i(y_1+y_2) </mrow>
            </md>
            <p>
                This turns into an algorithm very nicely, but what if one of <m>z_1</m> or <m>z_2</m> is of the wrong data type in Sage? Specifically, we want to be able to seamlessly add a Sage <c>Integer</c> to a <c>GaussianInteger</c> and have it return the correct <c>GaussianInteger</c>. This requires that we include input validation and type checking into our algorithm.
            </p>
            <algorithm>
                <title>Addition for Gaussian integers</title>
                <statement>
                    <p>
                        Suppose <c>self</c> is a <c>GaussianInteger</c> and <c>right</c> is some other input value.
                    </p>
                    <ol>
                        <li> 
                            If <c>self</c> and <c>right</c> have the same type, <c>GaussianInteger</c>, return a new <c>GaussianInteger</c> with real part <c>self.re()+right.re()</c> and imaginary part <c>self.im()+right.im()</c>.
                        </li>
                        <li>
                            Otherwise, if <c>right</c> has type <c>Integer</c>, return a new <c>GaussianInteger</c> with real part <c>self.re()+right</c> and imaginary part <c>self.im()</c>.
                        </li>
                        <li>
                            Otherwise raise an error.
                        </li>
                    </ol>
                </statement>
            </algorithm>
            <p>
                Now that we have an algorithm written down, writing the code is very direct. This is a virtue of using a Python-based language. In fact, we can do both left and right addition at the same time, since we know that addition of Gaussian integers is actually commutative.
            </p>
            <exercise>
                <title>Implement addition for the Gaussian integer class</title>
                <statement>
                    Implement the algorithm above in the <c>__add__</c> and <c>__radd__</c> methods of <c>GaussianInteger</c>.
                </statement>
                <solution>
                    <listing>
                        <program>
                            <input>
                                class GaussianInteger:
                                    ...
                                    def __add__(self, right):
                                        if type(self)==type(right):
                                            return GaussianInteger(self.re()+right.re(),self.im()+right.im())
                                        elif type(right)==type(1):
                                            return GaussianInteger(self.re()+right, self.im())
                                        else:
                                            raise TypeError('Addition is not defined for GaussianInteger and {}.'.format(type(right)))

                                    def __radd__(self, left):
                                        return self + left
                            </input>
                        </program>
                        <caption>The addition methods <c>__add__</c> and <c>__radd__</c> for class <c>GaussianInteger</c>.</caption>
                    </listing>
                    <p>
                        Since <c>__radd__(self,left)</c> is the method called by <c>left + self</c> and addition of complex numbers is commutative, we have introduced fewer potential errors by allowing <c>__radd__</c> to simply return the value of <c>self + left</c>. It is often beneficial to think of ways that the same functions can be reused rather than rewriting the same algorithm multiple times, for precisely this reason – once written, there are fewer places in the code to introduce an error.
                    </p>
                </solution>
            </exercise>
            
        </subsubsection>
        
        <subsubsection xml:id="sss-FP-OO-OGI-CM">
            <title>Complex multiplication</title>
            <p>
                Like with addition, we already know an algorithm (often called FOIL) for multiplying binomials; if we are treating <m>i</m> as a variable, we can use FOIL and then the distributive and associative properties to write the product of two Gaussian integers. Suppose <m>z_1=x_1+iy_1</m> and <m>z_2=x_2+iy_2</m> are complex numbers. Then
            <md align='gather'>
                <mrow> z_1z_2 &amp;= (x_1+i y_1)(x_2+i y_2) </mrow>
                <mrow> &amp;= x_1x_2+ix_1y_2+ix_2y_1+i^2y_1y_2 </mrow>
                <mrow> &amp;= (x_1x_2-y_1y_2)+i(x_1y_2+x_2y_1) </mrow>
            </md>
            </p>
            <p>
                Just like with addition, this is exactly what we want when both <c>self</c> and <c>other</c> are of type <c>GaussianInteger</c>, but what about when <c>other</c> is an <c>Integer</c>? Again, quickly adding some type verification makes for a complete and correct algorithm.
            </p>
            <algorithm>
                <title>Multiplication for Gaussian integers</title>
                <statement>
                    <p>
                        Suppose <c>self</c> is a <c>GaussianInteger</c> and <c>other</c> is some other input value.
                    </p>
                    <ol>
                        <li> 
                            If <c>other</c> and <c>self</c> have the same type, <c>GaussianInteger</c>, let <c>x = self.realpart</c>, <c>y = self.imagpart</c>, <c>a = other.re()</c>, and <c>b = other.im()</c>. Return a new <c>GaussianInteger</c> with real part <c>a*x-b*y</c> and imaginary part <c>a*y+b*x</c>.
                        </li>
                        <li>
                            On the other hand, if <c>other</c> has type <c>Integer</c>, return a new <c>GaussianInteger</c> with real part <c>other*self.realpart</c> and imaginary part <c>other*self.imagpart</c>.
                        </li>
                        <li>
                            Otherwise raise an error.
                        </li>
                    </ol>
                </statement>                        
            </algorithm>
            <p>
                We again are working with an operation which is commutative, so the implementation of <c>__rmul__</c> can be written as a direct call to <c>__mul__</c>.
            </p>
            <exercise>
                <title>Implement multiplication for the Gaussian integer class</title>
                <statement>
                    Try implementing the above algorithm in the <c>__mul__</c> and <c>__rmul__</c> methods of the <c>GaussianInteger</c> class.
                </statement>
                <solution>
                    <listing>
                        <program>
                            <input>
                                class GaussianInteger:

                                    ...

                                    def __mul__(self, other):
                                        if type(other)==type(self):
                                            x, y = self.realpart, self.imagpart
                                            a, b = other.re(), other.im()
                                            return GaussianInteger(a*x-b*y, a*y+b*x)
                                        elif type(other)==type(1):
                                            return GaussianInteger(other*self.realpart, other*self.imagpart)
                                        else:
                                            typeOther = str(type(other))
                                            raise TypeError('Multiplication is not defined for ' + \
                                                'GaussianInteger and ' + typeOther)
                                
                                    def __rmul__(self,other):
                                        return self*other
                            </input>
                        </program>
                        <caption> The multiplication methods <c>__mul__</c> and <c>__rmul__</c> for the <c>GaussianInteger</c> class.</caption>
                    </listing>
                    <p>
                        Like in the previous exercise, we can avoid implementing the same algorithm twice for multiplication by returning <c>self * other</c> in the body of <c>__rmul__</c>.
                    </p>
                </solution>
            </exercise>
        </subsubsection>
    </subsection>
    
    <subsection xml:id="ss-FP-OO-OOO">
        <title>Other operators to overload</title>
        <p>
            There are many, many operators and methods which you will want to overload to make robust classes. In fact, nearly every routine mathematical function can be overloaded <emdash /> you just need to know the <q>hidden</q> Python name of the operator. A good place to see a list of built-in methods which correspond to operators is in the <c>help</c> files for the <c>complex</c> class! Sage can natively handle complex numbers both as expressions (specified in the form <c>3-4*I</c>) or as a special <c>ComplexNumber</c> class (specified in the form <c>3-4j</c> where <m>j=\sqrt{-1}</m> as is the rule in engineering and the sciences).
        </p>
        <sage>
            <input>
                z = 3-4j
                print type(z)
                help(complex)
            </input>
        </sage>
        <exercise>
            <title>Implement other operators</title>
            <statement>
                <p>Try to write algorithms and implement operators for some other common mathematical operations: negation, subtraction, and integer powers are a good place to start.</p>
            </statement>
            <solution>
                <algorithm>
                    <title>Negation</title>
                    <statement>
                        <p>
                            If <c>self</c> is a <c>GaussianInteger</c>, return a new <c>GaussianInteger</c> with real part <c>-self.realpart</c> and imaginary part <c>-self.imagpart</c>.
                        </p>
                    </statement>
                </algorithm>
                <algorithm>
                    <title>Subtraction</title>
                    <statement>
                        <p>
                            Suppose <c>self</c> is a <c>GaussianInteger</c> and <c>other</c> is some other input value.
                        </p>
                        <ol>
                            <li> 
                                If <c>other</c> and <c>self</c> have the same type, <c>GaussianInteger</c>, or if <c>other</c> has type <c>Integer</c>, return <c>self + (-other)</c>.
                            </li>
                            <li>
                                Otherwise raise an error.
                            </li>
                        </ol>
                    </statement>
                </algorithm>
                <algorithm>
                    <title>Integer powers</title>
                    <statement>
                        <p>
                            Suppose <c>self</c> is a <c>GaussianInteger</c> and <c>other</c> is some other input value.
                        </p>
                        <ol>
                            <li>
                                If <c>other</c> has type <c>Integer</c>, let <c>value=GaussianInteger(1,0)</c>. Exactly <c>other</c> times, set <c>value = value*self</c>. Return <c>value</c>.
                            </li>
                            <li>
                                Otherwise raise an error.
                            </li>
                        </ol>
                    </statement>
                </algorithm>
            </solution>
        </exercise>
        <p>
            Since there is a built-in <c>ComplexNumber</c> class implemented as a mathematical ring in Sage, we don't need to keep our <c>GaussianInteger</c> class for further use. You may wish to keep it around as an example, since building classes is a useful technique for the solution of many algorithms.
        </p>
    </subsection>
</section>
