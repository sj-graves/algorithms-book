<section xml:id="s-IP-CE">
    <title>Conditional expressions</title>
    <introduction>
        <p>
            Thinking back to the Boolean data type from <xref ref="ss-SB-V-BDT" text="title" /> we may wonder, <q>what was the point of having that data type at all!?</q> Generally speaking, there's not a lot of need to parse through complicated calculations of logical statements <em>unless</em> the truth or falsehood of the result determines which task is next undertaken. <term>Conditional statements</term> are all those statements for which the results of execution depend upon the value of a Boolean variable.
        </p>
    </introduction>

    <subsection xml:id="ss-IP-CE-WL">
        <title>While loops</title>
        <p>
            The first type of conditional statement we will consider is the <q>other</q> kind of iteration: the <c>while</c> loop. The basic structure of a <c>while</c> loop is as a block structure, this time begun by <c>while condition_variable:</c>. So long as <c>condition_variable</c> remains <c>True</c>, the loop will repeat. This makes it trivial to produce an infinite while loop which creates no <em>memory pressure</em> on the system, and just idles along consuming a tiny little fraction of CPU power.
        </p>
        <listing>
            <program>
                <input>
                    while True:
                        None
                </input>
            </program>
            <caption>
                A totally useless <c>while</c> loop which will never terminate, will never do anything, and is utterly useless.
            </caption>
        </listing>
        <p>
            It is <em>extremely easy</em> to <em>accidentally</em> enter an infinite while loop. For example, suppose we want to run a while loop until a certain <term>counter variable</term> reaches a value, increasing by 1 each iteration. This is a great use of the <c>counter += 1</c> operation, which is shorthand for <c>counter = counter + 1</c>.
        </p>
        <sage>
            <input>
                s = ""
                counter = 1
                limit = 100
                while len(s) &lt;= limit:
                    s += str(counter)+" "
                    counter += 1
                print s
            </input>
        </sage>
        <p>
            A common error when using while loops in this way is <em>failure to increment a counter</em>. This is the <c>counter += 1</c> line. What would happen if we left it off? Would the loop run forever, or would something else stop it?
        </p>
        <sage>
            <input>
                s = ""
                counter = 1
                limit = 100
                while len(s) &lt;= limit:
                    s += str(counter)+" "
                print s
            </input>
        </sage>
    </subsection>

    <subsection xml:id="ss-IP-CE-IF">
        <title>If statements</title>
        <p>
            Often we only wish to perform a task if some condition is met. The natural language way that this would be expressed is something like <q>if it is raining when I leave for work, then I wear a hat, otherwise I wear sunglasses.</q> The algorithmic equivalent is available in Sage using <c>if:... else:...</c> blocks. Just like loops, <c>if...:</c> statements are block structures; the block is complete when the level of indentation returns to the same level as the original if statement. For example:
        </p>
        <sage>
            <input>
                s = "This is a string."
                # s = "This really is a string"
                if len(s)%2==0:
                    t='even'
                else:
                    t='odd'
                out = 'The string "{0}" contains an {1} number of characters.'
                print out.format(s,t)
            </input>
        </sage>
        <p>
            It is frequently the case that <c>if</c> blocks need to be nested. Just as often it is the case that when the condition fails, some other condition must be tested. This is carried out using a structure called an <em>else if</em>, written <c>elif</c> in Sage.
        </p>
        <listing>
            <program>
                <input>
                    i = 1
                    while i&lt;20:
                        (q,r) = divmod(i,3)
                        if r==1:
                            rem = " + 1"
                        elif r==2:
                            rem = " - 1"
                            q += 1
                        else:
                            rem = ""
                        print i,'= 3*'+str(q)+rem
                        i += 1


                </input>
            </program>
            <caption>An example of nested conditional statements using the <c>elif</c> structure. What is the output? Try <c>help(divmod)</c>.</caption>
        </listing>
        <exercise>
            <title>A conditional example</title>
            <statement>
                <p>
                    Suppose that we want to set a variable <c>n</c> to some integer value, and depending upon the value of <c>n</c> either print the list of integers <c>[0, 1, 2, ..., n]</c> or the list of integers <c>[n, n+1, n+2, ..., 0]</c>. Copy and complete the code listing to CoCalc!
                </p>
                <listing>
                    <caption>
                        Fix the code!
                    </caption>
                    <program>
                        <input>
                            n = 5
                            if n &gt;= 0:
                                my_list = # Put something here!
                            else:
                                my_list = # Put something here!
                            print my_list
                        </input>
                    </program>
                </listing>
            </statement>
        </exercise>

    </subsection>

</section>
