<section xml:id="sec-Matrices-Multiplication">
    <title>Matrix Multiplication</title>
    <p>
        While multiplying two matrices together is not too much more complicated than either addition or scalar multiplication, we need to be very careful. We also will get to introduce another builtin command, <c>sum</c>.
    </p>
    <definition>
        <statement>
            <p>
                Suppose <m>A</m> is a <m>m\times n</m> matrix and <m>B</m> is a <m>p\times q</m> matrix. Then the <term>matrix product <m>AB</m></term> is defined if and only if <m>n=p</m>. In this case, <m>AB</m> is a <m>m\times q</m> matrix given by
                <me>
                    AB = \left[\sum_{k=0}^n a_{i,k}b_{k,j}\right].
                </me>
            </p>

            <p>
                That is, the element in the <m>i^\text{ th }</m> row and <m>j^\text{ th }</m> column of the product matrix <m>AB</m> is the sum of the element-by-element products of the <m>i^\text{ th }</m> row of <m>A</m> and the <m>j^\text{ th }</m> column of <m>B</m>.
            </p>
        </statement>
    </definition>

    <example>
        <title>Example of matrix multiplication</title>
        <statement>
            <p>
                Suppose we have the following matrices:
                <md alignment="gather">
                    <mrow>
                        <![CDATA[A = \begin{bmatrix} 2 &  3 &  \frac12 \\ 1 & -1 & 0 \end{bmatrix}, &]]>
                        <![CDATA[B = \begin{bmatrix} 3 & 0 & 1 \\ -1 & -1 & 0 \\ 2 & 4 & 6 \end{bmatrix}, &]]>
                        <![CDATA[C = \begin{bmatrix} 1 & 4 \\ \pi & 6 \\ 2 & 1 \end{bmatrix}.]]>
                    </mrow>
                </md>
            </p>

            <p>
                Then <m>A</m> is a <m>2\times 3</m> matrix, <m>B</m> is a <m>3\times 3</m> matrix, and <m>C</m> is a <m>3\times 2</m> matrix. Here are the possible products, and if they exist, the dimensions of the product matrix:
                <!--me>
                    \begin{array}{ccr@{~\to~}l}
                    \textbf{Product} \amp  \textbf{Exists?} \amp  \multicolumn{2}{c}{\textbf{Dimensions}} \\ \toprule
                    AB \amp  \text{ Yes }  \amp  (2\times 3)\cdot(3\times 3)\amp  2\times 3 \\ 
                    BA \amp  \text{ No }   \amp  (3\times 3)\cdot(2\times 3) \amp  \emptyset\\
                    AC \amp  \text{ Yes }  
                    CA \amp  \text{ Yes }  \amp  \\
                    BC \amp  \text{ Yes }  \amp  \\
                    CB \amp  \text{ No }   \amp   \amp  \emptyset
                    \end{array}
                </me-->
            </p>
            <table>
                <caption>Classification of existence and dimensions of product matrices</caption>
                <tabular>
                    <row bottom="major">
                        <cell>Product</cell>
                        <cell>Exists?</cell>
                        <cell>Dimensions</cell>
                    </row>
                    <row>
                        <cell><m>AB</m></cell>
                        <cell>Yes</cell>
                        <cell><m>(2\times 3)\cdot(3\times 3) = 2\times 3</m></cell>
                    </row>
                    <row>
                        <cell><m>BA</m></cell>
                        <cell>No</cell>
                        <cell><m>(3\times 3)\cdot(2\times 3)</m></cell>
                    </row>
                    <row>
                        <cell><m>AC</m></cell>
                        <cell>Yes</cell>
                        <cell><m>(2\times 3)\cdot(3\times 2) =  2\times 2</m></cell>
                    </row>
                    <row>
                        <cell><m>CA</m></cell>
                        <cell>Yes</cell>
                        <cell><m>(3\times 2)\cdot(2\times 3) =  3\times 3</m></cell>
                    </row>
                    <row>
                        <cell><m>BC</m></cell>
                        <cell>Yes</cell>
                        <cell><m>(3\times 3)\cdot(3\times 2) =  3\times 2</m></cell>
                    </row>
                    <row>
                        <cell><m>CB</m></cell>
                        <cell>No</cell>
                        <cell><m>(3\times 2)\cdot(3\times 3)</m></cell>
                    </row>
                </tabular>
            </table>
            <p>
                Since the dimensions of <m>AC</m> and <m>CA</m> are different, we see that even if both <m>AC</m> and <m>CA</m> exist, they need not be equal! This is a simple demonstration of the fact that matrix multiplication is <em>not commutative.</em> So we can see the process of multiplying in action,
                <md>
                    <mrow>
                        AC \amp = 
                        <![CDATA[\begin{bmatrix} 2 & 3 & \frac12 \\ 1 & -1 & 0 \end{bmatrix}]]>
                        <![CDATA[\begin{bmatrix}1 & 4 \\ \pi & 6 \\ 2 & 1 \end{bmatrix}]]>
                    </mrow>
                    <mrow>
                        \amp = 
                        <![CDATA[\begin{bmatrix}]]>
                        <![CDATA[2(1) + 3(\pi) + \frac12(2) & 2(4) + 3(6) + \frac12(1) \\]]>
                        <![CDATA[1(1) - 1(\pi) + 0(2) & 1(4) - 1(6) + 0(1) ]]>
                        <![CDATA[\end{bmatrix}]]>
                    </mrow>
                    <mrow>
                        \amp = 
                        <![CDATA[\begin{bmatrix} 3+3\pi & \frac{53}2 \\ 1-\pi & -2 \end{bmatrix},]]>
                    </mrow>
                </md>
                but in the other order
                <md>
                    <mrow>  
                        CA \amp = 
                        <![CDATA[\begin{bmatrix}1 & 4 \\ \pi & 6 \\ 2 & 1 \end{bmatrix}]]>
                        <![CDATA[\begin{bmatrix} 2 & 3 & \frac12 \\ 1 & -1 & 0 \end{bmatrix}]]>
                    </mrow>
                    <mrow>
                        \amp =
                        <![CDATA[\begin{bmatrix}]]>
                        <![CDATA[1(2) + 4(1) & 1(3) + 4(-1) & 1\left(\frac12\right) + 4(0) \\]]>
                        <![CDATA[\pi(2) + 6(1) & \pi(3) + 6(-1) & \pi\left(\frac12\right) + 6(0) \\]]>
                        <![CDATA[2(2) + 1(1) & 2(3) + 1(-1) & 2\left(\frac12\right) + 1(0)]]>
                        <![CDATA[\end{bmatrix}]]>
                    </mrow>
                    <mrow>
                        \amp = 
                        <![CDATA[\begin{bmatrix} 6 & -1 & \frac92 \\ 6+2\pi & -6+3\pi & \frac{\pi}2 \\ 5 & 5 & 1 \end{bmatrix}.]]>
                    </mrow>
                </md>
            </p>
        </statement>
    </example>

    <p>
        To think about this algorithmically, let's say <m>A</m> is a <m>m\times n</m> matrix and <m>B</m> is a <m>n\times q</m> matrix. Then <m>C = AB</m> is a <m>m\times q</m> matrix; if <m>C = [c_{i,j}]_{m\times q}</m>, then
        <me>
            c_{i,j} = \sum_{k=0}^n a_{i,k}b_{k,j}.
        </me>
    </p>
    <p>
        Hence we must compute the sum of a list of numbers in each entry of our new grid; this is precisely the purpose of the <c>sum</c> command.
    </p>
    <convention>
        <title>Use of the <c>sum</c> command</title>
        <statement>
            The built-in <c>sum(some_list)</c> command returns the arithmetic sum of the elements of the list <c>some_list</c>, and raises an error if they are not all of compatible types.
        </statement>
    </convention>
    <algorithm>
        <title>Matrix multiplication</title>
        <statement>
            <p>
                Suppose <c>self</c> and <c>other</c> are both <c>aam_Matrix</c> objects respectively representing a <m>m\times n</m> matrix and a <m>p\times q</m> matrix.
            </p>
            <ol>
                <li>If <m>n\neq p</m>, raise a <c>ValueError</c> regarding the dimension mismatch.</li>
                <li>Create a new list of lists, with the <m>j^\text{th}</m> element of its <m>i^\text{th}</m> list being the sum of the list consisting of <c>self[i,k]+other[k,j]</c>, where <m>k\in\{1,2,\ldots,n\}</m>.</li>
                <li>Construct a new <c>aam_Matrix</c> from this new list of lists.</li>
            </ol>
        <p>
            With careful use of list comprehensions and the <c>sum</c> command, the new list of lists created in the algorithm may be built in a single command.
        </p>
        </statement>
    </algorithm>
                <exercise>
                <title>Implementing matrix multiplication</title>
                <statement>
                    <p>Complete the following code for matrix multiplication.</p>
                    <listing>
                        <program>
                            <input>
                                class aam_Matrix:
                                    ...
                                    def __mul__(self, other):
                                        """ Implement self * other in the aam_Matrix class."""
                                        try:
                                            N(other) #This will raise an error if other is of a non-numeric type.
                                            <!--new_grid = [[other*self[i,j] for j in [1..self.col_dim]] for i in [1..self.row_dim]]-->
                                            """
                                            In this space, build an object new_grid containing the correct data 
                                            and structure to make the next command returning aam_Matrix(new_grid)
                                            succeed. You should have already done this in the previous section.
                                            """
                                            return aam_Matrix(new_grid)
                                        except TypeError:
                                            if type(other)==type(self):
                                                (m,n) = self.dims()
                                                (p,q) = other.dims()
                                                if n != p:
                                                    raise ValueError('Dimension mismatch - left matrix dimensions '+\
                                                        str( (m,n) ) + ' but right matrix dimensions '+str( (p,q) )+'.')
                                                    """
                                                    In this space, build an object new_grid containing the correct 
                                                    data and structure to make the next command returning 
                                                    aam_Matrix(new_grid) succeed.
                                                    """
                                                <!--else:
                                                    """
                                                    Replace this multiline comment with a careful definition of new_grid
                                                    so that the following line, return aam_Matrix(new_grid), successfully
                                                    builds the matrix product.
                                                    """
                                                    new_grid = [[sum([self[i,j]*other[j,k] for j in [1..n]]) for k in [1..q]] for i in [1..m]]
                                                    return aam_Matrix(new_grid)-->
                                                return aam_Matrix(new_grid)
                                            else:
                                                raise TypeError('Matrix multiplication by '+str(type(other)) + \
                                                    ' objects is not defined.')
                            </input>
                        </program>
                        <caption>
                            A partial code for the <c>__mul__</c> method in class <c>aam_Matrix</c>.
                        </caption>
                    </listing>
                </statement>
            </exercise>
    <!--p>
        So for each pair <c>i,j</c> where <c>i in range(m)</c> and <c>j in range(q)</c> we will need to take the sum over a list <c>[A[i,k] * B[k,j] for k in range(n)]</c>. This is precisely the result of the <c>sum</c> command: it computes the sum of numbers in a list. The most efficient way to implement this is as a list comprehension of a list comprehension of a sum of a list comprehension!
        Here's an updated form of <c>Matrix.__mul__</c>, again with the list comprehension for <c>new_grid</c> missing.
    </p-->
    <!--pre>
        def __mul__(self, other):
        mult_err = 'Matrices may only be multiplied by scalars, or '+\
        'by matrices of appropriate dimensions.'
        if type(self) == type(other): # matrix multiplication
        m,n = self.dims()
        p,q = other.dims()
        if n != p:
        raise ValueError(mult_err)
        new_grid = """AN IMPORTANT PIECE IS MISSING RIGHT HERE!!""" # &lt;======
        return Matrix(new_grid)
        elif type(other) in [type(1), type(0.1)]: # scalar multiplication
        new_grid = """AN IMPORTANT PIECE IS MISSING RIGHT HERE!!""" # &lt;======
        return Matrix(new_grid)
        else:
        raise TypeError(mult_err)
    </pre>
    <exercise>
        <statement>
            <p>
                Finish the implementation of <c>Matrix.__mul__</c> to enable matrix multiplication. Save it in <c>Matrix.py</c>.
            </p>
        </statement>
    </exercise-->
</section>
