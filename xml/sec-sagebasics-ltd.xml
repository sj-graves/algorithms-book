<section xml:id="s-SB-LTD">
    <title>Lists, tuples, and dictionaries</title>
    <introduction>
        <p>
            Our next three compound data types are related to strings in that they are all <term>container</term> data types. First of these, <term>lists</term> are <em>mutable</em> containers of arbitrary data. These are represented by the <c>list</c> data type, conveniently. A mathematical object much like the list is the <term>tuple</term>, an ordered finite sequence. However the <c>tuple</c> data type is <em>immutable</em>. Finally we will discuss <term>dictionaries</term>, of the type <c>dict</c>, which is a mutable data type which can be indexed using many different data types, not just integers.
        </p>
    </introduction>
    <subsection>
        <title>Syntax of lists and tuples</title>
        <p>
            It is uncomplicated to put data into a list or tuple in Sage. A <c>list</c> variable consists simply of a comma-separated list of values enclosed in square brackets; the values which may be so enclosed may even include other lists! A <c>tuple</c> is similar, being a comma-separated list of values enclosed in parentheses. Elements of each can be read by slicing and indexing exactly as with strings.
        </p>
        <sage>
            <input>
                foo = 'this is a string'
                bar = [1, 2, foo, [5, 5, 5]]
                larry = (5, 4, bar, foo, 1)
                nancy = (1, )
                esmerelda = [2] 
                empty_list = []
                empty_tuple = tuple([])
                
                print bar
                print bar[-2:]
                print larry, nancy, esmerelda
                print empty_list, empty_tuple
            </input>
        </sage>
        <p>
            We have some more interesting points to note in the above example: first, we can treat a data type as a function, and doing so attempts to <term>coerce</term> the input argument into the specified data type. Hence <c>tuple([])</c> produces a tuple containing 0 elements. Likewise, we must be careful to include a comma if we wish to create a single-element <c>tuple</c>, since the default behavior of parentheses is <term>association</term>, much like in mathematical notation. That is, we don't generally consider <m>(x)</m> to be a 1-tuple whose first coordinate is <m>x</m>, but rather consider it to be the variable <m>x</m> associated with nothing else.
        </p>
        <p>
            Finally, let's demonstrate that a <c>list</c> is mutable but a <c>tuple</c> is not.
        </p>
        <sage>
            <input>
                bob = [1,2,3,5,5]
                larry = (5,3,3,2,1)
                
                bob[3] = 4
                print bob
                
                larry[1] = 4
                print larry
            </input>
        </sage>
    </subsection>


    <subsection>
        <title>Operations and methods</title>
        <p>
            Since it makes as much sense to concatenate and repeat lists or tuples as it does strings, we first see that addition and integer multiplication behave sensibly for lists and tuples.
        </p>
        <sage>
            <input>
                bob = [1, 3, 2, 5, 4]
                larry = (1, 2, 'bob')
                
                print bob + list(larry)
                print larry + tuple(bob)
            </input>
        </sage>
        <p>
            Let's see the list of methods available for <c>list</c>.
        </p>
        <sage>
            <input>
                bob = [1,6,2,6,1,8,9]
                help(bob)
            </input>
        </sage>
        <p>
            We see here we can get help not just by typing <c>help(list)</c> but by typing <c>help(bob)</c> when <c>bob</c> is a list. Let's take a moment to discuss all those strange methods with underscores in their names. For instance, the first <c>list</c> method is <c>__add__(...)</c> which seems to somehow implement addition. These are <term>operator methods</term>, which are used not by typing <c>x.__add__(y)</c> but instead by <c>x + y</c>. These methods provide the definitions for operators which are actually used by the syntax of a special Sage <em>token</em> like <c>+</c> or <c>in</c>.
        </p>
        <p>
            We should notice two special methods, <c>reverse</c> and <c>sort</c>, both of which describe the behavior as an <c>*IN PLACE*</c> behavior. What this means is that <c>bob.reverse()</c> actually reverses the order of the items in the list <c>bob</c> and then <em>overwrites the value of <c>bob</c> with that reversed-order version</em>! Likewise <c>bob.sort()</c> actually changes the order of elements of the list <c>bob</c>.
        </p>
    </subsection>
    <subsection>
        <title>Dictionaries</title>
        <p>
            Sometimes it is justifiable that a compound data type be indexed non-numerically. For instance, you might want to store a variable <c>professor</c> which contains the name, office number, and emaril address of your Algorithms professor. Which of those three is naturally the <m>0^\text{th}</m> element of your professor? Since there's not necessarily one right answer to that question, we might instead want to have a variable <c>professor</c> indexed by the strings <c>"name"</c>, <c>"office"</c>, and <c>"email"</c>. The syntax for a dictionary, with type <c>dict</c>, is as follows:
        </p>
        <sage>
            <input>
                professor = {"name":"Stephen Graves", "office":"RBN 4011", "email":"sgraves@uttyler.edu"}
                print professor['name']
            </input>
        </sage>
        <p>
            In this example, the variable is named <c>professor</c> and is a dictionary with <term>keys</term> (<c>"name"</c>, <c>"office"</c>, and <c>"email"</c>) and <term>values</term> (<c>"Stephen Graves"</c>, <c>"RBN 4011"</c>, and <c>"sgraves@uttyler.edu"</c>). In effect, a dictionary in Sage is very much like a function whose finite domain is its set of keys and whose image is its set of values. In order for a value to be a key for a <c>dict</c>, it must be a <term>hashable</term> value, which effectively means it is immutable and has a unique representation: for these reasons, keys are often strings, numbers, or tuples.
        </p>
    </subsection>
</section>
