<section xml:id="sec-SageBasics-Interactive">
    <title>Interactive modes</title>
    <introduction>
        <p>
            There are two ways we discuss in this text to use Sage interactively. The primary method you should use is <url href="http://cocalc.com">CoCalc</url>, within <c>.sagews</c> files. This allows you to save your work. I will refer constantly to CoCalc.</p>
        <p>
            The secondary method, the embedded Sage cell, is mainly for readers who are accessing this book in its online format. In a print format these will occur as code snippets with or without output; in most cases online these will be executable code.
        </p>
        <p> Let's briefly discuss these in reverse order.
        </p>
    </introduction>

    <subsection>
        <title>Sage cells</title>
        <p> Below is a small example of an interactive sage cell. To evaluate the code, you can either click the <q>Evaluate Sage Code</q> button, or click inside the cell (to get a cursor inside it) and then press Shift+Enter.</p>
        <sage>
            <input>
                x = 13
                print (x**2==x^2)
            </input>
            <output>
                True
            </output>
        </sage>
        <p>
            We'll use these frequently, especially when I want you to repair some broken code. Did you notice the <c>print</c> command in this cell? Using the <c>print</c> command is the only way to see anything other than the last line of output in a Sage cell. This is not the case for CoCalc: in CoCalc, every<fn>Not really every line shows up, but for now this is true.</fn> line of output will show up, even if you don't use <c>print</c>. 
        </p>
        <p>
            There will frequently be code which you are expected to try yourself, and occasionally the code will use a feature of CoCalc which is not implemented in regular Sage. Whenever there is code which is extremely important to try yourself, it will be provided as a code listing rather than an interactive Sage cell:
        </p>
        <listing>
            <title>Example of a code listing</title>
            <caption>An example of a code listing which cannot be evaluated in-place.</caption>
            <program>
                <input>
                    x = var('x')
                    y = function('y')(x)
                    dy = diff(y,x)
                </input>
            </program>
        </listing>

    </subsection>

    <subsection>
        <title>CoCalc</title>
        <p>
            There's not really enough good to say about using CoCalc for your examples instead of the embedded Sage cells, but let me summarize.
        </p>
        <ol>
            <li> All your work is saved in the cloud.</li>
            <li> CoCalc is cheap, even for long-term ongoing use. It can be free if you're not concerned about server reliability.</li>
            <li> Since CoCalc runs on Linux, you can run all of the built-in software packages (Python, R, Octave, Maxima, etc.) from the command line <em>inside</em> your CoCalc account.</li>
            <li> CoCalc has built-in course management which is pretty great for collecting (unsurprisingly) Sage-based work. </li>
            <li> CoCalc can be collaborative, with many people working on projects (and contributing upgrades to those projects). </li>
            <li> All your work is <em>saved in the cloud!!!</em> If need be, you can write code on a smart phone - I don't actually recommend you do this, though, as you'll often want a full keyboard and mouse interface. Nonetheless, every computer with internet access and a modern web browser becomes a functional workstation for computational mathematics with no extra installation necessary!
            </li> 
        </ol>
    </subsection>

</section>
