<section xml:id="sec-PublicKey-KidRSA">
    <title>Kid RSA</title>


    <introduction>
        <p>
            As an introduction to the RSA algorithm, modular multiplication can be used to greatly simplify the calculation process; the trade-off is that the algorithm becomes susceptible to a very well-known mathematical attack. The only <em>shared secret</em> in using Kid RSA is the method of converting strings into integers.
        </p>
    </introduction>


    <subsection>
        <title>Key Generation</title>
        <p>
            The first step of a public key cryptography algorithm is the generation of the public and private keys.
        </p>
        <algorithm xml:id="alg_kidRSA_keygen">
            <title>Kid RSA Key Generation</title>
            <statement>
                <p>
                    Let <m>a,b,a',b'\in \mathbb{Z}</m> be arbitrary positive integers.
                    Define
                    <md>
                        <mrow>  M \amp = ab-1</mrow>
                        <mrow>  e \amp = a'M+a</mrow>
                        <mrow>  d \amp = b'M+b</mrow>
                        <mrow>  n \amp = (ed-1)/M = a'b'M+ab'+a'b+1</mrow>
                    </md>
                </p>

                <p>
                    The public key is the ordered pair <m>(n,e)</m>; the private key is the ordered pair <m>(n,d)</m>.
                </p>
            </statement>
        </algorithm>
        <p>
            Having a public key generated and shared, a user can now wait for an encrypted message to arrive.
        </p>

        <example>
            <title>Generating Kid-RSA keys</title>
            <statement>
                <p>
                    Suppose we choose
                    <md>
                        <mrow>  a \amp = 5 \amp  b \amp = 25 \amp  a' \amp = 7 \amp  b' \amp = -49.</mrow>
                    </md>
                </p>

                <p>
                    Following <xref ref="alg_kidRSA_keygen" autoname="title" />, we obtain
                    <md>
                        <mrow>  M \amp = 5(25)-1 = 124</mrow>
                        <mrow>  e \amp = 7(124)+5 = 873</mrow>
                        <mrow>  d \amp = 49(124)+25 = 6101</mrow>
                        <mrow>  n \amp = (873(6101)-1)/124 = 42953</mrow>
                    </md>
                </p>

                <p>
                    Hence our public key is <m>(42953, 873)</m>, and our private key is <m>(42953, 6101)</m>.
                </p>
            </statement>
        </example>

        <p>
            Keys in hand, we now need to actually encrypt a message <mdash /> the power and allure of RSA and this easier variant is that the encryption function is mathematically simple.
        </p>
        <algorithm>
            <title>Kid RSA Encryption</title>
            <statement>
                <p>
                    Suppose <m>(n,e)</m> and <m>(n,d)</m> are respectively public and private Kid RSA keys. If <m>m</m> is an integer representing a single character of a plaintext message, then the associated encrypted integer is
                    <me>
                        c = (me)\text{ mod } n.
                    </me>
                </p>

                <p>
                    Likewise, if <m>c</m> is an encrypted integer, then the associated decrypted integer is
                    <me>
                        d= (cd)\text{ mod } n.
                    </me>
                </p>
            </statement>
        </algorithm>
        <p>
            It should be clear that since <m>(0x)\text{ mod } n=0</m> for every pair of <m>n,x</m>, we should avoid coding any letter as the integer 0.
        </p>

        <example>
            <title>Using Kid-RSA</title>
            <statement>
                <p>
                    Continuing our previous example, we have public key <m>(42953, 873)</m>. Suppose we remove punctuation and spaces from the message written in a 1676 letter from Isaac Newton to Robert Hooke:
                </p>
                <blockquote>
                    If I have seen further it is by standing on the shoulders of giants.
                </blockquote>
                <p>
                    We will convert to a list of integers by simply using the Python <c>ord</c> command.
                </p>
                <listing>
                    <program>
                        <input>
                            newt = "If I have seen further it is by standing on the shoulders of giants."
                            inewt = [ord(c) for c in newt]
                            print inewt
                        </input>
                    </program>
                </listing>
                <p>
                    We now apply the Kid-RSA algorithm.
                </p>
                <listing>
                    <program>
                        <input>
                            newt = "If I have seen further it is by standing on the shoulders of giants."
                            inewt = [ord(c) for c in newt]
                            # Here's our public key from up above
                            (n,e) = (42953, 873)
                            enc_newt = [(m*e)%n for m in inewt]
                            print enc_newt
                        </input>
                    </program>
                </listing>
                <p>
                    As a simple demonstration that the method truly works, let's finish out by decrypting.
                </p>
                <listing>
                    <program>
                        <input>
                            newt = "If I have seen further it is by standing on the shoulders of giants."
                            inewt = [ord(c) for c in newt]
                            # Here's our public key from up above
                            (n,e) = (42953, 873)
                            enc_newt = [(m*e)%n for m in inewt]

                            # Here's our private key to check our decryption.
                            d = 6101

                            print "".join([chr((c*d)%n) for c in enc_newt])
                        </input>
                    </program>
                </listing>
            </statement>
        </example>
    </subsection>


    <subsection>
        <title>Breaking Kid RSA</title>
        <p>
            Unfortunately, it is number-theoretically trivial to break Kid RSA. Consider the values <m>n</m>, <m>d</m>, and <m>e</m> used by the encryption. It must be the case that
            <me>
                ((me)\text{ mod }n)d\text{ mod } n = m,
            </me>
            but then <m>e</m> and <m>d</m> must be multiplicative inverses modulo <m>n</m>. A number <m>e\in \mathbb{Z}_n</m> only has a multiplicative inverse when <m>\gcd(e,n)=1</m>. This leads to an efficient expansion of Euclid's algorithm for the Greatest Common Divisor to recover the value of <m>d</m>.
        </p>

        <theorem>
            <statement>
                <p>
                    Suppose <m>a,b</m> are positive integers, such that <m>a=bq+r</m> with <m>0\leq r\lt b</m>. Then <m>\gcd(a,b) = \gcd(b,r)</m>.
                </p>
            </statement>
        </theorem>

        <theorem>
            <statement> 
                Let <m>a,b\in \mathbb{Z}</m>. Then there exist <m>s,t\in \mathbb{Z}</m> such that <m>as+bt = \gcd(a,b)</m>.
            </statement>
        </theorem>
        <corollary>
            <statement>
                Let <m>a,b\in \mathbb{Z}</m> with <m>\gcd(a,b)=1</m>. Then if there is some <m>k\in \mathbb{Z}</m> such that <m>as+bt = ka+1</m>, then <m>t= b^{-1}\text{ mod }a</m>.
            </statement>
        </corollary>
        <p>
            The combination of these two theorems and the corollary provide our extended version of Euclid's algorithm.
        </p>
        <example>
            <title>Extending Euclid's Algorithm to find Inverses</title>
            <statement>
                <p>
                    This process is straightforward application of the theory. We first make some strange assumptions about parameters: <m>s_{-1}=0</m> and <m>t_{-1}=1</m>. For <m>i\geq 0</m>, we will insist that <m>r_i = s_ia+t_ib</m>.
                    <md>
                        <mrow> 
                            i \amp =0 \amp 
                            a \amp= q_0 b + r_0 \amp 
                            r_0 \amp= 1\cdot a-q_0b \amp 
                            s_0 \amp= 1 \amp 
                            t_0 \amp= -q_0 
                        </mrow>
                        <mrow>
                            i \amp= 1 \amp
                            b \amp = q_1r_0 + r_1 \amp
                            r_1 \amp = b-q_1r_0
                        </mrow>
                        <mrow>
                            \amp<nbsp/> \amp
                            \amp<nbsp/> \amp
                            \amp= b-q_1(a-q_0)b
                        </mrow>
                        <mrow>
                            \amp<nbsp/> \amp
                            \amp<nbsp/> \amp
                            \amp=-q_1a+(1+q_0q_1)b \amp
                            s_1 \amp= -q_1 \amp
                            t_1 \amp= 1+q_0q_1
                        </mrow>
                        <intertext>
                            <p>
                                While the pattern is not clearly established at this point, it is the case that <m>s_1 = s_{-1}-q_1s_0</m> and <m>t_1=t_{-1}-q_1t_0</m>; this pattern will be more clear as we proceed.
                            </p>
                        </intertext>
                        <mrow>
                            i \amp= 2 \amp
                            r_0 \amp= q_2r_1 + r_2 \amp
                            r_2 \amp= r_0 - q_2r_1
                        </mrow>
                        <mrow>
                            \amp<nbsp/> \amp
                            \amp<nbsp/> \amp
                            \amp= (s_0a-t_0b)-q_2(s_1 a+t_1 b)
                        </mrow>
                        <mrow>
                            \amp<nbsp/> \amp
                            \amp<nbsp/> \amp
                            \amp= (s_0-q_2s_1)a+(t_0-q_2 t_1)b \amp
                            s_2 \amp= s_0-q_2s_1 \amp
                            t_2 \amp= t_0-q_2t_1
                        </mrow>
                        <intertext>
                            In general,
                        </intertext>
                        <mrow>
                            i \amp<nbsp/> \amp
                            r_{i-2} \amp= q_i r_{i-1}+r_i \amp
                            r_i \amp= (s_{i-2}a+t_{i-2}b)-q_i(s_{i-1}a+t_{i-1}b)
                        </mrow>
                        <mrow>
                            \amp<nbsp/> \amp
                            \amp<nbsp/> \amp
                            \amp = (s_{i-2}-q_is_{i-1})a+(t_{i-2}-q_it_{i-1})b \amp
                            s_i \amp= s_{i-2}-q_is_{i-1} \amp
                            t_i \amp= t_{i-2}-q_it_{i-1}
                        </mrow>
                    </md>
                </p>
                <p>
                    As the process is to continue until <m>r_{n+1}=0</m>, at which point <m>r_n=\gcd(a,b)</m>, we recognize that there are necessarily recursively determined sequences <m>\set{s_i:i=-1,0,1,\dotsc,n+1}</m> and <m>\set{t_i:i=-1,0,1,\dotsc,n+1}</m> such that <m>r_n=s_na+t_n b</m>. However, we are interested in the case when <m>\gcd(a,b)=1</m>, which is to say that <m>1=s_na+t_nb</m>; but then <m>-s_na+1 = t_n b</m>, so in modular arithmetic we see that <m>t=b^{-1}\text{ mod }a</m> as desired.
                </p>
            </statement>
        </example>
        <p>
            The practical effect of this is that a full calculation of Euclid's algorithm with one nontrivial addition also gives the ability to break the KidRSA encryption.
        </p>
<!--         <algorithm>
            <statement>
                <title>Extended Euclidean Algorithm</title>
                <p>
                    Let <m>s>t</m> be positive integers.
                </p>

                <ol>
                    <li><p>Set <c>a = [s]</c>, <c>b = [t]</c>, <c>q = [a//b]</c>, <c>r = [a%b]</c>, and <c>p = [0,1]</c>.</p></li>
                    <li><p>While the last element of <c>r</c> is nonzero:
                        </p>

                        <ol>
                            <li><p>Append the last element of <c>b</c> to <c>a</c>.</p></li>
                            <li><p>Append the last element of <c>r</c> to <c>b</c>.</p></li>
                            <li><p>Append the quotient of those values to <c>q</c>.</p></li>
                            <li><p>Append the remainder of those values to <c>r</c>.</p></li>
                            <li><p>Append to <c>p</c> the value <c>(p[-2]-q[-2]*p[-1]) % s</c>.</p></li>
                        </ol>
                    </li>
                    <li><p>When the loop terminates, <c>p[-1]</c> is <m>t^{-1}</m> in <m>\mathbb{Z}_s</m>, and <m>\gcd{(s,t)}</m> is <c>r[-2]</c>.</p></li>
                </ol>
            </statement>
        </algorithm> -->

        <example>
            <title>Cracking Kid-RSA</title>
            <statement>
                <p>
                    PRactically, we need only track the sequence of successive products of <m>e</m> in the calculation of the extended algorithm for <m>\gcd(n,e)</m>. Applying the algorithm for our public key <m>(42953,873)</m>, we have:
                    <md>
                        <mrow>  \amp \amp   t_{-1} \amp = 0</mrow>
                        <mrow>  42953 \amp = 49(873)+176 \amp  t_0 \amp = 1</mrow>
                        <mrow>  873 \amp = 4(176)+169    \amp  t_1 = (0-1(49))\text{ mod } 42953 \amp = 42904</mrow>
                        <mrow>  176 \amp = 1(169)+7      \amp  t_2 = (1-42904(4))\text{ mod } 42953 \amp = 197</mrow>
                        <mrow>  169 \amp = 24(7)+1       \amp  t_3 = (42904-197(1))\text{ mod } 42953 \amp = 42707</mrow>
                        <mrow>  7 \amp = 7(1)+0          \amp  t_4 = (197-42707(24))\text{ mod } 42953 \amp = 6101</mrow>
                    </md>
                </p>

                <p>
                    But we had <m>d=6101</m>, so our decryption is broken. Applying
                    <me>
                        f(c) = (6101\cdot c)\text{ mod } 42953
                    </me>
                    to each integer <m>c</m> in the list of encrypted integers, we recover the original list.
                </p>
            </statement>
        </example>
    </subsection>

</section>
