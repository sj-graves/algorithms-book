<section xml:id="sec-ListsIteration-Comprehension">
    <title>Power tool: list comprehension</title>
    <introduction>
        <p>
            Suppose you had a list <c>foo</c> of numbers, and you wanted to set <c>bar</c> equal to the list of their squares. We could easily perform this task with a for loop and the <c>append</c> list method, which adds the argument to the end of the list.
        </p>
        <sage>
            <input>
                foo = [1, 3, 5, 7, 9]
                bar = []
                for x in foo:
                bar.append(x^2)
                print bar
            </input>
        </sage>
        <p>
            However, Sage provides a much more elegant way to do the same thing, called <em>list comprehension</em>. Essentially this provides a way to create a list by successively performing the same operation (in this case squaring) on all the elements of another list.
        </p>
        <sage>
            <input>
                foo = [1,3,5,7,9]
                bar = [x^2 for x in foo]
                print bar
            </input>
        </sage>
        <p>
            This is a trivial example; here's an example which is more interesting.
        </p>
        <example xml:id="exmp-ListComprehension">
            <p> 
                While we know from Calculus that the best way to calculate the area between a curve <m>\set{(x,f(x)):a\leq x\leq b, f(x)\geq 0}</m> is to use the definite integral <m>\int_a^b f(x)\,dx</m>, we also know that <me>\int_a^b f(x)\,dx = \lim_{n\to\infty} \sum_{i=1}^n f(x_i^*)\Delta x_i.</me>
                We can quickly approximate the Riemann sum on the right using lists and list comprehensions; leveraging the power of Sage as a full symbolic mathematics system, we can even go so far as to easily draw the approximating rectangles where <m>x_i^* = x_i</m>.
            </p>
            <listing>
                <caption>Approximating a definite integral with Riemann sums
                </caption>
                <program>
                    <input>
                        n=10
                        # generate a list of points on the curve y=x^2
                        points = [(x,x^2) for x in [i/n for i in range(n+1)]]

                        # generate a list of coordinates of the corners of the approximating rectangles
                        recs = [[(x-1/n,0),(x-1/n,y),(x,y),(x,0)] for x,y in points[1:]]

                        # calculate a list of the areas of each rectangle
                        areas = [y/n for x,y in points[1:]]

                        # create containing the Graphics objects for each rectangle
                        plot_list = [polygon(coords, fill=False) for coords in recs]

                        # use Sage to plot the function y=x^2 on the interval [0,1]
                        out_plot = plot(var('x')^2,(var('x'),0,1),color='red')

                        total_area = 0
                        for i,p in enumerate(plot_list):
                        total_area += areas[i]
                        out_plot += p
                        show(out_plot, aspect_ratio=1)
                        show("Approximate area is " + str(round(total_area,2)))
                    </input>
                </program>
            </listing>
            <p> Try to modify the above code until you get a picture like this:</p>
            <image source="images/li-riemann_sum.svg"/>



        </example>
    </introduction>
    <subsection xml:id="sec-ListsIteration-Comprehension-Nested">
        <p> <em>Nested list comprehension</em> is a very important tool for producing "legible code" in Sage or Python, because it provides a way to remove nested for loops. Compare the following two programs which result in identical output.
        </p>
        <sage>
            <input>
                foo = []
                for i in range(10):
                bar = []
                for j in range(i):
                bar.append(j^2)
                foo.append(bar)
                print foo
            </input>
        </sage>
        <sage>
            <input>
                foobar = [[j^2 for j in range(i)] for i in range(10)]
                print foobar
            </input>
        </sage>
        <p>The second of these examples shows the nesting of list comprehesions.</p>
    </subsection>
</section>
