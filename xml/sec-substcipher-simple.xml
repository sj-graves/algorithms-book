<section xml:id="sec-SubstCipher-MonoAlph">
    <title>Simple substitution</title>


    <introduction>
        <p>
            Also called <em>monoalphabetic substitution</em>, these are among the easiest encryptions to break. A simple substitution cipher employs a single permutation of the symbol set to encrypt the plaintext. The <em>Caesar cipher</em> is one of the earliest known uses: in an alphabet of size <m>n</m>, the permutation for Julius Caesar's cipher was <me>\sigma(x) = (x+3)\mod n</me>. For Caesar's military dispatches, the permutation would have been
        </p>
        <image source="./images/caesar_cipher.svg" width="100%" />
        <p>
            Since <m>26\equiv 1 \mod 3</m>, this permutation <m>\sigma_1</m> would be written as a single <m>26</m>-cycle in disjoint cycle notation.
        </p>

        <p>
            Generally speaking, we'll call an encryption of this type either a <em>shift cipher</em> or a <em>rotation cipher</em>; another frequently used rotation cipher is called ROT13, and is given by
        </p>
        <image source="./images/ROT13_cipher.svg" width="100%" />
        <p>
            Since ROT13 is an involution<fn>A permutation <m>\sigma</m> is an involution if and only if <m>\sigma^2=(1)</m>.</fn>, it is used as the canonical example of weak encryption; it was commonly used online in usenet newsgroups during the early 1980s to obscure text such as <q>spoilers,</q> punchlines to jokes, or obscene language.
        </p>
    </introduction>

    <subsection>
        <title>Breaking monoalphabetic substitution</title>
        <introduction>
            <p>
                The sad fact of such an encryption is that there are just too few permutations of 26
                symbols if input text is to look like <q>random noise</q> after encryption. The number
                of permutations of 26 symbols is easy to calculate:
                <me>26! = 403291461126605635584000000</me>. This might look fine, but many, many of
                those permutations leave too many letters fixed to be useful as encryptions. For
                instance, <m>7893600</m> of those permutations leave all but 5 symbols fixed. Moreover,
                these encryptions are very susceptible to <em>frequency analysis</em>.
            </p>
        </introduction>

        <subsubsection>
            <title>Frequency analysis</title>
            <p>
                The plain fact of language from a statistical viewpoint is this: some letters are used more frequently than others. In fact, depending upon the type of documents being analyzed, a good starting point for English is the string <q>ETAOIN SHRDLU</q>. In many documents, this is the approximate order of the most frequently occurring twelve letters. So a good guess for decrypting a given document is to assume the most frequently occurring letter represents <q>E</q>, then next <q>T</q>, and so on. Consider the following extended example:
            </p>
            <sage>
                <input>
                    ciphertext = """CPZLKLYPZDONISZOEPNWTLZXZLYSKYFZDOWZSLZDZSSTIVEOIOLZBZOBHZYOQKSSOHXZYPZBOHKYKDTHFOLQSCPKDPPTXZDOLLZDYZQYPZWCKYPTLOYPZITLQYOTSSNWZTWOLRYPZBOCZISOEYPZZTIYPYPZSZBTITYZTLQZGNTHSYTYKOLYOCPKDPYPZHTCSOELTYNIZTLQOELTYNIZSROQZLYKYHZYPZWTQZDZLYIZSBZDYYOYPZOBKLKOLSOEWTLUKLQIZGNKIZSYPTYYPZVSPONHQQZDHTIZYPZDTNSZSCPKDPKWBZHYPZWYOYPZSZBTITYKOLCZPOHQYPZSZYINYPSYOFZSZHEZXKQZLYYPTYTHHWZLTIZDIZTYZQZGNTHYPTYYPZVTIZZLQOCZQFVYPZKIDIZTYOICKYPDZIYTKLNLTHKZLTFHZIKRPYSYPTYTWOLRYPZSZTIZHKEZHKFZIYVTLQYPZBNISNKYOEPTBBKLZSSYPTYYOSZDNIZYPZSZIKRPYSROXZILWZLYSTIZKLSYKYNYZQTWOLRWZLQZIKXKLRYPZKIMNSYBOCZISEIOWYPZDOLSZLYOEYPZROXZILZQYPTYCPZLZXZITLVEOIWOEROXZILWZLYFZDOWZSQZSYINDYKXZYOYPZSZZLQSKYKSYPZIKRPYOEYPZBZOBHZYOTHYZIOIYOTFOHKSPKYTLQYOKLSYKYNYZLZCROXZILWZLYHTVKLRKYSEONLQTYKOLOLSNDPBIKLDKBHZSTLQOIRTLKJKLRKYSBOCZISKLSNDPEOIWTSYOYPZWSPTHHSZZWWOSYHKUZHVYOZEEZDYYPZKISTEZYVTLQPTBBKLZSSBINQZLDZKLQZZQCKHHQKDYTYZYPTYROXZILWZLYSHOLRZSYTFHKSPZQSPONHQLOYFZDPTLRZQEOIHKRPYTLQYITLSKZLYDTNSZSTLQTDDOIQKLRHVTHHZABZIKZLDZPTYPSPOCLYPTYWTLUKLQTIZWOIZQKSBOSZQYOSNEEZICPKHZZXKHSTIZSNEEZITFHZYPTLYOIKRPYYPZWSZHXZSFVTFOHKSPKLRYPZEOIWSYOCPKDPYPZVTIZTDDNSYOWZQFNYCPZLTHOLRYITKLOETFNSZSTLQNSNIBTYKOLSBNISNKLRKLXTIKTFHVYPZSTWZOFMZDYZXKLDZSTQZSKRLYOIZQNDZYPZWNLQZITFSOHNYZQZSBOYKSWKYKSYPZKIIKRPYKYKSYPZKIQNYVYOYPIOCOEESNDPROXZILWZLYTLQYOBIOXKQZLZCRNTIQSEOIYPZKIENYNIZSZDNIKYVSNDPPTSFZZLYPZBTYKZLYSNEEZITLDZOEYPZSZDOHOLKZSTLQSNDPKSLOCYPZLZDZSSKYVCPKDPDOLSYITKLSYPZWYOTHYZIYPZKIEOIWZISVSYZWSOEROXZILWZLYYPZPKSYOIVOEYPZBIZSZLYUKLROERIZTYFIKYTKLKSTPKSYOIVOEIZBZTYZQKLMNIKZSTLQNSNIBTYKOLSTHHPTXKLRKLQKIZDYOFMZDYYPZZSYTFHKSPWZLYOETLTFSOHNYZYVITLLVOXZIYPZSZSYTYZSYOBIOXZYPKSHZYETDYSFZSNFWKYYZQYOTDTLQKQCOIHQPZPTSIZENSZQPKSTSSZLYYOHTCSYPZWOSYCPOHZSOWZTLQLZDZSSTIVEOIYPZBNFHKDROOQPZPTSEOIFKQQZLPKSROXZILOISYOBTSSHTCSOEKWWZQKTYZTLQBIZSSKLRKWBOIYTLDZNLHZSSSNSBZLQZQKLYPZKIOBZITYKOLYKHHPKSTSSZLYSPONHQFZOFYTKLZQTLQCPZLSOSNSBZLQZQPZPTSNYYZIHVLZRHZDYZQYOTYYZLQYOYPZWPZPTSIZENSZQYOBTSSOYPZIHTCSEOIYPZTDDOWWOQTYKOLOEHTIRZQKSYIKDYSOEBZOBHZNLHZSSYPOSZBZOBHZCONHQIZHKLGNKSPYPZIKRPYOEIZBIZSZLYTYKOLKLYPZHZRKSHTYNIZTIKRPYKLZSYKWTFHZYOYPZWTLQEOIWKQTFHZYOYVITLYSOLHVPZPTSDTHHZQYORZYPZIHZRKSHTYKXZFOQKZSTYBHTDZSNLNSNTHNLDOWEOIYTFHZTLQQKSYTLYEIOWYPZQZBOSKYOIVOEYPZKIBNFHKDIZDOIQSEOIYPZSOHZBNIBOSZOEETYKRNKLRYPZWKLYODOWBHKTLDZCKYPPKSWZTSNIZSPZPTSQKSSOHXZQIZBIZSZLYTYKXZPONSZSIZBZTYZQHVEOIOBBOSKLRCKYPWTLHVEKIWLZSSPKSKLXTSKOLSOLYPZIKRPYSOEYPZBZOBHZPZPTSIZENSZQEOITHOLRYKWZTEYZISNDPQKSSOHNYKOLSYODTNSZOYPZISYOFZZHZDYZQCPZIZFVYPZHZRKSHTYKXZBOCZISKLDTBTFHZOETLLKPKHTYKOLPTXZIZYNILZQYOYPZBZOBHZTYHTIRZEOIYPZKIZAZIDKSZYPZSYTYZIZWTKLKLRKLYPZWZTLYKWZZABOSZQYOTHHYPZQTLRZISOEKLXTSKOLEIOWCKYPONYTLQDOLXNHSKOLSCKYPKLPZPTSZLQZTXOIZQYOBIZXZLYYPZBOBNHTYKOLOEYPZSZSYTYZSEOIYPTYBNIBOSZOFSYINDYKLRYPZHTCSEOILTYNITHKJTYKOLOEEOIZKRLZISIZENSKLRYOBTSSOYPZISYOZLDONITRZYPZKIWKRITYKOLPKYPZITLQITKSKLRYPZDOLQKYKOLSOELZCTBBIOBIKTYKOLSOEHTLQSPZPTSOFSYINDYZQYPZTQWKLKSYITYKOLOEMNSYKDZFVIZENSKLRPKSTSSZLYYOHTCSEOIZSYTFHKSPKLRMNQKDKTIVBOCZISPZPTSWTQZMNQRZSQZBZLQZLYOLPKSCKHHTHOLZEOIYPZYZLNIZOEYPZKIOEEKDZSTLQYPZTWONLYTLQBTVWZLYOEYPZKISTHTIKZSPZPTSZIZDYZQTWNHYKYNQZOELZCOEEKDZSTLQSZLYPKYPZISCTIWSOEOEEKDZISYOPTITSSONIBZOBHZTLQZTYONYYPZKISNFSYTLDZPZPTSUZBYTWOLRNSKLYKWZSOEBZTDZSYTLQKLRTIWKZSCKYPONYYPZDOLSZLYOEONIHZRKSHTYNIZPZPTSTEEZDYZQYOIZLQZIYPZWKHKYTIVKLQZBZLQZLYOETLQSNBZIKOIYODKXKHBOCZIPZPTSDOWFKLZQCKYPOYPZISYOSNFMZDYNSYOTMNIKSQKDYKOLEOIZKRLYOONIDOLSYKYNYKOLTLQNLTDULOCHZQRZQFVONIHTCSRKXKLRPKSTSSZLYYOYPZKITDYSOEBIZYZLQZQHZRKSHTYKOLEOIGNTIYZIKLRHTIRZFOQKZSOETIWZQYIOOBSTWOLRNSEOIBIOYZDYKLRYPZWFVWODUYIKTHEIOWBNLKSPWZLYEOITLVWNIQZISCPKDPYPZVSPONHQDOWWKYOLYPZKLPTFKYTLYSOEYPZSZSYTYZSEOIDNYYKLROEEONIYITQZCKYPTHHBTIYSOEYPZCOIHQEOIKWBOSKLRYTAZSOLNSCKYPONYONIDOLSZLYEOIQZBIKXKLRNSKLWTLVDTSZSOEYPZFZLZEKYSOEYIKTHFVMNIVEOIYITLSBOIYKLRNSFZVOLQSZTSYOFZYIKZQEOIBIZYZLQZQOEEZLSZSEOITFOHKSPKLRYPZEIZZSVSYZWOEZLRHKSPHTCSKLTLZKRPFOIKLRBIOXKLDZZSYTFHKSPKLRYPZIZKLTLTIFKYITIVROXZILWZLYTLQZLHTIRKLRKYSFONLQTIKZSSOTSYOIZLQZIKYTYOLDZTLZATWBHZTLQEKYKLSYINWZLYEOIKLYIOQNDKLRYPZSTWZTFSOHNYZINHZKLYPZSZDOHOLKZSEOIYTUKLRTCTVONIDPTIYZISTFOHKSPKLRONIWOSYXTHNTFHZHTCSTLQTHYZIKLRENLQTWZLYTHHVYPZEOIWSOEONIROXZILWZLYSEOISNSBZLQKLRONIOCLHZRKSHTYNIZSTLQQZDHTIKLRYPZWSZHXZSKLXZSYZQCKYPBOCZIYOHZRKSHTYZEOINSKLTHHDTSZSCPTYSOZXZIPZPTSTFQKDTYZQROXZILWZLYPZIZFVQZDHTIKLRNSONYOEPKSBIOYZDYKOLTLQCTRKLRCTITRTKLSYNSPZPTSBHNLQZIZQONISZTSITXTRZQONIDOTSYSFNILZQONIYOCLSTLQQZSYIOVZQYPZHKXZSOEONIBZOBHZPZKSTYYPKSYKWZYITLSBOIYKLRHTIRZTIWKZSOEEOIZKRLWZIDZLTIKZSYODOWBHZYZYPZCOIUSOEQZTYPQZSOHTYKOLTLQYVITLLVTHIZTQVFZRNLCKYPDKIDNWSYTLDZSOEDINZHYVTLQBZIEKQVSDTIDZHVBTITHHZHZQKLYPZWOSYFTIFTIONSTRZSTLQYOYTHHVNLCOIYPVYPZPZTQOETDKXKHKJZQLTYKOLPZPTSDOLSYITKLZQONIEZHHOCDKYKJZLSYTUZLDTBYKXZOLYPZPKRPSZTSYOFZTITIWSTRTKLSYYPZKIDONLYIVYOFZDOWZYPZZAZDNYKOLZISOEYPZKIEIKZLQSTLQFIZYPIZLOIYOETHHYPZWSZHXZSFVYPZKIPTLQSPZPTSZADKYZQQOWZSYKDKLSNIIZDYKOLSTWOLRSYNSTLQPTSZLQZTXOIZQYOFIKLROLYPZKLPTFKYTLYSOEONIEIOLYKZISYPZWZIDKHZSSKLQKTLSTXTRZSCPOSZULOCLINHZOECTIETIZKSNLQKSYKLRNKSPZQQZSYINDYKOLOETHHTRZSSZAZSTLQDOLQKYKOLSKLMZEEZISOLSQITEYYPZIZKSTBTIYOLSHTXZIVPZIZKLZXZIVSYTRZOEYPZSZOBBIZSSKOLSCZPTXZBZYKYKOLZQEOIIZQIZSSKLYPZWOSYPNWFHZYZIWSONIIZBZTYZQBZYKYKOLSPTXZFZZLTLSCZIZQOLHVFVIZBZTYZQKLMNIVTBIKLDZCPOSZDPTITDYZIKSYPNSWTIUZQFVZXZIVTDYCPKDPWTVQZEKLZTYVITLYKSNLEKYYOFZYPZINHZIOETEIZZBZOBHZLOIPTXZCZFZZLCTLYKLRKLTYYZLYKOLYOONIFIKYKSPFIZYPIZLCZPTXZCTILZQYPZWEIOWYKWZYOYKWZOETYYZWBYSFVYPZKIHZRKSHTYNIZYOZAYZLQTLNLCTIITLYTFHZMNIKSQKDYKOLOXZINSCZPTXZIZWKLQZQYPZWOEYPZDKIDNWSYTLDZSOEONIZWKRITYKOLTLQSZYYHZWZLYPZIZCZPTXZTBBZTHZQYOYPZKILTYKXZMNSYKDZTLQWTRLTLKWKYVTLQCZPTXZDOLMNIZQYPZWFVYPZYKZSOEONIDOWWOLUKLQIZQYOQKSTXOCYPZSZNSNIBTYKOLSCPKDPCONHQKLZXKYTFHVKLYZIINBYONIDOLLZDYKOLSTLQDOIIZSBOLQZLDZCZWNSYYPZIZEOIZTDGNKZSDZKLYPZLZDZSSKYVCPKDPQZLONLDZSONISZBTITYKOLTLQPOHQYPZWTSCZPOHQYPZIZSYOEWTLUKLQZLZWKZSKLCTIKLBZTDZEIKZLQSCZYPZIZEOIZYPZIZBIZSZLYTYKXZSOEYPZNLKYZQSYTYZSOETWZIKDTKLRZLZITHDOLRIZSSTSSZWFHZQTBBZTHKLRYOYPZSNBIZWZMNQRZOEYPZCOIHQEOIYPZIZDYKYNQZOEONIKLYZLYKOLSQOKLYPZLTWZTLQFVYPZTNYPOIKYVOEYPZROOQBZOBHZOEYPZSZDOHOLKZSSOHZWLHVBNFHKSPTLQQZDHTIZYPTYYPZSZNLKYZQDOHOLKZSTIZTLQOEIKRPYONRPYYOFZEIZZTLQKLQZBZLQZLYSYTYZSYPTYYPZVTIZTFSOHXZQEIOWTHHTHHZRKTLDZYOYPZFIKYKSPDIOCLTLQYPTYTHHBOHKYKDTHDOLLZDYKOLFZYCZZLYPZWTLQYPZSYTYZOERIZTYFIKYTKLKSTLQONRPYYOFZYOYTHHVQKSSOHXZQTLQYPTYTSEIZZTLQKLQZBZLQZLYSYTYZSYPZVPTXZENHHBOCZIYOHZXVCTIDOLDHNQZBZTDZDOLYITDYTHHKTLDZSZSYTFHKSPDOWWZIDZTLQYOQOTHHOYPZITDYSTLQYPKLRSCPKDPKLQZBZLQZLYSYTYZSWTVOEIKRPYQOTLQEOIYPZSNBBOIYOEYPKSQZDHTITYKOLCKYPTEKIWIZHKTLDZOLYPZBIOYZDYKOLOEQKXKLZBIOXKQZLDZCZWNYNTHHVBHZQRZYOZTDPOYPZIONIHKXZSONIEOIYNLZSTLQONISTDIZQPOLOI"""
                    S = ord('A')
                    frequency_tally = {c:ciphertext.count(chr(c)) for c in [x+S for x in xrange(0,26)]}
                    for c,n in frequency_tally.items():
                        print chr(c),":",n
                </input>
            </sage>
        </subsubsection>
    </subsection>


    <subsection>
        <title>Polygraphic substitution</title>
        <p>
            Another more secure technique is to permute groups of letters, effectively increasing the size of the alphabet. A digraph encryption would take pairs of adjacent letters (<em>digraphs</em>) and permute them with another digraph.
        </p>

        <p>
            In the Playfair cipher<fn>Developed in 1854 by Charles Wheatstone but advocated by Lord Playfair.</fn> a <m>5\times 5</m> grid of letters containing a keyword is memorized, along with four rules. The keyword is written into the grid, with duplicate letters removed, and the remaining letters follow. The letters <m>I</m> and <m>J</m> are written into the same position. For instance, if our key phrase is <q>talons up,</q> the grid would be as shown below:

        <figure>
            <image xml:id='playfair_grid' width="30%">
                <latex-image>
                    <![CDATA[
{\tiny
\begin{tikzpicture}[scale=1/3]
\draw (0,0) grid (5,5)
    \foreach \y/\x/\z in {4/0/T,  4/1/A,  4/2/L,  4/3/O,  4/4/N,  3/0/S,
                              3/1/U,  3/2/P,  3/3/B,  3/4/C,  2/0/D,  2/1/E,
                              2/2/F,  2/3/G,  2/4/H,  1/0/IJ, 1/1/K,  1/2/M,
                              1/3/Q,  1/4/R,  0/0/V,  0/1/W,  0/2/X,  0/3/Y,  0/4/Z}{
            (\x+.5,\y+.5) node { \z}};
\end{tikzpicture}
}
]]>
                </latex-image>
            </image>
        <caption>The Playfair encryption grid with a keyphrase of <q>Talons up</q>.</caption>
        </figure>
        </p>
        <p>
            The rules are
            <ol>
                <li><p>If the paired letters are the same, insert an X between them.</p></li>
                <li><p>If the letters occur in the same row of the table, use the letters to their immediate right, wrapping around to the left side of the table if necessary.</p></li>
                <li><p>If the letters occur in the same column of the table, use the letters immediately below them, wrapping around to the top of the table if necessary.</p></li>
                <li><p>Otherwise, draw a rectangle around the pair of letters, and replace each with the unused corner from the same row.</p></li>
            </ol>
        </p>

        <p>
            These rules are only difficult to formulate in writing, but in practice are easy to implement; the inventor claimed he could teach it to 3 out of 4 school boys in 15 minutes. To demonstrate the use of the cipher, we'll use our Playfair grid to encrypt the message, <c>HIT THE BOOKKEEPER</c>. First, we break the plaintext into pairs, inserting Xs where necessary:
            <me>
                \verb|HITTHEBOOKKEEPER| \mapsto \verb|HI TX TH EB OX OK KE EP ER|
            </me>
            Notice that two Xs were inserted.
            <!-- \texttt{HITTHEBOOKKEEPER}\mapsto \texttt{HI~T\underline{X}~TH~EB~O\underline{X}~OK~KE~EP~ER} -->
        </p>

        <p>
            Next we draw the appropriate boxes, as demonstrated in <xref ref="fig_playfair_exmp" autoname="yes" />.
        </p>
        <figure xml:id="fig_playfair_exmp" >
            <caption>Encoding characters using Playfair's cipher.</caption>
            <image xml:id="playfair_example">
                <latex-image><![CDATA[
{\tiny
\begin{tikzpicture}[scale=1/3]
\draw \foreach \s in {0,6,12}{
    \foreach \t in {14, 7, 0}{
        (\s, \t) grid (\s+5, \t+5)
        \foreach \y/\x/\z in {4/0/T,  4/1/A,  4/2/L,  4/3/O,  4/4/N,  3/0/S,
                              3/1/U,  3/2/P,  3/3/B,  3/4/C,  2/0/D,  2/1/E,
                              2/2/F,  2/3/G,  2/4/H,  1/0/IJ, 1/1/K,  1/2/M,
                              1/3/Q,  1/4/R,  0/0/V,  0/1/W,  0/2/X,  0/3/Y,  0/4/Z}{
            (\s+\x+.5,\t+\y+.5) node { \z}
}}};

\fill [gray, opacity=.2]
    (0,14 + 1) rectangle (5,14 + 3)
    ( 6 + 0,14 + 0) rectangle ( 6 + 3,14 + 5)
    (12 + 0,14 + 2) rectangle (12 + 5,14 + 5)
    (1, 7 + 2) rectangle (4, 7 + 4)
    ( 6 + 2, 7 + 0) rectangle ( 6 + 4, 7 + 5)
    (12 + 1, 7 + 1) rectangle (12 + 4, 7 + 5)
    (1,1) rectangle (2,3)
    ( 6 + 1,2) rectangle ( 6 + 3,4)
    (12 + 1,1) rectangle (12 + 5,3);

\draw [->]
    (0,13) node [right, draw] (HI) {HI}
    (5,13) node [draw, left] (DR) {DR}
    (HI.east) -- (DR.west);

\draw [->]
    (6,13) node [right, draw] (TX) {TX}
    (11,13) node [left, draw] (LV) {LV}
    (TX.east) -- (LV.west);

\draw [->]
    (12,13) node [right, draw] (TH) {TH}
    (17,13) node [left, draw] (ND) {ND}
    (TH.east) -- (ND.west);


\draw [->]
    (0,6) node [right, draw] (EB) {EB}
    (5,6) node [left, draw] (GU) {GU}
    (EB.east) -- (GU.west);
\draw [->]
    (6,6) node [draw, right] (OX) {OX}
    (11,6) node [draw, left] (LY) {LY}
    (OX.east) -- (LY.west);
\draw [->]
    (12,6) node [draw, right] (OK) {OK}
    (17,6) node [draw, left] (AQ) {AQ}
    (OK.east) -- (AQ.west);


\draw [->]
    (0,-1) node [right, draw] (KE) { KE}
    (5,-1) node [left, draw] (WK) { WK}
    (KE.east) -- (WK.west);
\draw [->]
    (6,-1) node [right, draw] (EP) { EP}
    (11,-1) node [left, draw] (FU) {FU}
    (EP.east) -- (FU.west);
\draw [->]
    (12,-1) node [right, draw] (ER) {ER}
    (17,-1) node [left, draw] (HK) {HK}
    (ER.east) -- (HK.west);

\end{tikzpicture}
}
]]></latex-image>
            </image>

        </figure>
        <p>
            The resulting plaintext is <c>DRLVN DGULY AQWKF UHK</c>, broken into 5-character blocks. To decrypt the message is to use the same Playfair grid and reverse rules 2, 3, and 4. Unfortunately, the use of this digraph substitution remains equivalent to a monoalphabetic substitution cipher, this time on an alphabet of <m>26\cdot 25 = 650</m> symbols, since no double-letter digraphs are permuted. Since <m>\log_{10}(650!)\approx 1547.91</m>, this is a considerably large space of permutations to attack naively.
        </p>
    </subsection>

</section>
