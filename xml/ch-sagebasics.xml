<chapter xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="c-SB">
    <title>Sage: Basics</title>

    <objectives xml:id="obj-SageBasics">
        <ol>
            <li><p>Gain familiarity with Sage cells and the CoCalc environment.</p></li>
            <li><p>Learn some elementary Sage/Python syntax and commands.</p></li>
        </ol>
    </objectives>

    <introduction xml:id="intro-SageBasics">>
        <title>A basic introduction to reading this book</title>
        <p>
            This book is not a manual for how to use built-in SageMath commands to solve difficult mathematical problems; it is a textbook for a course in algorithm design and implementation. For the former, consult Gregory Bard's book <xref ref="bib_SageBook" text="title">Sage for Undergraduates</xref>. What we attempt in this text is to provide a very basic introduction to programming in SageMath (which will effectively teach Python syntax) and then demonstrate how these very basic ideas of programming are sufficient to solve computationally intensive mathematical problems with ease.
        </p>
        <p>
            This book is written in <url href="www.pretextbook.org">PreTeXt</url>, which means that <em>the best way to read it is online!</em> 
        </p>
    </introduction>


    <xi:include  href="./sec-sagebasics-cocalc.xml" />
    <xi:include  href="./sec-sagebasics-variables.xml" />
    <xi:include  href="./sec-sagebasics-strings.xml" />
    <xi:include  href="./sec-sagebasics-advanced.xml" />
    <xi:include  href="./sec-sagebasics-project.xml" />
    
    <conclusion>
        <title>Help! I've never programmed before!</title>
        <p>
            For some of you, this course will provide your first experience of writing code. This is great! We'll try to ease you into programming through chapter-level projects at a rate of about one per week. There are some very important tips for new programmers:
            <ol>
                <li>
                    You can't really break anything by working in CoCalc. Also, if you accidentally delete something important, you can always click on the bright blue <q>TimeTravel</q> button at the top of the page.
                </li>
                <li>
                    If you can't figure out why your code isn't working, ask someone. Your professor wants to help and is pretty good at debugging code.
                </li>
                <li>
                    Even if you just can't get some code working, make sure you understand the <em>mathematical</em> part of the algorithms. These are important on written exams.
                </li>
                <li>
                    Trying things repeatedly in different ways, even things which seem stupid or useless, is a way to get better. You can always create a new <c>.sagews</c> file.
                </li>
            </ol>
            Generally the class will contain a spectrum of both programming and mathematical ability, but <em>everyone can successfully complete this course</em> provided you are willing to put in time and effort. 
        </p>
    </conclusion>
<!--     <conclusion>
        <title><em>Caveat emptor!</em></title>
        <p>
            This text was originally written with the intent that students would write code in Python 3.5 using the IDLE environment. This is a perfectly valid plan, but Sage and CoCalc use Python 2.7, which differs from Python 3.5 in ways more important than just syntax. Some references to code from Python 3.5 remain scattered throughout the text. When they all have absolutely been eradicated, this warning will be removed.
        </p>
    </conclusion> -->
</chapter>
