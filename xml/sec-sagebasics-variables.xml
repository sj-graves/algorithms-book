<section xml:id="s-SB-V">
    <title>Working with variables</title>
    <introduction>
        <p>
            It's not necessary to declare variables to use Sage as a calculator, but if that's all the power needed for a calculation you might be better served to actually use a calculator. For even the least sophisticated of interesting mathematical problems, there is a need to refer back to a previously calculated value, so we typically represent these as algebraic variables. When working algebraically, we aren't usually worried about what <term>type</term> of value is stored in a given variable, so long as everything makes logical sense. Therefore if we write <m>x+5 = y</m> it is a safe assumption that, whatever the values of <m>x</m> and <m>y</m>, they are variables of a type to which the integer 5 can be added.
        </p>
        <p>
            When programming in Sage, we only need to be slightly more careful, and we have greater flexibility with what we call our variables as programmers than we generally have as mathematicians. Moreover, since Sage is written using the Python language syntax (and contains all of Python 2.7) we do not need to declare what type of variable we are using prior to using it! We may simply assign a value to a previously unused variable name. Generally, mathematicians prefer variables to consist of a single character: <m>x</m>, <m>y</m>, or <m>\theta</m>. Sometimes mathematicians will decorate that character with other marks to distinguish some other meaning: <m>\bar{x}</m>, <m>\hat{p}</m>, or <m>\theta_5'</m>. In programming it is much more useful to use an entire word to denote a variable and thereby to give more meaning to what value is represented by that variable. For instance, a statistician might use <m>\bar{x}</m> to denote the sample mean of a variable <m>x</m>, but a programmer might refer to it as <c>mean_x</c>. The convention to separate terms in variable names by an underscore <c>_</c> is sometimes called <term>snake_case</term> or <term>pothole_case</term>. Regardless of what you call it, snake_case allows for more meaningful variable names.
        </p>
    </introduction>
    <subsection xml:id="ss-SB-V-A">
        <title>Assignment and basic operations</title>
        <p>
            To begin with, assigning a value to a variable couldn't be any easier in Sage.
        </p>
        <sage>
            <input>
                short_pi = 3.14159
                long_pi = 3.1415926535
            </input>
        </sage>
        <p>
            We note immediately that <em>assignment produces no output</em>. If you want to see the value of a variable after it has been assigned, you should either execute a line consisting of only the variable name, or better still <c>print</c> it. In a Sage cell, only the output of the last-executed line will be printed, so using <c>print</c> is a better way to alwaays ensure that what you want to see is displayed as output.
        </p>
        <sage>
            <input>
                short_pi = 3.14159
                short_pi
            </input>
            <output>
                3.14159000000000
            </output>
        </sage>
        <p>
            A peculiar feature of the embedded SageCell is that all the cells on a particular page are treated like a single page of a CoCalc notebook. If you have executed the first of the above cells, then executing the following will produce meaningful output. If you reload this page and execute the following cell, you'll see an error message.
        </p>
        <sage>
            <input>
                print long_pi
            </input>
        </sage>
        <p>
            You can use all of the normal arithmetic operations in Sage, as long as you're very careful about parentheses and the order of operations. This means that <c>+</c>, <c>-</c>, <c>*</c>, <c>/</c>, and <c>^</c> all do what they should. You might get an interesting result from these operations if you are using <term>numerical precision</term> calculations.
        </p>
        <sage>
            <input>
                x = 123456
                y = 531
                print x/y

                x = 52.0000000000000000000002
                y = 52.0000000000000000000001
                print x-y
            </input>
        </sage>
    </subsection>
    <subsection xml:id="ss-SB-V-BDT">
        <title>Basic data types</title>
        <p>
            It should by now be obvious that Sage recognizes some different kinds of <term>numerical date types</term>, but we have just scratched the list of possibilities. In fact Sage recognizes integers in two different ways, complex numbers, exact rational numbers, and numerical-precision floating point numbers. With all these representations around, we want to be careful we know what we're using at any given time. The good news is that Sage defaults to using <term>exact precision</term>, so what you get as output is generally exactly the same value as what you typed. However, we saw above that decimal expressions can behave inexactly - this is a necessary side effect of how computers represent <term>floating point numbers</term>. We'll deal with this only fleetingly later on, but you can read <url href="https://en.wikipedia.org/wiki/IEEE_754">the Wikipedia page for IEEE 754</url>, the floating point arithmetic specification adopted by the Institute of Electrical and Electronics Engineers (IEEE) in 1985 if you have an interest.
        </p>
        <p>
            In addition to numerical quantities, we often wish to deal with <term>boolean</term> quantities, which can have only the values of <c>True</c> or <c>False</c>. These are very important later when we work with <term>conditional statements</term>.
        </p>
        <sage>
            <input>
                bob = True
                larry = False
                nancy = False

                print bob and larry
                print larry or bob
                print bob and (larry or not nancy)
            </input>
        </sage>
        <p>
            As shown above, boolean variables can be combined using all the normal boolean operators, including <c>and</c>, <c>or</c>, and <c>not</c>. We'll come back to these later.
        </p>
        <p>
            One of the superpowers of Sage that differentiates it from Python, the programming language in which Sage itself is written, is that Sage is capable of symbolic mathematics: a programming variable can be defined as an abstract mathematical variable!
        </p>
        <sage>
            <input>
                x = var('x')
                factor(x^2-1)
            </input>
        </sage>
        <p>
            This very limited example also introduces the syntax used for functions in Sage. We will discuss functions later in <xref ref="c-FP" text="title" />. In the next section, we will treat another fundamental data type: the <term>string</term>.
        </p>
    </subsection>
</section>
























