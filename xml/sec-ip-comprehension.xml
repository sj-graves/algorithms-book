<section xml:id="s-IP-LC">
    <title>List comprehension</title>
    <introduction>
        <p>
            Suppose you had a list <c>foo</c> of numbers, and you wanted to set <c>bar</c> equal to the list of their squares. We could easily perform this task with a for loop and the <c>append</c> list method, which adds the argument to the end of the list.
        </p>
        <sage>
            <input>
                foo = [1, 3, 5, 7, 9]
                bar = []
                for x in foo:
                    bar.append(x^2)
                print bar
            </input>
        </sage>
        <p>
            However, Sage provides a much more elegant way to do the same thing, called <em>list comprehension</em>. Essentially this provides a way to create a list by successively performing the same operation (in this case squaring) on all the elements of another list.
        </p>
        <sage>
            <input>
                foo = [1,3,5,7,9]
                bar = [x^2 for x in foo]
                print bar
            </input>
        </sage>
        <p>
            This is a trivial example; here's an example which is more interesting.
        </p>
        <example xml:id="ex-IP-LC-AI">
            <title>Approximating Integrals</title>
            <p> 
                While we know from Calculus that the best way to calculate the area between the <m>x</m>-axis and a curve <m>y=f(x)\geq 0</m> (where <m>a\leq x\leq b</m>) is to use the definite integral <m>\int_a^b f(x)\,dx</m>, we also know that the definition of the definite integral depends upon the limit of sum of areas of approximating rectangles, <me>\int_a^b f(x)\,dx = \lim_{n\to\infty} \sum_{i=1}^n f(x_i^*)\Delta x_i.</me>
                For a fixed number <m>n</m>, we can quickly approximate the Riemann sum on the right using lists and list comprehensions; leveraging the power of Sage as a full symbolic mathematics system, we can even go so far as to easily draw the approximating rectangles where <m>x_i^* = x_i</m>.
            </p>
            <p> Here's what we need to do:
                <ol>
                    <li>Choose a number <m>n</m> of approximating rectangles.</li>
                    <li>Calculate the <m>n</m> points where the rectangles intersect the curve. The area of each rectangle then is the width of the rectangle times the <m>y</m>-coordinate of the point.</li>
                    <li>Calculate those areas.</li>
                    <li>Calculate the sum of all the rectangle areas.</li>
                </ol>
            </p>
            <listing>
                <caption>
                    Approximating a definite integral with Riemann sums. Notice the use of a symbolic variable <c>x</c> and a function <c>f</c> of that symbolic variable.
                </caption>
                <program>
                    <input>
                        n=13
                        a, b = 0, 1
                        dx = (b-a)/n
                        x = var('x')
                        f(x) = x^2
                        # generate a list of points on the curve y=x^2 equally spaced in the 
                        # x-axis interval [a,b]
                        points = [(xi,f(xi)) for xi in [a+dx*i for i in range(n+1)]]

                        # now calculate a list of areas of each rectangle
                        areas = [dx*yi for (xi,yi) in points[1:]]

                        approx_area = 0
                        for ai in areas:
                            approx_area += ai
                        out_str = "The approximate area is {0}, and the actual area is {1}."
                        print out_str.format(approx_area, integrate(f,(x,a,b)))
                    </input>
                </program>
            </listing>
            <p>
                The use of the <c>.format</c> method of strings in the last line allows us to sort of treat a string as a customizable function. Including the <c>{0}</c> and <c>{1}</c> in <c>out_str</c> allows you to replace each with the respective argument of the <c>format</c> method, without worrying about the data type of those arguments!
            </p>
            <p>
                If we'd like to actually draw the approximation, we can add some graphics steps. Sage is very good at this.
            </p>
            <listing>
                <caption>
                    Additional steps which produce graphical output of the approximation of the area.
                </caption>
                <program>
                    <input>
                        out_plot = plot(f(x),(x,a,b), color="red")
                        # from the original points, find the coordinates of corners of
                        # approximating rectangles
                        rec_pts = [ [(xi-dx, 0), (xi-dx, yi), (xi,yi), (xi,0)] for xi,yi in points[1:]]

                        plot_list = [polygon(pts, rgbcolor=(.8,.8,1), edgecolor="blue") for pts in rec_pts]
                        for p in plot_list:
                            out_plot += p

                        show(out_plot, aspect_ratio=1)
                    </input>
                </program>
            </listing>
            <p>
                As an exercise, try to change the above code until both the picture and the approximation use <q>left endpoint approximation</q> instead of <q>right endpoint approximation.</q>
            </p>
        </example>
    </introduction>
    <subsection xml:id="ss-IP-LC-NLC">
        <title>Nesting list comprehensions</title>
        <p> 
            Just as nested iterations are important for solving problems, often the most concise way to build a nested list is to use a <term>nested list comprehension</term>. Compare the following two programs, which produce identical output.
        </p>
        <sage>
            <input>
                foo = []
                for i in range(10):
                    bar = []
                    for j in range(i):
                        bar.append(j^2)
                    foo.append(bar)
                print foo
            </input>
        </sage>
        <sage>
            <input>
                foobar = [[j^2 for j in range(i)] for i in range(10)]
                print foobar
            </input>
        </sage>
        <p>
            The second of these examples shows a nesting of list comprehesions where the object being created in the outermost list is an inner list. It is also possible to have the container of the iteration be a list comprehension, although this is less common.
        </p>
        <sage>
            <input>
                print [[bar^2 for bar in foo] for foo in [2*bob for bob in "larry"]]
            </input>
        </sage>
    </subsection>
    <subsection xml:id="ss-IP-LC-EC">
        <title>The <c>enumerate</c> command</title>
        <p>
            Another useful feature of Sage is its ability to <term>enumerate</term> the objects in a container. Generally to enumerate means to count, but in such a way that the objects being counted each have a number associated with them. Think of this as giving serial numbers to the things being counted. Here's an example of enumerate being used.
        </p>
        <sage>
            <input>
                foo = "Hello world!"
                for i, bar in enumerate(foo):
                    print (i,bar)
            </input>
        </sage>
    </subsection>

</section>
