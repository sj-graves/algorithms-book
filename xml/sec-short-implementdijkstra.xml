<section xml:id="sec-Short-ImplementDijkstra">
    <title>Implementing Dijkstra's algorithm</title>
    <p>
        While we take advantage of Sage's built-in ability to store the graph and its information, we implement Dijkstra's algorithm with a twist. Rather than at each step searching for the next vertex nearest the root, we will keep our list of visited vertices stored in the order so that the next iteration of our loop automatically corresponds to the correct index in the list.
    </p>
    <p>
        In general, a list kept ordered in this way would be implemented using a <em>min heap</em>, or <em>priority queue</em>, data structure. Rather than spending the time to implement such a data structure, the following listing includes several lines which serve to reorder the <c>visited</c> list to the correct order at the end of each iteration.
    </p>
    <listing>
        <program>
            <input>
            def dijkstra(G, root, verbose=False):
                V = G.vertices()
                D = G.to_dictionary()

                visited = [(0,root)]+[(oo,v) for v in V if v!=root]
                distpred = {v:(oo,None) for v in V if v!=root}
                pos = {0:[0,1]}

                distpred.update({root:(0,None)})

                n = len(V)

                out_table = []

                i=0
                while i&lt;n:
                    dist_to_u,u = visited[i]
                    out_row = [i, u, dist_to_u,distpred[u][1]]
                    i += 1

                    out_nbrs = [(dist_to_v, v) for (dist_to_v, v) in visited[i:] if v in D[u] \ 
                        and dist_to_v &gt; dist_to_u + 1]
                    out_row.extend([[_[1] for _ in out_nbrs], (dist_to_u+1, u)])
                    out_table.append(out_row)
                    if len(out_nbrs)==0:
                        continue
                    for (dist_to_v, v) in out_nbrs:
                        visited.remove((dist_to_v, v))
                        distpred[v] = (dist_to_u + 1,u)

                    try:
                        # This will work if the "next distance" already has stuff in it.
                        prefix = visited[:sum(pos[dist_to_u + 1])]
                        middle = [(dist_to_u + 1,v) for (dist_to_v, v) in out_nbrs]
                        suffix = visited[sum(pos[dist_to_u + 1]):]
                        pos[dist_to_u + 1][1] += len(out_nbrs)
                    
                    except:
                        # This will work if the "next distance" doesn't have anything in it.
                        prefix = visited[:sum(pos[dist_to_u])]
                        middle = [(dist_to_u + 1,v) for (dist_to_v, v) in out_nbrs]
                        suffix = visited[sum(pos[dist_to_u]):]
                        pos[dist_to_u + 1] = [sum(pos[dist_to_u]),len(out_nbrs)]
                    
                    visited = prefix + middle + suffix

                if verbose:
                    return (out_table,distpred)
                else:
                    return distpred
            </input>
        </program>
        <caption>An implementation of a modified Dijkstra's algorithm which avoids searching for the next unvisited vertex of minimum known distance.</caption>
    </listing>
    
</section>
