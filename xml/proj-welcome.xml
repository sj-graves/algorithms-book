<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-w-wp">
    <title>Welcome Project</title>
    <objectives>
        <ol>
            <li>Getting comfortable in CoCalc</li>
            <li>Getting comfortable in Sage</li>
        </ol>
    </objectives>
    <introduction>
        Since the goal of the course is to focus primarily upon these projects, the projects must come first! Develop the surrounding text later!
    </introduction>
    <subsection xml:id="ss-w-gcicc">
        <title>Getting comfortable in CoCalc</title>
        <introduction>
            <p>
                If you don't already have one, go to <url href="https://cocalc.com" /> and get a CoCalc account associated with your <c>@patriots.uttyler.edu</c> email address. If you are working this book independently of the Math 3380: Algorithms for Applied Mathematics course at the University of Texas at Tyler, you'll want to start a new project called <q>AAM</q> or something equally catchy. If you are an Algorithms student, you'll probably already have a project started for you for this course by the professor.
            </p>
            <p>
                Either way, you'll want to be working inside your project for this subject matter, and the assumption is that it is a project just for this material. If this is a new project, you probably don't have very much to look at yet.
            </p>
        </introduction>
        <project xml:id="prj-w-gcicc-sf">
            <title>Submission file</title>
            <p>
                Create a new folder within your project root called working, which will have path <c>~/working</c>. Create a subfolder <c>~/working/p01-welcome</c>. Create and open a file <c>~/working/p01-welcome/p01-submit.sagews</c>.
            </p>
        </project>
        <p>
            Often you will be asked to insert simple formatted text into your Sage worksheets; the means to do this is the <term>Markdown</term> language. Entire input cells can be turned into Markdown cells by using a <term>mode command</term>, which is simply a line at the beginning of the cell beginning with <c>%</c>. The mode command to start a Markdown cell is <c>%md</c>.
        </p>
        <project xml:id="prj-w-gcicc-ph">
            <title>Project header</title>
                <p>
                    You will be required to put a nice Markdown header at the beginning of every submission file. A nice header cell might be input as follows:
                </p>
                <listing xml:id="list-w-gcicc-ph">
                    <caption>Project Headers</caption>
                    <program language="sage">
                        <input>
                            %md
                            # Project 1
                            ## Author: H. Rider Haggard
                            Collaborators: Allan Quatermain, Henry Curtis
                        </input>
                    </program>
                </listing>
                <p>
                    It should be fairly obvious to you that unless your name is <q>H. Rider Haggard,</q> you should use your own name instead; likewise list your actual collaborators rather than Misters Quatermain and Curtis.
                </p>
                <p>
                    Use a <c>%md</c> Markdown mode command to turn the first cell of <c>p01-submit.sagews</c> into a Markdown cell as shown in <xref ref="list-w-gcicc-ph" />. This is <em>Project 1</em>.
                </p>
        </project>
        <p>
            The point of Markdown is that it <em>greatly</em> simplifies the production of web text with basic formatting. Take a look at the Github guide <url href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</url>. CoCalc uses Markdown everywhere: in <c>.md</c> and <c>.markdown</c> files (obviously), but more interestingly in every chat window (see <xref ref="rmk-CoCalc_chat"/>) and description box.
        </p>
        <project xml:id="prj-w-gcicc-sph">
            <title>Subproject header</title>
            <p>
                Since the project number is the primary header of the submission file and your name is the secondary header, each individual portion of the project should be a tertiary header. To put such a header at the beginning of a Markdown cell is straightforward:
            </p>
            <sidebyside>
                <program language="sage">
                    <input>
                        %md
                        ### Project 1.1. Getting comfortable in CoCalc
                    </input>
                </program>
            </sidebyside>
            <p>
                To put the same header at the beginning of a Sage cell, you can use the <c>md(...)</c> function, like <c>md("### Project 1.1. Getting comfortable in CoCalc")</c>. <em>Do so now.</em>
            </p>
        </project>
        <project xml:id="prj-w-gcicc-mdhi">
            <title>Markdown's implementation of headers</title>
            <p>
                In a Markdown cell, explain the way that Markdown is used to produce headers of decreasing importance.
            </p>
        </project>
        <project xml:id="prj-w-gcicc-mdtab">
            <title>Markdown tables</title>
            <p>
                Following the table syntax specified in the <url href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</url> guide, create a table in a new cell of your <c>p01-submit.sagews</c> file formatted as follows:</p>
            <sidebyside>
                <tabular halign="center">
                    <row bottom="major">
                        <cell>Course Number</cell>
                        <cell>Course Name</cell>
                        <cell>Semester</cell>
                        <cell>Outcome</cell>
                    </row>
                    <row>
                        <cell>Math 1342</cell>
                        <cell>Statistics I</cell>
                        <cell>Fall 2018</cell>
                        <cell>Success for ~70% of students</cell>
                    </row>
                </tabular>
            </sidebyside>
            <p>
                The rows of your table should consist of the mathematics courses you have taken since you began your time at UT Tyler, by number and name, along with the semester you took the course and whether or not you felt personally successful in the course. Do not tell me your grade, just whether the outcome was successful or not successful.
            </p>
        </project>
        <project xml:id="prj-w-gcicc-chat">
            <title>CoCalc chat</title>
            <p>
                Use the chat window attached to <c>p01-submit.sagews</c> to say <q>Hello</q> to your collaborators
            </p>
        </project>
        <conclusion>
            <p>
                Now we will move from the basic mechanics of cells and using the CoCalc interface to very introductory programming in Sage. By the end of the semester at the latest, these projects should seem trivial.
            </p>
        </conclusion>
    </subsection>
    <subsection xml:id="pr-w-gcis">
        <title>Getting comfortable in Sage</title>
        <introduction>
            <p>
                Go ahead and put a new Markdown header in signifying the beginning of the second part of the project, like so:
            </p>
            <sidebyside>
                <program language="sage">
                    <input>
                        md("### Project 1.2. Getting comfortable in Sage")
                    </input>
                </program>
            </sidebyside>
            <p>
                We're going to use basic data types as our introduction to Sage and the CoCalc interface.
            </p>
        </introduction>
        <project xml:id="prj-w-gcis-sph">
            <title>Another subproject header</title>
            <statement>
                Create an appropriate subproject header cell as per the format specified above in 
                <xref ref="prj-w-gcicc-sph" />.
            </statement>
        </project>
        <project xml:id="prj-w-gcis-ya">
            <title>Your age</title>
            Assign to the variable <c>my_age</c> your age as an integer number of years.
        </project>
        <project xml:id="prj-w-gcis-yn">
            <title>Your name</title>
            Assign to the variable <c>my_name</c> the string consisting of your full given name. 
        </project>
        <project xml:id="prj-w-gcis-is">
            <title>Indexing in a string</title>
            <figure xml:id="fig-string_slicing">
                <caption>Index positions for slicing strings</caption>
                <image xml:id="img-string-slicing">
                    <latex-image>
                        \begin{tikzpicture}
                        \draw \foreach \j/\i/\c in {-16/0/t, -15/1/h, -14/2/i, -13/3/s, -12/4/~, -11/5/i, -10/6/s, -9/7/~, -8/8/a, -7/9/~, -6/10/s, -5/11/t, -4/12/r, -3/13/i, -2/14/n, -1/15/g, -0/16/~ ~}{
                            (-8 + 16*\i pt, -8pt) node (b\i) [below] {\tiny\tt \i} 
                                -- ++(0,16pt) node (t\i) [above] {\tiny\tt \j}
                            (0 + 16*\i pt, -3pt) node [anchor=base] {\tt \c}
                        } 
                        (b0.north) -- (b16.north)
                        (t0.south) -- (t16.south);
                        \end{tikzpicture}
                    </latex-image>
                </image>
            </figure>
            <p>
                The <term>index</term> of a character within a string is its position in the string. In Sage, the individual entries of an indexed object like a string are accessed using <q>square bracket notation</q>: that is, if <c>i</c> is a valid index, then <c>my_name[i]</c> would give the single character in position number <c>i</c>. In <xref ref="fig-string_slicing" text="name"/>, the index of a character is given by the integer below the line to the left of the character.
            </p>
            <p>
                 In a Markdown cell, give a possible explanation why it is that the initial index of a string is zero. Also explain to what the negative numbers in the figure refer.
            </p>
        </project>
        <project xml:id="prj-w-gcis-strslice">
            <title>String slicing</title>
                <p>
                    Another useful string manipulation is called <term>slicing</term>. 
                </p>
            <p>
                Examine the slices <c>my_name[2:-2]</c>, <c>my_name[2:-2:2]</c>, and <c>my_name[2:-2:5]</c>, and explain the use of slicing in a Markdown cell. Finally, what is the result of <c>my_name[::-1]</c>?
            </p>
        </project>
        <project xml:id="prj-w-gcis-stradd">
            <title>Adding strings</title>
                <p>
                    You can combine strings arithmetically, as well as using the arithmetic operators for actual arithmetic. String arithmetic isn't necessarily what you might think, though; for instance, addition of strings is a noncommutative addition! You can also multiply a string by an integer, which (as is appropriate) performs repeated addition.
                </p>
            <p>
                What is <c>my_name[:5] + my_name[-5:]</c>? What is <c>5*my_name</c>?
            </p>
        </project>
        <conclusion>
            It is always possible to delete extra cells from your Sage worksheets. At the beginning of a cell, pressing backspace will delete the division between the cell and its predecessor; likewise, at the end of a cell pressing delete will delete output of the cell and the division between the cell and its successor.
        </conclusion>
    </subsection>
    <conclusion>
        <title>Important final step</title>
        <p>
            The course functionality of CoCalc does not have anything like a <q>submit</q> button for assignments. Instead, you will have a folder created in your project by the assignment from the instructor; when your instructor is ready to collect the assignment, he presses a <q>collect</q> button in his course controls which then copies all the files in your project's assigned folder back to his project for grading. Then when he completes grading of the work, he presses a <q>return</q> button which sends the graded work back to you.
        </p>
        <p>
            When you're finished with the projects for a chapter, make sure to copy any important files from your <c>working</c> directory to the proper subdirectory of <c>~/assign/</c>. You should consider this to be your method of submitting a file to be graded. When the projects are collected to be graded, they are automatically copied from the <c>~/assign</c> directory to the root project for the course, on the instructor's account. If the files aren't in the right location, they won't be collected.
        </p>
    </conclusion>
</section>