<?xml version="1.0" encoding="UTF-8"?>
<exercises xml:id="pr-W">
    <title>Welcome Project</title>
    <introduction>
        <p>
            These projects will make a few assumptions: first, that you have a working CoCalc account; second, that assignments are being made using the CoCalc course functions. 
        </p>
        <p>
                The first fact to understand is that CoCalc runs on Linux, which is more like Mac OS X than Windows. The home directory of your project will be referred to as <c>~</c>, the <term>project root</term>. When you first open your project, <c>~</c> is the only folder you have. There are two main ways that files will be distributed to you through CoCalc by your instructor: <term>assignments</term> and <term>handouts</term>. It should be clear that assignments can be graded, while handouts are just all the various files your instructor may wish to share with you throughout the semester.
            </p>
            <p>
                To keep things organized, let's assume that all assignments will be passed out in the <c>~/assign</c> folder and all handouts will be passed out in the <c>~/handouts</c> folder. If you're ready to work on an assigned version of this project, try to find the folder <c>~/assign/p1-welcome</c>. If you're working this on your own, you should make a temporary folder where you can work on problems which you are not ready to have collected; this will avoid a problem of having some of your work overwritten. I recommend using a folder named <c>~/working</c>.
            </p>
    </introduction>
    <remark>
        <p>
            CoCalc does not alert you when a new assignment or handout has been distributed. It is your responsibility to check and make sure that you are keeping up with everything distributed by the instructor. Assignment due dates are included as a <c>DUE_DATE.txt</c> file within the folder of an assignment, but you may or may not receive any other notification of an assignment.
        </p>
    </remark>
    <exercise xml:id="pr-W-GSWSC">
        <title>Getting started with CoCalc</title>
        <p>
            Let's make sure that your file structure is organized and ready to work on material for this course.
        </p>
        <task>
            <p>
                Create a new folder within your project root called <c>working</c>, which will have path <c>~/working</c>. Create a subfolder <c>~/working/p1-welcome</c>. Create and open a file <c>~/working/p1-welcome/p1-submit.sagews</c>. 
            </p>
        </task>
        <task>
            <p>
                Every assignment should have a nice header so it is clear who and what is being graded. Use a <c>%md</c> Markdown mode command to turn the first cell of <c>p1-submit.sagews</c> into a Markdown cell. In the cell, type the following:
                <sidebyside>
                    <program language="sage">
                        <input>
                            %md
                            # Project 1
                            ## Jebediah Springfield
                        </input>
                    </program>
                </sidebyside>
                It should be fairly obvious to you that unless your name is <q>Jebediah Springfield</q>, you should use your own name instead.
            </p>
        </task>
        <task>
            <p>
                The point of Markdown is that it <em>greatly</em> simplifies the production of web text with basic formatting. Take a look at the Github guide <url href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</url>. CoCalc uses Markdown everywhere: in <c>.md</c> and <c>.markdown</c> files (obviously), but more interestingly in every chat window (see <xref ref="rmk-CoCalc_chat"/>) and description box.
            </p>
            <p>
                Following the table syntax specified in the <url href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</url> guide, create a table in your <c>p1-submit.sagews</c> file consisting of the following information:
                <sidebyside>
                    <tabular halign="center">
                        <row bottom="major">
                            <cell>Course Number</cell>
                            <cell>Course Name</cell>
                            <cell>Semester</cell>
                            <cell>Outcome</cell>
                        </row>
                        <row>
                            <cell>Math 1342</cell>
                            <cell>Statistics I</cell>
                            <cell>Fall 2018</cell>
                            <cell>Success for ~70% of students</cell>
                        </row>
                    </tabular>
                </sidebyside>
                The rows of your table should consist of the mathematics courses you have taken since you began your time at UT Tyler, by number and name, along with the semester you took the course and your <em>personal</em> feeling about the outcome of the course: you don't need to give a letter grade (although your professors have access to all of your course history, so it's not really private) but rather state what level of personal success you achieved in the course. For some students, earning a C is a great success, but for others it is a weak achievement at best. This is totally up to you and the level at which you believe you can perform.
            </p>
        </task>
        
    </exercise>
    <remark xml:id="rmk-CoCalc_chat">
        Every file in CoCalc gets its own chat window to allow the <em>Co</em>llaborative <em>Calc</em>ulation to be very easy. Chat is accessed through the chat bubble icon in the upper right of the CoCalc window; once open, a video camera icon will also appear allowing you to use the integrated <url href="https://jitsi.org">Jitsi</url> videoconferencing. If you chat in a chat window, all collaborators on that file will receive a notification; notably, your course instructor will be notified.
    </remark>
    <exercisegroup>
        <title>Introduction to programming in Sage using Python syntax</title>
        <introduction>
            <p>
                It is important to recognize that learning to program in Sage is very much like learning to program in Python, but there are many features of Sage which are not immediately available in Python. These will not be remarked upon, in general; if and when you need to write code in Python you will already know the necessary syntax by having learned Sage.
            </p>
            <p>
                This portion of the project will walk you through the very basics of programming in Sage.
            </p>
        </introduction>
        <exercise>
            <title>Sage is a super-calculator!</title>
            <statement>
                
            </statement>
        </exercise>
    </exercisegroup>
</exercises>