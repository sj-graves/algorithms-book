<section xml:id="s-FP-CAM">
    <title>Classes, attributes, and methods</title>
    <introduction>
        <p>
            We already know about all sorts of different types of data. Now we want to be able to extend our list by defining our own data types. The philosophy of programming we'll follow is called the <term>object-oriented programming paradigm</term>. In this way of thinking, we start with the <term>class</term>. A class consists of all of the things of a particular kind: for instance, we have talked about the class of strings, or of lists. If we define <c>foo="this is a string"</c>we are declaring <c>foo</c>to be a particular object which is an <term>instance</term>of the string class. There is a set of <term>attributes</term>which is common to all objects in a class, and there are certain functions (called         <term>methods</term>) which can be applied to any object in a class. For instance, each human has an attribute which is their blood type and another attribute which is their birth year. An example of a method on a human object is to determine its age.
        </p>
        <p>
            It should be obvious that using <q>human</q>as a class and a particular human as an instance of the class is a silly example. Strings are much more sensible as an example, but they are a particularly limited and basic class. Let's consider a more complicated example.
        </p>
    </introduction>
    <subsection xml:id="ss-FP-CAM-GI">
        <title>Gaussian integers</title>
        <definition>
            <title>Gaussian integer</title>
            <statement>
                A <term>Gaussian integer</term>is a number of the form <m>a+i b</m>where both <m>a</m> and <m>b</m> are integers and <m>i</m> is the imaginary number such that <m>i^2 = -1</m>.
            </statement>
        </definition>
        <p>
            If we want to begin by building a class of Gaussian integers, we use the <c>class</c> block structure. As this is a named structure (like when we used <c>def</c> to define a function) we will want to provide a docstring so that we can get <c>help</c>on our class after we've defined it. Once a <c>class</c>is defined, an instance of the class is created by using the class name as a function.</p>
        <sage>
            <input>
                class GaussianInteger(): 
                    """A class of Gaussian integers. 
                    """

                GaussianInteger()
            </input>
            <output>
                &lt;__main__.GaussianInteger instance at 0x7f57fbcfdb48&gt;
            </output>
        </sage>
        <p>
            We have now created an instance of <c>GaussianInteger</c>, but it's not yet actually a Gaussian integer. Instead it's an <c>instance</c> of a do-nothing class. So we look at our definition and realize that in order to define a Gaussian integer, we must specify two integers. For a Gaussian integer <m>z=a+ib</m>, the integer <m>a</m> is the <term>real part of <m>z</m></term>and the integer <m>b</m>is the <term>imaginary part of <m>z</m></term>, so we will require that these be defined. In order to pass in particular values when we create our instance, we need to use the <c>__init__</c>method; a method is simply a function defined locally within a class, and there are a large number of special methods which are given        names beginning and ending with two underscores, <c>__</c>. We'll learn more about these in the next section. The <c>__init__</c>method is shorthand for <em>initialization</em>.
        </p>
        <listing>
            <program>
                <input>
                    class GaussianInteger():
                        """A class of Gaussian integers.
                        """

                        def __init__(self, a, b):
                            # GaussianInteger(a,b) will create a Gaussian integer a+i*b if a and b are integers
                            if type(a) == type(1) and type(b) == type(1):
                                self.realpart = a
                                self.imagpart = b
                            else:
                                raise TypeError('Must have integer arguments.')
                </input>
            </program>
        <caption>The beginning of a Gaussian integer class, with <c>__init__</c> method.</caption>
        </listing>
        <p>
            There is a strange first argument to our <c>__init__</c> method, named <c>self</c>. Since we are declaring an object, there needs to be a way for that object to know itself. This is roughly the equivalent of a person having an identity. In order to know whether you have anything in your pocket, you have to know to whom <q>you</q> and <q>your</q> refer. In Sage, <c>self</c> is the internal name of the object. Inside the code, we then refer to <c>self.realpart</c> and <c>self.imagpart</c>. These are the <term>attributes</term> of the object <c>self</c>, since every validly defined <c>GaussianInteger</c> will have a <c>.realpart</c> and a <c>.imagpart</c>. All this gives us a much more useable Gaussian integer class, but we still are missing something: we don't have a nice way to see what a particular <c>GaussianInteger</c> is! We know that if <c>foo</c> is an instance of <c>GaussianInteger</c>, then <c>foo.realpart</c> and <c>foo.imagpart</c> exist, but we want to print <c>foo</c> and have something that looks like <m>a+ib</m>! We add another special method, <c>__repr__</c>.
        </p>
        <listing>
            <program>
                <input>
                    class GaussianInteger():
                        ...
                        def __repr__(self):
                            out = str(self.realpart)
                            if self.imagpart &lt; 0:
                                out = out + "-i*({0})".format(-self.imagpart)
                            elif self.imagpart &gt; 0:
                                out = out + "+i*({0})".format(self.imagpart)
                            return out
                </input>
            </program>
            <caption> Adding a <c>__repr__</c> method to <c>class GaussianInteger</c>. The convention of using <c>...</c> implies that this listing is to be appended to the end of whatever previous definition of <c>class GaussianInteger</c> was given.
            </caption>
        </listing>
        
        <p>
            We have now added to special, predefined methods to our class of Gaussian integers, but how do we add other methods? Let's consider two functions of a Gaussian integer, the <term>norm</term> and the <term>conjugate</term>.
        </p>
        <definition>
            <title>Norms and conjugates of Gaussian integers</title>
            <statement>
                The <term>norm</term> of a Gaussian integer <m>a+ib</m> is the real number <m>\sqrt{a^2+b^2}</m>, and the <term>conjugate</term> of <m>a+ib</m> is <m>a-ib</m>.
            </statement>
        </definition>
        <p>
            We very simply add methods for these to our class, respectively naming the methods <c>norm</c> and <c>conj</c>.
        </p>
        <listing>
            <program>
                <input>
                    class GaussianInteger():
                        ...
                        def norm(self):
                            return sqrt(self.realpart^2 + self.imagpart^2)
                    
                        def conj(self):
                            return GaussianInteger(self.realpart, -self.imagpart)
                </input>
            </program>
            <caption>Adding <c>norm</c> and <c>conj</c> to the <c>GaussianInteger</c> class.</caption>
        </listing>
        <p>
            While this no means exhausts all the things we wish to be able to do with Gaussian integers, it's a beginning!
        </p>
    </subsection>
    
    <subsection xml:id="ss-FP-CAM-ASBP">
        <title>Attributes should be private</title>
        <p>
            There is a convention among object-oriented programming – which is not adhered to by Sage – that the attributes of a class be divided into <term>public</term> attributes which can be accessed by anything using the class and <term>private</term> attributes which can only be used within the class definition. Since Python and Sage are not strict about this, we will not be strict about this. A convention among Python programmers has grown up that any attribute considered private should be named beginning with a single underscore, like <c>my_class._private_attribute</c>. The reason behind this is to prevent users of a class from error when the author of a class changes its implementation.
        </p>
        <p>
            In our case, this means that we should provide methods to access the real and imaginary parts of a <c>GaussianInteger</c> without reading or writing directly to the attributes. To agree with mathematical notation we name these methods <c>GaussianInteger.re()</c> and <c>GaussianInteger.im()</c>
        </p>
        <listing>
            <program>
                <input>
                    class GaussianInteger():
                        ...
                        def re(self):
                            return self.realpart
                    
                        def im(self):
                            return self.imagpart
                </input>
            </program>
            <caption>Methods in <c>GaussianInteger</c> for accessing attributes, which should be kept private to the class definition.</caption>
        </listing>
    </subsection>
    
    <conclusion>
        <p>
            As we end of this section, hopefully you have created in CoCalc a worksheet to test all these commands. Your class definition should now look something like this.
        </p>
        <listing xml:id="l-FP-CAM-GI">
            <program>
                <input>
                    class GaussianInteger():
                        """A class of Gaussian integers.
                        """

                        def __init__(self, a, b):
                            # GaussianInteger(a,b) will create a Gaussian integer a+i*b if a and b are integers
                            if type(a) == type(1) and type(b) == type(1):
                                self.realpart = a
                                self.imagpart = b
                            else:
                                raise TypeError('Must have integer arguments.')

                        def __repr__(self):
                            out = str(self.realpart)
                            if self.imagpart &lt; 0:
                                out = out + "-i*({0})".format(-self.imagpart)
                            elif self.imagpart &gt; 0:
                                out = out + "+i*({0})".format(self.imagpart)
                            return out

                        def norm(self):
                            return sqrt(self.realpart^2 + self.imagpart^2)

                        def conj(self):
                            return GaussianInteger(self.realpart, -self.imagpart)

                        def re(self):
                            return self.realpart

                        def im(self):
                            return self.imagpart
                </input>
            </program>
            <caption> A currently-full listing of the class definition for the <c>GaussianInteger</c> Gaussian integer class.</caption>
        </listing>
    </conclusion>
</section>
