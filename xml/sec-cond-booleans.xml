<section xml:id="sec-Conditionals-Booleans">
    <title>Boolean values</title>
    <p>
        In the language of mathematics, a <em>statement</em> is any expression which may be either true or false. These two values, <c>True</c> and <c>False</c> are the fundamental values of data type <c>bool</c>, and are likewise the fundamental values of <em>Boolean algebra</em><fn>Name after George Boole, author of <em>The Laws of Thought</em> (1854).</fn>. Boolean algebra is an algebraic system formalizing the same concepts as propositional calculus, which is in turn the formal language of logic and proof taught in Foundations (Math 3425). Here we use a very simple subset of Boolean algebra: expressions in Python which evalute to <c>True</c> or <c>False</c> are the basis of all <em>branching processes</em>, by which computers are instructed on how to make decisions.
    </p>

    <p>
        There are many, many Python commands which return <c>bool</c> values. The comparison operators are first among them; these are called <em>binary operators</em> because they are applied to two values, to distinguish them from other operators which only are applied to one (like the operator for differentiation with respect to <m>x</m>, written <m>\frac{d}{dx}</m>).
    </p>
    <table xml:id="table-BinaryComparison">
        <caption>The <em>binary comparison operators</em>.</caption>
        <tabular>
            <row bottom="major"><cell><em>Operator</em></cell><cell><em>Meaning</em></cell></row>
            <!--            <row bottom="minor"><cell></cell><cell></cell></row>-->
            <row><cell><c>x == y</c></cell><cell><c>x</c> is formally equivalent to <c>y</c></cell></row>
            <row><cell><c>x != y</c></cell><cell><c>x</c> is formally different from <c>y</c></cell></row>
            <row><cell><c>x &lt; y</c></cell><cell><c>x</c> is less than <c>y</c></cell></row>
            <row><cell><c>x &lt;= y</c></cell><cell><c>x</c> is less than or equal to <c>y</c></cell></row>
            <row><cell><c>x &gt; y</c></cell><cell><c>x</c> is greater than <c>y</c></cell></row>
            <row><cell><c>x &gt;= y</c></cell><cell><c>x</c> is greater than or equal to <c>y</c></cell></row>
        </tabular>
    </table>
    <p> The first two of these operators are defined for generally every data type; in defining a new data type, it is important to decide what it means for two objects of that type to be equal. The latter four operators require that objects of the data type can be intrinsically ordered.
        For the ordered comparison operators to work, the objects to be compared must have an order. It may be surprising what data types are ordered in Python and thus can be compared using <c>&lt;</c> and <c>&gt;</c>.
    </p>
    <sage>
        <input>
            foo = "This is a string"
            bar = 7
            foobar = (foo &lt; bar)
            print foobar
        </input></sage>
    <p>
        Boolean statements may also be combined and modified using the logical operations. Assume in the following table that <c>x</c> and <c>y</c> are of type <c>bool</c>.
    </p>
    <table xml:id="table-BooleanOperators">
        <tabular>
            <row bottom="major"><cell><em>Name</em></cell><cell><em>Usage</em></cell></row>
            <row><cell>Negation</cell><cell><c>not x</c></cell></row>
            <row><cell>Conjuction</cell><cell><c>x and y</c></cell></row>
            <row><cell>Disjunction</cell><cell><c>x or y</c></cell></row>
        </tabular>
    </table>
    <p>
        These may be combined using parentheses to follow all the rules of logic. The code below will generate a truth table showing the logical equivalence called <em>DeMorgan's Law</em>.
    </p>
    <sage>
        <input>
            out = []
            bools = [True, False]
            for p in bools:
                for q in bools:
                    out += [[p,q,not(p),not(q),p and q,not(p and q),(not p) or (not q)]]
            print table(out, align='center', 
                header_row = ['p', 'q', '~p', '~q', 'p^q', '~(p^q)', '(~p)v(~q)'])
                    
        </input></sage>
</section>
