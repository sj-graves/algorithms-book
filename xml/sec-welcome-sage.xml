<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-W-S">
    <title>Getting started with Sage</title>
    <introduction>
        <p>
            Programming in Sage has a low barrier to entry, because Sage code follows Python syntax. This is not perfect, but this is a better first programming language than many alternatives both because of the general utility of Python and its cross-platform availability. No matter what operating system you use, you can write and execute Python! Installing and running Sage on your own computer presents many technical hurdles, especially for a multi-user installation: this is why the lead developer of Sage introduced SageMathCloud, the project which turned into <url href="https://cocalc.com">CoCalc</url>. Using CoCalc means you don't have to install Sage on your own computer, and as long as you have internet access you have access to your projects.
        </p>
        <p>
            For now we'll use embedded <term>Sage cells</term> to discuss the basics of interacting with Sage.
        </p>
        <technology xml:id="tech-W-S-sagecell">
            <title>Sage cells</title>
            <p>
                Sage cells link to the <url href="https://sagecell.sagemath.org/">Sage Cell Server</url>, which is very, very convenient. Sage cells allow you to embed active calculations in almost any website. These will appear strangely in the printed version of the text.
            </p>
            <sage language="sage">
                <input>
                    print 5*"This is a Sage Cell.\n"
                    print 5*"If you're online, press 'Evaluate' now!\n"
                </input>
                <output>
                    This is a Sage Cell.
                    This is a Sage Cell.
                    This is a Sage Cell.
                    This is a Sage Cell.
                    This is a Sage Cell.

                    If you're online, press 'Evaluate (Sage)' now!
                    If you're online, press 'Evaluate (Sage)' now!
                    If you're online, press 'Evaluate (Sage)' now!
                    If you're online, press 'Evaluate (Sage)' now!
                    If you're online, press 'Evaluate (Sage)' now!

                </output>
            </sage>
        </technology>
    </introduction>
    <subsection xml:id="ss-W-S-IO">
        <title>Input and output</title>
        <p>
            Sage cells are plain text cells in whatever editor you use, be it an embedded Sage cell as above or a cell of a Sage worksheet in CoCalc. The input consists of whatever you type in the cell, whether it be meaningful to Sage or not! <term>Values</term> are assigned to <term>variables</term> by using a single <c>=</c>. Assigning a value to a variable produces no output, so the first built-in command function we will use is <c>print</c>. 
        </p>
        <sage>
            <input>
                a = 12
                b = 12.3
                c = 5/6
                print(a*b)
                print(a*c)
                print c
            </input>
            <output>
                147.600000000000
                10
                5/6
            </output>
        </sage>
        <p>
            Embedded Sage cells on a single page behave the same way multiple cells of a Sage worksheet behave in CoCalc: the value stored in a variable is kept in memory until the page is reloaded or the worksheet restarted. This does require that evaluation of Sage cells happens in the same order every time. For instance, if the cell below is executed <em>before</em> the cell above, an error would result, because the variables <c>a</c> and <c>c</c> are undefined in the cell below, if the cell above is never evaluated!
        </p>
        <sage>
            <input>
                print a > a*c
            </input>
            <output>
                True
            </output>
        </sage>
        <exercise>
            <p>What is different about the use of <c>print</c> in the two Sage cells above?</p>
        </exercise>
    </subsection>
    <subsection xml:id="ss-W-S-BO">
        <title>Basic operations</title>
        <p>
            From the examples above we see that Sage accepts a variety of formats of numbers, notably integers, approximate real numbers (called <term>floating point numbers</term>), and exact rational numbers. Sage can also understand many other things, and since the arithmetic operations are constantly useful Sage allows all basic arithmetic operations between mathematical objects in exactly the sense that a mathematician would hope.
        </p>
        <sage>
            <input>
                z = a+b*I
                w = c+a*I
                print(z)
                print w
                print w^2 + 2*w + 5
                print z/w
                print exp(a), log(c)
            </input>
            <output>
                12.0000000000000 + 12.3000000000000*I
                12*I + 5/6
                44*I - 4919/36
                1.08919178345172 - 0.924361681704742*I
                e^12 log(5/6)
            </output>
        </sage>
        <exercise>
            <p> What is the effect of having a comma between two objects in a <c>print</c> statement? </p>
        </exercise>
        <p>
            There are mathematical operations which are perhaps less well known but often important for computation which deserve special treament: integer division and remainder calculations. We recall some basic mathematical facts. As this text will not focus upon proof, the proofs of theorems whenever given are provided solely for the pleasure of the reader.
        </p>
        <axiom>
            <title>Well-ordering principle</title>
            <idx>well-ordering principle</idx>
            <statement>
                Every non-empty subset of the positive integers has a least element.
            </statement>
        </axiom>
        <theorem>
            <title>The division algorithm</title>
            <idx>division algorithm</idx>
            <statement>
                Suppose <m>a\in\Z</m> and <m>b\in\Z^+</m>. Then there is a unique pair of integers <m>q</m> and <m>0\leq r\lt b</m> such that <me>a = bq+r</me>.
            </statement>
            <proof>
                <p>
                    Suppose <m>a,b\in\Z^+</m>, and consider the set <m>S = \set{a-bq\in\Z:a-bq\geq 0}</m>. We must first show that <m>S</m> is non-empty to use the well-ordering principle; 
                    if <m>a\gt 0</m> then <m>a = a-0(b)\in S</m>. If <m>a=0</m> then <m>b = 0+b = a-(-1)b\in S</m>. Finally, if <m>a\lt 0</m>, since <m>b\gt 0</m> we have 
                    <me>-a(b-1) = a-a(b) \in S</me>, and thus <m>S</m> is nonempty. By well-ordering, <m>S</m> has a least element <m>a-bq\geq 0</m> for some <m>q\in\Z</m>.
                </p>
                <p>
                    If <m>a-bq\geq b</m>, then <me>a-b(q+1) = a-bq-b\geq 0</me>, but <me>a-b(q+1)\lt a-bq</me>, contradicting our choice of <m>a-bq</m> as the least element of <m>S</m>. Thus <m>0\leq a-bq \lt b</m>. Let <m>r=a-bq</m>; then we have shown that a pair of integers <m>q,r</m> exist as per the theorem.
                </p>
                <p>
                    Suppose there are <m>\theta,\rho\in\Z</m> with <m>0\leq \rho\lt b</m> such that <m>a = b\theta + \rho</m>. Then 
                    <me>bq+r = a = b\theta+\rho</me>
                    and so
                    <me>b(q-\theta) = \rho-r.</me>
                    Thus <m>b</m> divides <m>\rho - r</m>. Since <m>-b\leq \rho-r\leq b</m>, it is only possible for <m>b</m> to divide <m>\rho-r</m> if <m>\rho-r = 0</m>, whereby <m>\rho=r</m>. But then we have <m>bq+r = b\theta+r</m>, so <m>b(q-\theta) = 0</m>; since <m>b\gt 0</m>, it must be that <m>q=\theta</m> and so our constructed <m>q</m> and <m>r</m> are unique.
                </p>
                
            </proof>
        </theorem>
        <p>
            With the mathematical idea of integer division refreshed in our minds we turn towards the implementation: given integers <m>a</m> and <m>b</m>, how do we effectively compute <m>q</m> and <m>r</m> using Sage?
        </p>
        <sage>
            <input>
                a = 123456789
                b = 951847
                print a//b, a%b
                q = a//b
                r = a%b
                print a-(b*q+r)
                q1, r1 = divmod(a,b)
                print a-(b*q1+r1)
            </input>
            <output>
                129 668526
                0
                0
            </output>
        </sage>
        <exercise>
            <statement>
                <p>
                    Consider a few subquestions:
                </p>
                <ol>
                    <li> What does <c>//</c> do? What does <c>%</c> do? </li>
                    <li> What does <c>divmod</c> do? </li>
                    <li> What happens when a comma-separated list of variables is on the left side of the equal sign in an assignment, like in line 7 of the Sage cell above? Does this always work?</li>
                    <li>
                        <idx>floor</idx><idx>ceiling</idx>
                        <p>
                            Another way to compute <c>q</c> is to use the <term>floor function</term>. The mathematical notation and definition of the floor function is <me>\floor{x} = \max\set{k\in\Z:k\leq x},</me> which is to say that <m>\floor{x}</m> is the greatest integer less than or equal to <m>x</m>. Related to the floor function is the <term>ceiling function</term>, <me>\ceil{x} = \min\set{k\in\Z : k\geq x},</me> which is the least integer greater than or equal to <m>x</m>. These two functions are implemented in Sage using the <c>floor</c> and <c>ceil</c> functions. Investigate how you can use the floor and ceiling functions to compute <c>q</c> and <c>r</c>.
                        </p>
                    </li>
                </ol>
                <sage>
                    <input>
                        help(math.floor)
                        math.ceil?
                    </input>
                </sage>
                <p>
                    We see in this Sage cell that there are two interfaces to find help about commands in Sage: <c>help(command_name)</c> and <c>command_name?</c>.
                </p>
            </statement>
        </exercise>
<!--         <p>
            For more complicated mathematical functions, especially those which have a symbolic representation which is difficult to type, Sage provides a different mechanism. As an example, consider the number <m>w = \frac56+12 i </m> given above; its 
        </p> -->
    </subsection>
    <subsection>
        <title>An in-depth introduction</title>
        <p>
            The best way to learn Sage is the same as the best way to learn any other programming language: open it up and play with it. The great joy of Sage is that there is essentially no barrier to entry, because you can immediately execute whatever you type. It may not work, but you'll just get an error message and be able to learn from it. With a more traditional language like C++, you have to go through the process of learning how to compile, link, load, and execute your program. With Sage, you either click <q>Evaluate</q> or press <em>Shift-Enter</em>!
        </p>
        <p>
            For a longer treatment of the basic uses of Sage, <url href="http://www.gregory-bard.com/home.html"><pubtitle>Sage for Undergraduates</pubtitle></url><xref ref="bib_SageBook"/> is a very strong introduction. For a course only in <em>using Sage</em>, Bard's book does not have any real competition; as a book in programming in Sage, it has shortfalls, because that was not its intent. <pubtitle>Sage for Undergraduates</pubtitle> remains a very good explanation of how to use routine commands in Sage, as the assistance provided by <c>help(command_name)</c> or <c>command_name?</c> is often extremely technical.
        </p>
    </subsection>
    <reading-questions>
        <exercise>
            <p>What does <c>print</c> do?</p>
        </exercise>
        <exercise>
            <p>What do <c>//</c>, <c>%</c>, and <c>divmod</c> do?</p>
        </exercise>
        <exercise>
            <p>What do <c>floor</c> and <c>ceil</c> do?</p>
        </exercise>
    </reading-questions>
</section>
