<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-W-S">
    <title>Getting started with Sage</title>
<!--############################
    ############################-->
    <introduction>
        <p>
            Unlike with most programming languages, you don't need to have anything other than a web browser installed to work with Sage. Although Sage code is written using Python syntax, to interact with Sage you must access a <term>Sage server</term>: the two which we will discuss are the <term>Sage Cell Server</term> and <term>CoCalc</term>. A third option for the technically savvy user is to install and run your own Sage server, but this is an unnecessary hurdle in most cases <mdash /> as long as you have internet access, you can access the Sage Cell Server or CoCalc.
        </p>
    </introduction>
<!--############################
    ############################-->
    <subsection xml:id="ss-W-S-IO">
        <title>Input and output</title>
        <technology xml:id="tech-sagecell">
            <idx><h>Sage cell</h></idx>
            <title>Sage cells</title>
            <p>
                Embedded Sage cells link to the <url href="https://sagecell.sagemath.org/">Sage Cell Server</url> and allow you to make active calculations in almost any website.
            </p>
            <sage language="sage">
                <input>
                    
                </input>
                <output>
                    
                </output>
            </sage>
            <p>
                These will appear strangely in a PDF version of the text.
            </p>
        </technology>
        <exercise>
            <statement>
                Type the command <c>print("Hello, world!")</c> into a Sage cell and then press Shift-Enter. You have successfully written your first Sage program!
            </statement>
        </exercise>
        <p>
            Sage does not automatically execute your <term>input</term> as soon as you press Enter (or Return, depending upon your keyboard). Both the Sage Cell server and CoCalc will wait for you to <term>evaluate</term> the cell where you are typing; the normal keyboard-based way to execute a cell is to press Shift-Enter. Alternately, both methods provide an "evaluate" button.
        </p>
        <warning>
            <title>Execute all the cells!</title>
            <idx><h>Sage cell</h><h>execution</h></idx>
            <p>
                When working with this book in its natural format as an online ebook, it is very important to execute all Sage cells in a section <em>in order!</em> Sage cells store the values of variables beyond the execution of a single cell on a web page <mdash /> any section of this book containing multiple Sage cells expects them to be executed in top-to-bottom order in the online version of the book!
            </p>
        </warning>
        <p>
            The method of <term>output</term> will differ slightly between CoCalc and the Sage Cell server. When using embedded Sage cells, only the last line of input will print its value, unless the <c>print</c> command is used. CoCalc, on the other hand, outputs the value of every line of input.
        </p>
        <sage>
            <input>
                12
                24.3
                print(51)
                19
            </input>
            <output>
                51
                19
            </output>
        </sage>
        <technology xml:id="tech-print">
            <title><c>print</c></title>
            <idx><h>Sage</h><h>commands</h><h><c>print</c></h></idx>
            <statement>
                The normal way to produce output in Sage is using the <c>print</c> command. In CoCalc it can be used as a function or as a special keyword command; as of January 2020, the embedded Sage cells require the new function call syntax for <c>print</c> statements.
                <sage>
                    <input>
                        print("This is how you use print as a function.")
                        print("The print","command is very","well behaved.")
                    </input>
                    <output>
                        This is how you use print as a function.
                        The print command is very well behaved.
                    </output>
                </sage>
            </statement>
        </technology>
        <technology xml:id="tech-w-s-io-vnkw">
            <title>Variable names and keywords</title>
            <p>
                Unlike in mathematics, programmers generally choose meaningful words to be the names of variables. The names which can be used for variables can consist of both letters and numbers, though variable names cannot begin with a number, and they can also contain the underscore character <c>_</c>. Hence a good variable name might be <c>letters_in_mailbox</c> but not <c>99red_balloons</c>. It is a convention in Python to use lower-case letters for variable names; other languages might name a variable <c>numberOfSprockets</c> (which is called <em>camel case</em> because it has humps) but Python (and therefore Sage) prefers <c>number_of_sprockets</c> (which is called <em>snake case</em> or <em>pothole case</em> or several other amusing names).
            </p>
            <p>
                There are certain words which cannot be used as variable names, because they are Python <term>keywords</term> which allow Python to function.
            </p>
            <table xml:id="tab-w-s-io-kw">
                <title>Python 3 keywords</title>
                <tabular>
                    <row>
                        <cell><c>False</c></cell>
                        <cell><c>None</c></cell>
                        <cell><c>True</c></cell>
                        <cell><c>and</c></cell>
                        <cell><c>as</c></cell>
                        <cell><c>assert</c></cell>
                    </row>
                    <row>
                        <cell><c>break</c></cell>
                        <cell><c>class</c></cell>
                        <cell><c>continue</c></cell>
                        <cell><c>def</c></cell>
                        <cell><c>del</c></cell>
                        <cell><c>elif</c></cell>
                    </row>
                    <row>
                        <cell><c>else</c></cell>
                        <cell><c>except</c></cell>
                        <cell><c>finally</c></cell>
                        <cell><c>for</c></cell>
                        <cell><c>from</c></cell>
                        <cell><c>global</c></cell>
                    </row>
                    <row>
                        <cell><c>if</c></cell>
                        <cell><c>import</c></cell>
                        <cell><c>in</c></cell>
                        <cell><c>is</c></cell>
                        <cell><c>lambda</c></cell>
                        <cell><c>nonlocal</c></cell>
                    </row>
                    <row>
                        <cell><c>not</c></cell>
                        <cell><c>or</c></cell>
                        <cell><c>pass</c></cell>
                        <cell><c>raise</c></cell>
                        <cell><c>return</c></cell>
                        <cell><c>try</c></cell>
                    </row>
                    <row>
                        <cell><c>while</c></cell>
                        <cell><c>with</c></cell>
                        <cell><c>yield</c></cell>
                        <cell></cell>
                        <cell></cell>
                    </row>
                </tabular>
            </table>
        </technology>
        <technology xml:id="tech-W-S-io-BAO">
            <title>Basic arithmetic operations</title>
            <p>
                Sage works naturally as a calculator using the closest approximations to our arithmetic symbols.
            </p>
            <table>
                <title>Mathematical operators in Sage</title>
                <idx><h>Sage</h><h>basic math operators</h></idx>
                <tabular>
                    <col halign="center" />
                    <col halign="center" />
                    <row header="yes" bottom="medium">
                        <cell>Math</cell>
                        <cell>Sage</cell>
                    </row>
                    <row><!-- Addition -->
                        <cell><m>x + y</m></cell>
                        <cell><c>x + y</c></cell>
                    </row>
                    <row><!-- Subtraction -->
                        <cell><m>x - y</m></cell>
                        <cell><c>x - y</c></cell>
                    </row>
                    <row><!-- Multiplication -->
                        <cell><m>x\times y</m> or <m>x\cdot y</m></cell>
                        <cell><c>x * y</c></cell>
                    </row>
                    <row><!-- Division -->
                        <cell><m>x\div y</m> or <m>x/y</m></cell>
                        <cell><c>x / y</c></cell>
                    </row>
                    <row><!-- Exponentiation -->
                        <cell><m>x^2</m></cell>
                        <cell><c>x^2</c></cell>
                    </row>
                </tabular>
            </table>
            <sage>
                <input>
                    print(12+13)
                    print(15.6/3)
                    print(2^4)
                    print( (-2+3*I)/(5+4*I) )
                </input>
                <output>
                    25
                    5.20000000000000
                    16
                    23/41*I + 2/41
                </output>
            </sage>


        </technology>
        <exercise xml:id="ex-w-s-io-complex">
            <title><c>I</c></title>
            <p>
                What does the <c>I</c> mean in <c>-2+3*I</c>?
            </p>
        </exercise>
    </subsection>
<!--############################
    ############################-->
    <subsection xml:id="ss-W-S-BDT">
        <title>Basic data types</title>
        <p>
            We have just seen some values with which Sage can work. Each of those values falls into some category of values, called a <term>type</term>.
        </p>
        <definition xml:id="def-datatype">
            <title>Data type</title>
            <idx><h>data type</h></idx>
            <statement>
                A <term>data type</term> is a specific category of values.
            </statement>
        </definition>
        <technology xml:id="tech-type">
            <idx><h>Sage</h><h>commands</h><h><c>type</c></h></idx>
            <title><c>type</c></title>
            <statement>
                The function for checking the type of a value in Sage is <c>type</c>. The output of this is sometimes confusing.
            </statement>
            <sage>
                <input>
                    print(type('bob'))
                    print(type(1.3))
                    print(type(1+2*I))
                    print(type(42))
                </input>
            </sage>
        </technology>
        <exercise xml:id="ex-w-s-bdt">
            <title>Numerical data types</title>
            <statement>
                Identify the type of each of the values computed in the Sage cell of <xref ref="tech-W-S-io-BAO" text="type-global" />.
            </statement>
        </exercise>
        <p>
            Another important but basic data type is the <term>string</term>, the data type of which is <c>str</c>.
        </p>
        <definition xml:id="def-string">
            <title>Strings</title>
            <idx><h>string</h></idx>
            <statement>
                A <term>string</term> is a sequence of letters or other characters.
            </statement>
        </definition>
        
        <technology xml:id="tech-str">
            <title><c>str</c></title>
            <p>
                Strings are represented in Sage by the <c>str</c> type. In order to input a string, it is necessary to enclose it in some form of matchinq quotation marks. The allowable forms are given in the table below.
            </p>
            <table>
                <title>Input formats for <c>str</c> in Sage</title>
                <tabular>
                    <row bottom="major">
                        <cell>Enclosed by</cell>
                        <cell>Example</cell>
                    </row>
                    <row>
                        <cell>Single quotes</cell>
                        <cell><c>'Make it so, number one.'</c></cell>
                    </row>
                    <row>
                        <cell>Double quotes</cell>
                        <cell><c>"Engage!"</c></cell>
                    </row>
                    <row>
                        <cell>Three single quotes</cell>
                        <cell><c>'''These can contain line breaks!'''</c></cell>
                    </row>
                    <row>
                        <cell>Three double quotes</cell>
                        <cell><c>"""These can contain line breaks too!"""</c></cell>
                    </row>
                </tabular>
            </table>
            <p>
                The triple-enclosed strings can span line breaks. These are <term>multiline strings</term>.
            </p>
            <sage>
                <input>
                    '''Space: the final frontier. These are the voyages of the starship Enterprise. 
                    Its continuing mission: to explore strange new worlds, 
                    to seek out new life and new civilizations, 
                    to boldly go where no one has gone before.'''
                </input>
            </sage>
        </technology>
        
        <exercise>
            <statement>What is the data type of <c>'4'</c>?</statement>
        </exercise>
        

        <exercise>
            <statement>
                When a <c>str</c> is evaluated, it is enclosed in quotes, and those quotes sometimes contain special two-letter codes like <c>\n</c> or <c>\t</c>. What does <c>"\n"</c> become when the string is printed instead of being evaluated?
            </statement>
        </exercise>
        <exercise>
            <statement>
                How would you output the string <c>Quoth the raven, "Nevermore!"</c>?
            </statement>
            <hint>
                <p>You're allowed to alternate quotation marks in written English. What happens here?</p>
            </hint>
        </exercise>
    </subsection>
<!--############################
    ############################-->
    <subsection xml:id="ss-W-S-AAO">
        <title>Advanced arithmetical operations</title>
        <p>
            There are mathematical operations which are perhaps less well known but often important for computation which deserve special treament: integer division and remainder calculations. We recall some basic mathematical facts. As this text will not focus upon proof, the proofs of theorems whenever given are provided solely for the pleasure of the reader.
        </p>
        <axiom>
            <title>Well-ordering principle</title>
            <idx>well-ordering principle</idx>
            <statement>
                Every non-empty subset of the positive integers has a least element.
            </statement>
        </axiom>
        <theorem>
            <title>The division algorithm</title>
            <idx>division algorithm</idx>
            <statement>
                Suppose <m>a\in\Z</m> and <m>b\in\Z^+</m>. Then there is a unique pair of integers <m>q</m> and <m>0\leq r\lt b</m> such that <me>a = bq+r</me>.
            </statement>
            <proof>
                <p>
                    Suppose <m>a,b\in\Z^+</m>, and consider the set <m>S = \set{a-bq\in\Z:a-bq\geq 0}</m>. We must first show that <m>S</m> is non-empty to use the well-ordering principle; 
                    if <m>a\gt 0</m> then <m>a = a-0(b)\in S</m>. If <m>a=0</m> then <m>b = 0+b = a-(-1)b\in S</m>. Finally, if <m>a\lt 0</m>, since <m>b\gt 0</m> we have 
                    <me>-a(b-1) = a-a(b) \in S</me>, and thus <m>S</m> is nonempty. By well-ordering, <m>S</m> has a least element <m>a-bq\geq 0</m> for some <m>q\in\Z</m>.
                </p>
                <p>
                    If <m>a-bq\geq b</m>, then <me>a-b(q+1) = a-bq-b\geq 0</me>, but <me>a-b(q+1)\lt a-bq</me>, contradicting our choice of <m>a-bq</m> as the least element of <m>S</m>. Thus <m>0\leq a-bq \lt b</m>. Let <m>r=a-bq</m>; then we have shown that a pair of integers <m>q,r</m> exist as per the theorem.
                </p>
                <p>
                    Suppose there are <m>\theta,\rho\in\Z</m> with <m>0\leq \rho\lt b</m> such that <m>a = b\theta + \rho</m>. Then 
                    <me>bq+r = a = b\theta+\rho</me>
                    and so
                    <me>b(q-\theta) = \rho-r.</me>
                    Thus <m>b</m> divides <m>\rho - r</m>. Since <m>-b\leq \rho-r\leq b</m>, it is only possible for <m>b</m> to divide <m>\rho-r</m> if <m>\rho-r = 0</m>, whereby <m>\rho=r</m>. But then we have <m>bq+r = b\theta+r</m>, so <m>b(q-\theta) = 0</m>; since <m>b\gt 0</m>, it must be that <m>q=\theta</m> and so our constructed <m>q</m> and <m>r</m> are unique.
                </p>
                
            </proof>
        </theorem>
        <p>
            With the mathematical idea of integer division refreshed in our minds we turn towards the implementation: given integers <m>a</m> and <m>b</m>, how do we effectively compute <m>q</m> and <m>r</m> using Sage?
        </p>
        <sage>
            <input>
                a = 123456789
                b = 951847
                print(a//b, a%b)
                q = a//b
                r = a%b
                print(a-(b*q+r))
                q1, r1 = divmod(a,b)
                print(a-(b*q1+r1))
            </input>
            <output>
                129 668526
                0
                0
            </output>
        </sage>
        <exercise>
            <statement>
                <p>
                    Consider a few subquestions:
                </p>
                <ol>
                    <li> What does <c>//</c> do? What does <c>%</c> do? </li>
                    <li> What does <c>divmod</c> do? </li>
                    <li> What happens when a comma-separated list of variables is on the left side of the equal sign in an assignment, like in line 7 of the Sage cell above? Does this always work?</li>
                    <li>
                        <idx>floor</idx><idx>ceiling</idx>
                        <p>
                            Another way to compute <c>q</c> is to use the <term>floor function</term>. The mathematical notation and definition of the floor function is <me>\floor{x} = \max\set{k\in\Z:k\leq x},</me> which is to say that <m>\floor{x}</m> is the greatest integer less than or equal to <m>x</m>. Related to the floor function is the <term>ceiling function</term>, <me>\ceil{x} = \min\set{k\in\Z : k\geq x},</me> which is the least integer greater than or equal to <m>x</m>. These two functions are implemented in Sage using the <c>floor</c> and <c>ceil</c> functions. Investigate how you can use the floor and ceiling functions to compute <c>q</c> and <c>r</c>.
                        </p>
                    </li>
                </ol>
                <sage>
                    <input>
                        help(math.floor)
                        floor(pi)
                    </input>
                </sage>
                <sage>
                    <input>
                        math.ceil?
                        ceil(pi)
                    </input>
                </sage>
                <p>
                    We see in these Sage cells that there are two interfaces to find help about commands in Sage: <c>help(command_name)</c> and <c>command_name?</c>.
                </p>
            </statement>
        </exercise>
    </subsection>
<!--############################
    ############################-->
    <conclusion>
        <title>An in-depth introduction</title>
        <p>
            The best way to learn Sage is the same as the best way to learn any other programming language: open it up and play with it. A great joy of Sage is that there is essentially no barrier to entry, because you can immediately execute whatever you type. It may not work, but you'll just get an error message and be able to learn from it. With a more traditional language like C++, you have to go through the process of learning how to compile, link, load, and execute your program. With Sage, you either click <q>Evaluate</q> or press <em>Shift-Enter</em>!
        </p>
        <p>
            For a longer treatment of the basic uses of Sage, <url href="http://www.gregory-bard.com/home.html"><pubtitle>Sage for Undergraduates</pubtitle></url><xref ref="bib_SageBook"/> is a very strong introduction. For a course only in <em>using Sage</em>, Bard's book does not have any real competition; as a book in programming in Sage, it has shortfalls, because that was not its intent. <pubtitle>Sage for Undergraduates</pubtitle> remains a very good explanation of how to use routine commands in Sage, as the assistance provided by <c>help(command_name)</c> or <c>command_name?</c> is often extremely technical. Finally, when working with CoCalc, you can use <term>tab-completion</term>; starting to type a command in a Sage worksheet and then pressing <c>tab</c> on your keyboard will open a pull-down list of all the possible commands you could enter which begin with your partial command. There are many times when wanting to perform a mathematical task combined with a willingness to read the help files and use tab-completion allows for complicated problems to be solved simply using built-in features of CoCalc.
        </p>
    </conclusion>
<!--     <reading-questions>
        <exercise>
            <p>What does <c>print</c> do?</p>
        </exercise>
        <exercise>
            <p>What do <c>//</c>, <c>%</c>, and <c>divmod</c> do?</p>
        </exercise>
        <exercise>
            <p>What do <c>floor</c> and <c>ceil</c> do?</p>
        </exercise>
    </reading-questions> -->
</section>
